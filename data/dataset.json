{
  "total_count": 410,
  "exclude_count": 0,
  "success_count": 410,
  "failed_count": 0,
  "skip_count": 0,
  "test_cases": null,
  "repo_module": "github.com/labstack/echo/v4",
  "base_commit": "55cb3b625d1228827fa35a3cfc4dd15b3a3a406b",
  "git_repo": "https://github.com/labstack/echo.git",
  "dataset": [
    {
      "id": "github.com/labstack/echo/v4/bind.go:BindHeaders",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        }
      ],
      "name": "BindHeaders",
      "signature": "(b *DefaultBinder) BindHeaders (c Context, i interface{}) error",
      "ground_truth": "func (b *DefaultBinder) BindHeaders(c Context, i interface{}) error {\n\tif err := b.bindData(i, c.Request().Header, \"header\", nil); err != nil {\n\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t}\n\treturn nil\n}",
      "function_comment": "// BindHeaders binds HTTP headers to a bindable object",
      "function_statement": "// BindHeaders binds HTTP headers to a bindable object",
      "start_line": 128,
      "end_line": 133,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) bindData(destination interface{}, data map[string][]string, tag string, dataFiles map[string][]*multipart.FileHeader) error {\n\tif destination == nil || (len(data) == 0 \u0026\u0026 len(dataFiles) == 0) {\n\t\treturn nil\n\t}\n\thasFiles := len(dataFiles) \u003e 0\n\ttyp := reflect.TypeOf(destination).Elem()\n\tval := reflect.ValueOf(destination).Elem()\n\n\t// Support binding to limited Map destinations:\n\t// - map[string][]string,\n\t// - map[string]string \u003c-- (binds first value from data slice)\n\t// - map[string]interface{}\n\t// You are better off binding to struct but there are user who want this map feature. Source of data for these cases are:\n\t// params,query,header,form as these sources produce string values, most of the time slice of strings, actually.\n\tif typ.Kind() == reflect.Map \u0026\u0026 typ.Key().Kind() == reflect.String {\n\t\tk := typ.Elem().Kind()\n\t\tisElemInterface := k == reflect.Interface\n\t\tisElemString := k == reflect.String\n\t\tisElemSliceOfStrings := k == reflect.Slice \u0026\u0026 typ.Elem().Elem().Kind() == reflect.String\n\t\tif !(isElemSliceOfStrings || isElemString || isElemInterface) {\n\t\t\treturn nil\n\t\t}\n\t\tif val.IsNil() {\n\t\t\tval.Set(reflect.MakeMap(typ))\n\t\t}\n\t\tfor k, v := range data {\n\t\t\tif isElemString {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else if isElemInterface {\n\t\t\t\t// To maintain backward compatibility, we always bind to the first string value\n\t\t\t\t// and not the slice of strings when dealing with map[string]interface{}{}\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v))\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\t// !struct\n\tif typ.Kind() != reflect.Struct {\n\t\tif tag == \"param\" || tag == \"query\" || tag == \"header\" {\n\t\t\t// incompatible type, data is probably to be found in the body\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"binding element must be a struct\")\n\t}\n\n\tfor i := 0; i \u003c typ.NumField(); i++ { // iterate over all destination fields\n\t\ttypeField := typ.Field(i)\n\t\tstructField := val.Field(i)\n\t\tif typeField.Anonymous {\n\t\t\tif structField.Kind() == reflect.Ptr {\n\t\t\t\tstructField = structField.Elem()\n\t\t\t}\n\t\t}\n\t\tif !structField.CanSet() {\n\t\t\tcontinue\n\t\t}\n\t\tstructFieldKind := structField.Kind()\n\t\tinputFieldName := typeField.Tag.Get(tag)\n\t\tif typeField.Anonymous \u0026\u0026 structFieldKind == reflect.Struct \u0026\u0026 inputFieldName != \"\" {\n\t\t\t// if anonymous struct with query/param/form tags, report an error\n\t\t\treturn errors.New(\"query/param/form tags are not allowed with anonymous struct field\")\n\t\t}\n\n\t\tif inputFieldName == \"\" {\n\t\t\t// If tag is nil, we inspect if the field is a not BindUnmarshaler struct and try to bind data into it (might contain fields with tags).\n\t\t\t// structs that implement BindUnmarshaler are bound only when they have explicit tag\n\t\t\tif _, ok := structField.Addr().Interface().(BindUnmarshaler); !ok \u0026\u0026 structFieldKind == reflect.Struct {\n\t\t\t\tif err := b.bindData(structField.Addr().Interface(), data, tag, dataFiles); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\t// does not have explicit tag and is not an ordinary struct - so move to next field\n\t\t\tcontinue\n\t\t}\n\n\t\tif hasFiles {\n\t\t\tif ok, err := isFieldMultipartFile(structField.Type()); err != nil {\n\t\t\t\treturn err\n\t\t\t} else if ok {\n\t\t\t\tif ok := setMultipartFileHeaderTypes(structField, inputFieldName, dataFiles); ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinputValue, exists := data[inputFieldName]\n\t\tif !exists {\n\t\t\t// Go json.Unmarshal supports case-insensitive binding.  However the\n\t\t\t// url params are bound case-sensitive which is inconsistent.  To\n\t\t\t// fix this we must check all of the map values in a\n\t\t\t// case-insensitive search.\n\t\t\tfor k, v := range data {\n\t\t\t\tif strings.EqualFold(k, inputFieldName) {\n\t\t\t\t\tinputValue = v\n\t\t\t\t\texists = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\n\t\t// NOTE: algorithm here is not particularly sophisticated. It probably does not work with absurd types like `**[]*int`\n\t\t// but it is smart enough to handle niche cases like `*int`,`*[]string`,`[]*int` .\n\n\t\t// try unmarshalling first, in case we're dealing with an alias to an array type\n\t\tif ok, err := unmarshalInputsToField(typeField.Type.Kind(), inputValue, structField); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tformatTag := typeField.Tag.Get(\"format\")\n\t\tif ok, err := unmarshalInputToField(typeField.Type.Kind(), inputValue[0], structField, formatTag); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// we could be dealing with pointer to slice `*[]string` so dereference it. There are weird OpenAPI generators\n\t\t// that could create struct fields like that.\n\t\tif structFieldKind == reflect.Pointer {\n\t\t\tstructFieldKind = structField.Elem().Kind()\n\t\t\tstructField = structField.Elem()\n\t\t}\n\n\t\tif structFieldKind == reflect.Slice {\n\t\t\tsliceOf := structField.Type().Elem().Kind()\n\t\t\tnumElems := len(inputValue)\n\t\t\tslice := reflect.MakeSlice(structField.Type(), numElems, numElems)\n\t\t\tfor j := 0; j \u003c numElems; j++ {\n\t\t\t\tif err := setWithProperType(sliceOf, inputValue[j], slice.Index(j)); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tstructField.Set(slice)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := setWithProperType(structFieldKind, inputValue[0], structField); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        128,
        129,
        130,
        131,
        132
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Any",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        }
      ],
      "name": "Any",
      "signature": "(e *Echo) Any (path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route",
      "ground_truth": "func (e *Echo) Any(path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route {\n\troutes := make([]*Route, len(methods))\n\tfor i, m := range methods {\n\t\troutes[i] = e.Add(m, path, handler, middleware...)\n\t}\n\treturn routes\n}",
      "function_comment": "// Any registers a new route for all HTTP methods (supported by Echo) and path with matching handler\n// in the router with optional route-level middleware.\n//\n// Note: this method only adds specific set of supported HTTP methods as handler and is not true\n// \"catch-any-arbitrary-method\" way of matching requests.",
      "function_statement": "// Any registers a new route for all HTTP methods (supported by Echo) and path with matching handler\n// in the router with optional route-level middleware.\n//\n// Note: this method only adds specific set of supported HTTP methods as handler and is not true\n// \"catch-any-arbitrary-method\" way of matching requests.",
      "start_line": 545,
      "end_line": 551,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "methods = [...]string{\n\thttp.MethodConnect,\n\thttp.MethodDelete,\n\thttp.MethodGet,\n\thttp.MethodHead,\n\thttp.MethodOptions,\n\thttp.MethodPatch,\n\thttp.MethodPost,\n\tPROPFIND,\n\thttp.MethodPut,\n\thttp.MethodTrace,\n\tREPORT,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        545,
        546,
        547,
        548,
        549,
        550
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetParamValues",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "SetParamValues",
      "signature": "(c *context) SetParamValues (values ...string)",
      "ground_truth": "func (c *context) SetParamValues(values ...string) {\n\t// NOTE: Don't just set c.pvalues = values, because it has to have length c.echo.maxParam (or bigger) at all times\n\t// It will break the Router#Find code\n\tlimit := len(values)\n\tif limit \u003e len(c.pvalues) {\n\t\tc.pvalues = make([]string, limit)\n\t}\n\tfor i := 0; i \u003c limit; i++ {\n\t\tc.pvalues[i] = values[i]\n\t}\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 360,
      "end_line": 370,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369
      ],
      "cover_details": {
        "line_cover_rate": 0.9090909090909091
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:uintsValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "uintsValue",
      "signature": "(b *ValueBinder) uintsValue (sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 773,
      "end_line": 786,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uints(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]uint64:\n\t\ttmp := make([]uint64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint32:\n\t\ttmp := make([]uint32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint16:\n\t\ttmp := make([]uint16, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 16)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint8: // byte is alias to uint8\n\t\ttmp := make([]uint8, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 8)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint:\n\t\ttmp := make([]uint, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 0)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        773,
        774,
        775,
        776,
        778,
        779,
        780,
        781,
        782,
        783,
        785
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustFloat32",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        }
      ],
      "name": "MustFloat32",
      "signature": "(b *ValueBinder) MustFloat32 (sourceParam string, dest *float32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustFloat32(sourceParam string, dest *float32) *ValueBinder {\n\treturn b.floatValue(sourceParam, dest, 32, true)\n}",
      "function_comment": "// MustFloat32 requires parameter value to exist to bind to float32 variable. Returns error when value does not exist",
      "function_statement": "// MustFloat32 requires parameter value to exist to bind to float32 variable. Returns error when value does not exist",
      "start_line": 990,
      "end_line": 992,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.float(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        990,
        991,
        992
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:DefaultHTTPErrorHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "DefaultHTTPErrorHandler",
      "signature": "(e *Echo) DefaultHTTPErrorHandler (err error, c Context)",
      "ground_truth": "func (e *Echo) DefaultHTTPErrorHandler(err error, c Context) {\n\n\tif c.Response().Committed {\n\t\treturn\n\t}\n\n\the, ok := err.(*HTTPError)\n\tif ok {\n\t\tif he.Internal != nil {\n\t\t\tif herr, ok := he.Internal.(*HTTPError); ok {\n\t\t\t\the = herr\n\t\t\t}\n\t\t}\n\t} else {\n\t\the = \u0026HTTPError{\n\t\t\tCode:    http.StatusInternalServerError,\n\t\t\tMessage: http.StatusText(http.StatusInternalServerError),\n\t\t}\n\t}\n\n\t// Issue #1426\n\tcode := he.Code\n\tmessage := he.Message\n\n\tswitch m := he.Message.(type) {\n\tcase string:\n\t\tif e.Debug {\n\t\t\tmessage = Map{\"message\": m, \"error\": err.Error()}\n\t\t} else {\n\t\t\tmessage = Map{\"message\": m}\n\t\t}\n\tcase json.Marshaler:\n\t\t// do nothing - this type knows how to format itself to JSON\n\tcase error:\n\t\tmessage = Map{\"message\": m.Error()}\n\t}\n\n\t// Send response\n\tif c.Request().Method == http.MethodHead { // Issue #608\n\t\terr = c.NoContent(he.Code)\n\t} else {\n\t\terr = c.JSON(code, message)\n\t}\n\tif err != nil {\n\t\te.Logger.Error(err)\n\t}\n}",
      "function_comment": "// DefaultHTTPErrorHandler is the default HTTP error handler. It sends a JSON response\n// with status code.\n//\n// NOTE: In case errors happens in middleware call-chain that is returning from handler (which did not return an error).\n// When handler has already sent response (ala c.JSON()) and there is error in middleware that is returning from\n// handler. Then the error that global error handler received will be ignored because we have already \"committed\" the\n// response and status code header has been sent to the client.",
      "function_statement": "// DefaultHTTPErrorHandler is the default HTTP error handler. It sends a JSON response\n// with status code.\n//\n// NOTE: In case errors happens in middleware call-chain that is returning from handler (which did not return an error).\n// When handler has already sent response (ala c.JSON()) and there is error in middleware that is returning from\n// handler. Then the error that global error handler received will be ignored because we have already \"committed\" the\n// response and status code header has been sent to the client.",
      "start_line": 418,
      "end_line": 464,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Map map[string]interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusInternalServerError           = 500",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "func StatusText(code int) string {\n\tswitch code {\n\tcase StatusContinue:\n\t\treturn \"Continue\"\n\tcase StatusSwitchingProtocols:\n\t\treturn \"Switching Protocols\"\n\tcase StatusProcessing:\n\t\treturn \"Processing\"\n\tcase StatusEarlyHints:\n\t\treturn \"Early Hints\"\n\tcase StatusOK:\n\t\treturn \"OK\"\n\tcase StatusCreated:\n\t\treturn \"Created\"\n\tcase StatusAccepted:\n\t\treturn \"Accepted\"\n\tcase StatusNonAuthoritativeInfo:\n\t\treturn \"Non-Authoritative Information\"\n\tcase StatusNoContent:\n\t\treturn \"No Content\"\n\tcase StatusResetContent:\n\t\treturn \"Reset Content\"\n\tcase StatusPartialContent:\n\t\treturn \"Partial Content\"\n\tcase StatusMultiStatus:\n\t\treturn \"Multi-Status\"\n\tcase StatusAlreadyReported:\n\t\treturn \"Already Reported\"\n\tcase StatusIMUsed:\n\t\treturn \"IM Used\"\n\tcase StatusMultipleChoices:\n\t\treturn \"Multiple Choices\"\n\tcase StatusMovedPermanently:\n\t\treturn \"Moved Permanently\"\n\tcase StatusFound:\n\t\treturn \"Found\"\n\tcase StatusSeeOther:\n\t\treturn \"See Other\"\n\tcase StatusNotModified:\n\t\treturn \"Not Modified\"\n\tcase StatusUseProxy:\n\t\treturn \"Use Proxy\"\n\tcase StatusTemporaryRedirect:\n\t\treturn \"Temporary Redirect\"\n\tcase StatusPermanentRedirect:\n\t\treturn \"Permanent Redirect\"\n\tcase StatusBadRequest:\n\t\treturn \"Bad Request\"\n\tcase StatusUnauthorized:\n\t\treturn \"Unauthorized\"\n\tcase StatusPaymentRequired:\n\t\treturn \"Payment Required\"\n\tcase StatusForbidden:\n\t\treturn \"Forbidden\"\n\tcase StatusNotFound:\n\t\treturn \"Not Found\"\n\tcase StatusMethodNotAllowed:\n\t\treturn \"Method Not Allowed\"\n\tcase StatusNotAcceptable:\n\t\treturn \"Not Acceptable\"\n\tcase StatusProxyAuthRequired:\n\t\treturn \"Proxy Authentication Required\"\n\tcase StatusRequestTimeout:\n\t\treturn \"Request Timeout\"\n\tcase StatusConflict:\n\t\treturn \"Conflict\"\n\tcase StatusGone:\n\t\treturn \"Gone\"\n\tcase StatusLengthRequired:\n\t\treturn \"Length Required\"\n\tcase StatusPreconditionFailed:\n\t\treturn \"Precondition Failed\"\n\tcase StatusRequestEntityTooLarge:\n\t\treturn \"Request Entity Too Large\"\n\tcase StatusRequestURITooLong:\n\t\treturn \"Request URI Too Long\"\n\tcase StatusUnsupportedMediaType:\n\t\treturn \"Unsupported Media Type\"\n\tcase StatusRequestedRangeNotSatisfiable:\n\t\treturn \"Requested Range Not Satisfiable\"\n\tcase StatusExpectationFailed:\n\t\treturn \"Expectation Failed\"\n\tcase StatusTeapot:\n\t\treturn \"I'm a teapot\"\n\tcase StatusMisdirectedRequest:\n\t\treturn \"Misdirected Request\"\n\tcase StatusUnprocessableEntity:\n\t\treturn \"Unprocessable Entity\"\n\tcase StatusLocked:\n\t\treturn \"Locked\"\n\tcase StatusFailedDependency:\n\t\treturn \"Failed Dependency\"\n\tcase StatusTooEarly:\n\t\treturn \"Too Early\"\n\tcase StatusUpgradeRequired:\n\t\treturn \"Upgrade Required\"\n\tcase StatusPreconditionRequired:\n\t\treturn \"Precondition Required\"\n\tcase StatusTooManyRequests:\n\t\treturn \"Too Many Requests\"\n\tcase StatusRequestHeaderFieldsTooLarge:\n\t\treturn \"Request Header Fields Too Large\"\n\tcase StatusUnavailableForLegalReasons:\n\t\treturn \"Unavailable For Legal Reasons\"\n\tcase StatusInternalServerError:\n\t\treturn \"Internal Server Error\"\n\tcase StatusNotImplemented:\n\t\treturn \"Not Implemented\"\n\tcase StatusBadGateway:\n\t\treturn \"Bad Gateway\"\n\tcase StatusServiceUnavailable:\n\t\treturn \"Service Unavailable\"\n\tcase StatusGatewayTimeout:\n\t\treturn \"Gateway Timeout\"\n\tcase StatusHTTPVersionNotSupported:\n\t\treturn \"HTTP Version Not Supported\"\n\tcase StatusVariantAlsoNegotiates:\n\t\treturn \"Variant Also Negotiates\"\n\tcase StatusInsufficientStorage:\n\t\treturn \"Insufficient Storage\"\n\tcase StatusLoopDetected:\n\t\treturn \"Loop Detected\"\n\tcase StatusNotExtended:\n\t\treturn \"Not Extended\"\n\tcase StatusNetworkAuthenticationRequired:\n\t\treturn \"Network Authentication Required\"\n\tdefault:\n\t\treturn \"\"\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/encode.go",
          "code_snippet": "Marshaler interface {\n\tMarshalJSON() ([]byte, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        418,
        419,
        420,
        421,
        422,
        424,
        425,
        426,
        427,
        431,
        432,
        433,
        434,
        435,
        436,
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449,
        451,
        452,
        456,
        458,
        459,
        460,
        461
      ],
      "cover_details": {
        "line_cover_rate": 0.7021276595744681
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:add",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "add",
      "signature": "(e *Echo) add (host, method, path string, handler HandlerFunc, middlewares ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) add(host, method, path string, handler HandlerFunc, middlewares ...MiddlewareFunc) *Route {\n\trouter := e.findRouter(host)\n\t//FIXME: when handler+middleware are both nil ... make it behave like handler removal\n\tname := handlerName(handler)\n\troute := router.add(method, path, name, func(c Context) error {\n\t\th := applyMiddleware(handler, middlewares...)\n\t\treturn h(c)\n\t})\n\n\tif e.OnAddRouteHandler != nil {\n\t\te.OnAddRouteHandler(host, *route, handler, middlewares)\n\t}\n\n\treturn route\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 575,
      "end_line": 589,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) findRouter(host string) *Router {\n\tif len(e.routers) \u003e 0 {\n\t\tif r, ok := e.routers[host]; ok {\n\t\t\treturn r\n\t\t}\n\t}\n\treturn e.router\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func handlerName(h HandlerFunc) string {\n\tt := reflect.ValueOf(h).Type()\n\tif t.Kind() == reflect.Func {\n\t\treturn runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name()\n\t}\n\treturn t.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) add(method, path, name string, h HandlerFunc) *Route {\n\tpath = normalizePathSlash(path)\n\tr.insert(method, path, h)\n\n\troute := \u0026Route{\n\t\tMethod: method,\n\t\tPath:   path,\n\t\tName:   name,\n\t}\n\tr.routes[method+path] = route\n\treturn route\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func applyMiddleware(h HandlerFunc, middleware ...MiddlewareFunc) HandlerFunc {\n\tfor i := len(middleware) - 1; i \u003e= 0; i-- {\n\t\th = middleware[i](h)\n\t}\n\treturn h\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        575,
        576,
        577,
        578,
        579,
        580,
        581,
        582,
        584,
        585,
        586,
        588
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:Use",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "Use",
      "signature": "(g *Group) Use (middleware ...MiddlewareFunc)",
      "ground_truth": "func (g *Group) Use(middleware ...MiddlewareFunc) {\n\tg.middleware = append(g.middleware, middleware...)\n\tif len(g.middleware) == 0 {\n\t\treturn\n\t}\n\t// group level middlewares are different from Echo `Pre` and `Use` middlewares (those are global). Group level middlewares\n\t// are only executed if they are added to the Router with route.\n\t// So we register catch all route (404 is a safe way to emulate route match) for this group and now during routing the\n\t// Router would find route to match our request path and therefore guarantee the middleware(s) will get executed.\n\tg.RouteNotFound(\"\", NotFoundHandler)\n\tg.RouteNotFound(\"/*\", NotFoundHandler)\n}",
      "function_comment": "// Use implements `Echo#Use()` for sub-routes within the Group.",
      "function_statement": "// Use implements `Echo#Use()` for sub-routes within the Group.",
      "start_line": 22,
      "end_line": 33,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) RouteNotFound(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(RouteNotFound, path, h, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "NotFoundHandler = func(c Context) error {\n\treturn ErrNotFound\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        22,
        23,
        24,
        25,
        26,
        31,
        32
      ],
      "cover_details": {
        "line_cover_rate": 0.5833333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:TrustPrivateNet",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLinkLocal"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLoopback"
        }
      ],
      "name": "TrustPrivateNet",
      "signature": "TrustPrivateNet (v bool) TrustOption",
      "ground_truth": "func TrustPrivateNet(v bool) TrustOption {\n\treturn func(c *ipChecker) {\n\t\tc.trustPrivateNet = v\n\t}\n}",
      "function_comment": "// TrustPrivateNet configures if you trust private network address (default: true).",
      "function_statement": "// TrustPrivateNet configures if you trust private network address (default: true).",
      "start_line": 161,
      "end_line": 165,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "ipChecker struct {\n\ttrustExtraRanges []*net.IPNet\n\ttrustLoopback    bool\n\ttrustLinkLocal   bool\n\ttrustPrivateNet  bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        161,
        162,
        163,
        164
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:floatValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        }
      ],
      "name": "floatValue",
      "signature": "(b *ValueBinder) floatValue (sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) floatValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.float(sourceParam, value, dest, bitSize)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 994,
      "end_line": 1008,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) float(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseFloat(value, bitSize)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to float%v\", bitSize), err))\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *float64:\n\t\t*d = n\n\tcase *float32:\n\t\t*d = float32(n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        994,
        995,
        996,
        997,
        999,
        1000,
        1001,
        1002,
        1003,
        1004,
        1007
      ],
      "cover_details": {
        "line_cover_rate": 0.7333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint32",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Uint32",
      "signature": "(b *ValueBinder) Uint32 (sourceParam string, dest *uint32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint32(sourceParam string, dest *uint32) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 32, false)\n}",
      "function_comment": "// Uint32 binds parameter to uint32 variable",
      "function_statement": "// Uint32 binds parameter to uint32 variable",
      "start_line": 682,
      "end_line": 684,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        682,
        683,
        684
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInts",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustInts",
      "signature": "(b *ValueBinder) MustInts (sourceParam string, dest *[]int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInts(sourceParam string, dest *[]int) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustInts requires parameter value to exist to bind to int slice variable. Returns error when value does not exist",
      "function_statement": "// MustInts requires parameter value to exist to bind to int slice variable. Returns error when value does not exist",
      "start_line": 667,
      "end_line": 669,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        667,
        668,
        669
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:IsWebSocket",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_IsWebSocket"
        }
      ],
      "name": "IsWebSocket",
      "signature": "(c *context) IsWebSocket () bool",
      "ground_truth": "func (c *context) IsWebSocket() bool {\n\tupgrade := c.request.Header.Get(HeaderUpgrade)\n\treturn strings.EqualFold(upgrade, \"websocket\")\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 270,
      "end_line": 273,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderUpgrade             = \"Upgrade\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func EqualFold(s, t string) bool {\n\t// ASCII fast path\n\ti := 0\n\tfor ; i \u003c len(s) \u0026\u0026 i \u003c len(t); i++ {\n\t\tsr := s[i]\n\t\ttr := t[i]\n\t\tif sr|tr \u003e= utf8.RuneSelf {\n\t\t\tgoto hasUnicode\n\t\t}\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// ASCII only, sr/tr must be upper/lower case\n\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\t// Check if we've exhausted both strings.\n\treturn len(s) == len(t)\n\nhasUnicode:\n\ts = s[i:]\n\tt = t[i:]\n\tfor _, sr := range s {\n\t\t// If t is exhausted the strings are not equal.\n\t\tif len(t) == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\t// Extract first rune from second string.\n\t\tvar tr rune\n\t\tif t[0] \u003c utf8.RuneSelf {\n\t\t\ttr, t = rune(t[0]), t[1:]\n\t\t} else {\n\t\t\tr, size := utf8.DecodeRuneInString(t)\n\t\t\ttr, t = r, t[size:]\n\t\t}\n\n\t\t// If they match, keep going; if not, return false.\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// Fast check for ASCII.\n\t\tif tr \u003c utf8.RuneSelf {\n\t\t\t// ASCII only, sr/tr must be upper/lower case\n\t\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\n\t\t// General case. SimpleFold(x) returns the next equivalent rune \u003e x\n\t\t// or wraps around to smaller values.\n\t\tr := unicode.SimpleFold(sr)\n\t\tfor r != sr \u0026\u0026 r \u003c tr {\n\t\t\tr = unicode.SimpleFold(r)\n\t\t}\n\t\tif r == tr {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\n\t// First string is empty, so check if the second one is also empty.\n\treturn len(t) == 0\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        270,
        271,
        272,
        273
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/context_timeout.go:ToMiddleware",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutCanHandleContextDeadlineOnNextHandler"
        }
      ],
      "name": "ToMiddleware",
      "signature": "(config ContextTimeoutConfig) ToMiddleware () (echo.MiddlewareFunc, error)",
      "ground_truth": "func (config ContextTimeoutConfig) ToMiddleware() (echo.MiddlewareFunc, error) {\n\tif config.Timeout == 0 {\n\t\treturn nil, errors.New(\"timeout must be set\")\n\t}\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultSkipper\n\t}\n\tif config.ErrorHandler == nil {\n\t\tconfig.ErrorHandler = func(err error, c echo.Context) error {\n\t\t\tif err != nil \u0026\u0026 errors.Is(err, context.DeadlineExceeded) {\n\t\t\t\treturn echo.ErrServiceUnavailable.WithInternal(err)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\ttimeoutContext, cancel := context.WithTimeout(c.Request().Context(), config.Timeout)\n\t\t\tdefer cancel()\n\n\t\t\tc.SetRequest(c.Request().WithContext(timeoutContext))\n\n\t\t\tif err := next(c); err != nil {\n\t\t\t\treturn config.ErrorHandler(err, c)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}, nil\n}",
      "function_comment": "// ToMiddleware converts Config to middleware.",
      "function_statement": "// ToMiddleware converts Config to middleware.",
      "start_line": 42,
      "end_line": 75,
      "file_path": "./middleware/context_timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/context_timeout.go",
          "code_snippet": "ContextTimeoutConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// ErrorHandler is a function when error arises in middleware execution.\n\tErrorHandler func(err error, c echo.Context) error\n\n\t// Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n\tTimeout time.Duration\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func DefaultSkipper(echo.Context) bool {\n\treturn false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) WithInternal(err error) *HTTPError {\n\treturn \u0026HTTPError{\n\t\tCode:     he.Code,\n\t\tMessage:  he.Message,\n\t\tInternal: err,\n\t}\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrServiceUnavailable            = NewHTTPError(http.StatusServiceUnavailable)",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/wrap.go",
          "code_snippet": "func Is(err, target error) bool {\n\tif err == nil || target == nil {\n\t\treturn err == target\n\t}\n\n\tisComparable := reflectlite.TypeOf(target).Comparable()\n\treturn is(err, target, isComparable)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "DeadlineExceeded error = deadlineExceededError{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n\treturn WithDeadline(parent, time.Now().Add(timeout))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Context() context.Context {\n\tif r.ctx != nil {\n\t\treturn r.ctx\n\t}\n\treturn context.Background()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) WithContext(ctx context.Context) *Request {\n\tif ctx == nil {\n\t\tpanic(\"nil context\")\n\t}\n\tr2 := new(Request)\n\t*r2 = *r\n\tr2.ctx = ctx\n\treturn r2\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        58,
        59,
        60,
        61,
        62,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72
      ],
      "cover_details": {
        "line_cover_rate": 0.7941176470588235
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:Write",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "Write",
      "signature": "(w *ignorableWriter) Write (b []byte) (int, error)",
      "ground_truth": "func (w *ignorableWriter) Write(b []byte) (int, error) {\n\tw.lock.Lock()\n\tdefer w.lock.Unlock()\n\tif w.ignoreWrites {\n\t\treturn len(b), nil\n\t}\n\treturn w.ResponseWriter.Write(b)\n}",
      "function_comment": "// ignorableWriter is ResponseWriter implementations that allows us to mark writer to ignore further write calls. This\n// is handy in cases when you do not have direct control of code being executed (3rd party middleware) but want to make\n// sure that external code will not be able to write response to the client.",
      "function_statement": "// ignorableWriter is ResponseWriter implementations that allows us to mark writer to ignore further write calls. This\n// is handy in cases when you do not have direct control of code being executed (3rd party middleware) but want to make\n// sure that external code will not be able to write response to the client.",
      "start_line": 214,
      "end_line": 221,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "ignorableWriter struct {\n\thttp.ResponseWriter\n\n\tlock         sync.Mutex\n\tignoreWrites bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        214,
        215,
        216,
        217,
        218,
        219,
        220
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/request_logger.go:ToMiddleware",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig_missingOnLogValuesPanics"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_beforeNextFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_LogValuesFuncError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_ID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_logError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_headerIsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_HandleError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_allFields"
        }
      ],
      "name": "ToMiddleware",
      "signature": "(config RequestLoggerConfig) ToMiddleware () (echo.MiddlewareFunc, error)",
      "ground_truth": "func (config RequestLoggerConfig) ToMiddleware() (echo.MiddlewareFunc, error) {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultSkipper\n\t}\n\tnow := time.Now\n\tif config.timeNow != nil {\n\t\tnow = config.timeNow\n\t}\n\n\tif config.LogValuesFunc == nil {\n\t\treturn nil, errors.New(\"missing LogValuesFunc callback function for request logger middleware\")\n\t}\n\n\tlogHeaders := len(config.LogHeaders) \u003e 0\n\theaders := append([]string(nil), config.LogHeaders...)\n\tfor i, v := range headers {\n\t\theaders[i] = http.CanonicalHeaderKey(v)\n\t}\n\n\tlogQueryParams := len(config.LogQueryParams) \u003e 0\n\tlogFormValues := len(config.LogFormValues) \u003e 0\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\tstart := now()\n\n\t\t\tif config.BeforeNextFunc != nil {\n\t\t\t\tconfig.BeforeNextFunc(c)\n\t\t\t}\n\t\t\terr := next(c)\n\t\t\tif err != nil \u0026\u0026 config.HandleError {\n\t\t\t\tc.Error(err)\n\t\t\t}\n\n\t\t\tv := RequestLoggerValues{\n\t\t\t\tStartTime: start,\n\t\t\t}\n\t\t\tif config.LogLatency {\n\t\t\t\tv.Latency = now().Sub(start)\n\t\t\t}\n\t\t\tif config.LogProtocol {\n\t\t\t\tv.Protocol = req.Proto\n\t\t\t}\n\t\t\tif config.LogRemoteIP {\n\t\t\t\tv.RemoteIP = c.RealIP()\n\t\t\t}\n\t\t\tif config.LogHost {\n\t\t\t\tv.Host = req.Host\n\t\t\t}\n\t\t\tif config.LogMethod {\n\t\t\t\tv.Method = req.Method\n\t\t\t}\n\t\t\tif config.LogURI {\n\t\t\t\tv.URI = req.RequestURI\n\t\t\t}\n\t\t\tif config.LogURIPath {\n\t\t\t\tp := req.URL.Path\n\t\t\t\tif p == \"\" {\n\t\t\t\t\tp = \"/\"\n\t\t\t\t}\n\t\t\t\tv.URIPath = p\n\t\t\t}\n\t\t\tif config.LogRoutePath {\n\t\t\t\tv.RoutePath = c.Path()\n\t\t\t}\n\t\t\tif config.LogRequestID {\n\t\t\t\tid := req.Header.Get(echo.HeaderXRequestID)\n\t\t\t\tif id == \"\" {\n\t\t\t\t\tid = res.Header().Get(echo.HeaderXRequestID)\n\t\t\t\t}\n\t\t\t\tv.RequestID = id\n\t\t\t}\n\t\t\tif config.LogReferer {\n\t\t\t\tv.Referer = req.Referer()\n\t\t\t}\n\t\t\tif config.LogUserAgent {\n\t\t\t\tv.UserAgent = req.UserAgent()\n\t\t\t}\n\t\t\tif config.LogStatus {\n\t\t\t\tv.Status = res.Status\n\t\t\t\tif err != nil \u0026\u0026 !config.HandleError {\n\t\t\t\t\t//  this block should not be executed in case of HandleError=true as the global error handler will decide\n\t\t\t\t\t//  the status code. In that case status code could be different from what err contains.\n\t\t\t\t\tvar httpErr *echo.HTTPError\n\t\t\t\t\tif errors.As(err, \u0026httpErr) {\n\t\t\t\t\t\tv.Status = httpErr.Code\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif config.LogError \u0026\u0026 err != nil {\n\t\t\t\tv.Error = err\n\t\t\t}\n\t\t\tif config.LogContentLength {\n\t\t\t\tv.ContentLength = req.Header.Get(echo.HeaderContentLength)\n\t\t\t}\n\t\t\tif config.LogResponseSize {\n\t\t\t\tv.ResponseSize = res.Size\n\t\t\t}\n\t\t\tif logHeaders {\n\t\t\t\tv.Headers = map[string][]string{}\n\t\t\t\tfor _, header := range headers {\n\t\t\t\t\tif values, ok := req.Header[header]; ok {\n\t\t\t\t\t\tv.Headers[header] = values\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif logQueryParams {\n\t\t\t\tqueryParams := c.QueryParams()\n\t\t\t\tv.QueryParams = map[string][]string{}\n\t\t\t\tfor _, param := range config.LogQueryParams {\n\t\t\t\t\tif values, ok := queryParams[param]; ok {\n\t\t\t\t\t\tv.QueryParams[param] = values\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif logFormValues {\n\t\t\t\tv.FormValues = map[string][]string{}\n\t\t\t\tfor _, formValue := range config.LogFormValues {\n\t\t\t\t\tif values, ok := req.Form[formValue]; ok {\n\t\t\t\t\t\tv.FormValues[formValue] = values\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif errOnLog := config.LogValuesFunc(c, v); errOnLog != nil {\n\t\t\t\treturn errOnLog\n\t\t\t}\n\n\t\t\t// in case of HandleError=true we are returning the error that we already have handled with global error handler\n\t\t\t// this is deliberate as this error could be useful for upstream middlewares and default global error handler\n\t\t\t// will ignore that error when it bubbles up in middleware chain.\n\t\t\treturn err\n\t\t}\n\t}, nil\n}",
      "function_comment": "// ToMiddleware converts RequestLoggerConfig into middleware or returns an error for invalid configuration.",
      "function_statement": "// ToMiddleware converts RequestLoggerConfig into middleware or returns an error for invalid configuration.",
      "start_line": 251,
      "end_line": 391,
      "file_path": "./middleware/request_logger.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_logger.go",
          "code_snippet": "RequestLoggerConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// BeforeNextFunc defines a function that is called before next middleware or handler is called in chain.\n\tBeforeNextFunc func(c echo.Context)\n\t// LogValuesFunc defines a function that is called with values extracted by logger from request/response.\n\t// Mandatory.\n\tLogValuesFunc func(c echo.Context, v RequestLoggerValues) error\n\n\t// HandleError instructs logger to call global error handler when next middleware/handler returns an error.\n\t// This is useful when you have custom error handler that can decide to use different status codes.\n\t//\n\t// A side-effect of calling global error handler is that now Response has been committed and sent to the client\n\t// and middlewares up in chain can not change Response status code or response body.\n\tHandleError bool\n\n\t// LogLatency instructs logger to record duration it took to execute rest of the handler chain (next(c) call).\n\tLogLatency bool\n\t// LogProtocol instructs logger to extract request protocol (i.e. `HTTP/1.1` or `HTTP/2`)\n\tLogProtocol bool\n\t// LogRemoteIP instructs logger to extract request remote IP. See `echo.Context.RealIP()` for implementation details.\n\tLogRemoteIP bool\n\t// LogHost instructs logger to extract request host value (i.e. `example.com`)\n\tLogHost bool\n\t// LogMethod instructs logger to extract request method value (i.e. `GET` etc)\n\tLogMethod bool\n\t// LogURI instructs logger to extract request URI (i.e. `/list?lang=en\u0026page=1`)\n\tLogURI bool\n\t// LogURIPath instructs logger to extract request URI path part (i.e. `/list`)\n\tLogURIPath bool\n\t// LogRoutePath instructs logger to extract route path part to which request was matched to (i.e. `/user/:id`)\n\tLogRoutePath bool\n\t// LogRequestID instructs logger to extract request ID from request `X-Request-ID` header or response if request did not have value.\n\tLogRequestID bool\n\t// LogReferer instructs logger to extract request referer values.\n\tLogReferer bool\n\t// LogUserAgent instructs logger to extract request user agent values.\n\tLogUserAgent bool\n\t// LogStatus instructs logger to extract response status code. If handler chain returns an echo.HTTPError,\n\t// the status code is extracted from the echo.HTTPError returned\n\tLogStatus bool\n\t// LogError instructs logger to extract error returned from executed handler chain.\n\tLogError bool\n\t// LogContentLength instructs logger to extract content length header value. Note: this value could be different from\n\t// actual request body size as it could be spoofed etc.\n\tLogContentLength bool\n\t// LogResponseSize instructs logger to extract response content length value. Note: when used with Gzip middleware\n\t// this value may not be always correct.\n\tLogResponseSize bool\n\t// LogHeaders instructs logger to extract given list of headers from request. Note: request can contain more than\n\t// one header with same value so slice of values is been logger for each given header.\n\t//\n\t// Note: header values are converted to canonical form with http.CanonicalHeaderKey as this how request parser converts header\n\t// names to. For example, the canonical key for \"accept-encoding\" is \"Accept-Encoding\".\n\tLogHeaders []string\n\t// LogQueryParams instructs logger to extract given list of query parameters from request URI. Note: request can\n\t// contain more than one query parameter with same name so slice of values is been logger for each given query param name.\n\tLogQueryParams []string\n\t// LogFormValues instructs logger to extract given list of form values from request body+URI. Note: request can\n\t// contain more than one form value with same name so slice of values is been logger for each given form value name.\n\tLogFormValues []string\n\n\ttimeNow func() time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func DefaultSkipper(echo.Context) bool {\n\treturn false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_logger.go",
          "code_snippet": "RequestLoggerValues struct {\n\t// StartTime is time recorded before next middleware/handler is executed.\n\tStartTime time.Time\n\t// Latency is duration it took to execute rest of the handler chain (next(c) call).\n\tLatency time.Duration\n\t// Protocol is request protocol (i.e. `HTTP/1.1` or `HTTP/2`)\n\tProtocol string\n\t// RemoteIP is request remote IP. See `echo.Context.RealIP()` for implementation details.\n\tRemoteIP string\n\t// Host is request host value (i.e. `example.com`)\n\tHost string\n\t// Method is request method value (i.e. `GET` etc)\n\tMethod string\n\t// URI is request URI (i.e. `/list?lang=en\u0026page=1`)\n\tURI string\n\t// URIPath is request URI path part (i.e. `/list`)\n\tURIPath string\n\t// RoutePath is route path part to which request was matched to (i.e. `/user/:id`)\n\tRoutePath string\n\t// RequestID is request ID from request `X-Request-ID` header or response if request did not have value.\n\tRequestID string\n\t// Referer is request referer values.\n\tReferer string\n\t// UserAgent is request user agent values.\n\tUserAgent string\n\t// Status is response status code. Then handler returns an echo.HTTPError then code from there.\n\tStatus int\n\t// Error is error returned from executed handler chain.\n\tError error\n\t// ContentLength is content length header value. Note: this value could be different from actual request body size\n\t// as it could be spoofed etc.\n\tContentLength string\n\t// ResponseSize is response content length value. Note: when used with Gzip middleware this value may not be always correct.\n\tResponseSize int64\n\t// Headers are list of headers from request. Note: request can contain more than one header with same value so slice\n\t// of values is been logger for each given header.\n\t// Note: header values are converted to canonical form with http.CanonicalHeaderKey as this how request parser converts header\n\t// names to. For example, the canonical key for \"accept-encoding\" is \"Accept-Encoding\".\n\tHeaders map[string][]string\n\t// QueryParams are list of query parameters from request URI. Note: request can contain more than one query parameter\n\t// with same name so slice of values is been logger for each given query param name.\n\tQueryParams map[string][]string\n\t// FormValues are list of form values from request body+URI. Note: request can contain more than one form value with\n\t// same name so slice of values is been logger for each given form value name.\n\tFormValues map[string][]string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXRequestID          = \"X-Request-Id\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentLength       = \"Content-Length\"",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := now()\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func CanonicalHeaderKey(s string) string { return textproto.CanonicalMIMEHeaderKey(s) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Sub(u Time) Duration {\n\tif t.wall\u0026u.wall\u0026hasMonotonic != 0 {\n\t\treturn subMono(t.ext, u.ext)\n\t}\n\td := Duration(t.sec()-u.sec())*Second + Duration(t.nsec()-u.nsec())\n\t// Check for overflow or underflow.\n\tswitch {\n\tcase u.Add(d).Equal(t):\n\t\treturn d // d is correct\n\tcase t.Before(u):\n\t\treturn minDuration // t - u is negative out of range\n\tdefault:\n\t\treturn maxDuration // t - u is positive out of range\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Referer() string {\n\treturn r.Header.Get(\"Referer\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) UserAgent() string {\n\treturn r.Header.Get(\"User-Agent\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/wrap.go",
          "code_snippet": "func As(err error, target any) bool {\n\tif err == nil {\n\t\treturn false\n\t}\n\tif target == nil {\n\t\tpanic(\"errors: target cannot be nil\")\n\t}\n\tval := reflectlite.ValueOf(target)\n\ttyp := val.Type()\n\tif typ.Kind() != reflectlite.Ptr || val.IsNil() {\n\t\tpanic(\"errors: target must be a non-nil pointer\")\n\t}\n\ttargetType := typ.Elem()\n\tif targetType.Kind() != reflectlite.Interface \u0026\u0026 !targetType.Implements(errorType) {\n\t\tpanic(\"errors: *target must be interface or implement error\")\n\t}\n\treturn as(err, target, val, targetType)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        260,
        261,
        262,
        264,
        265,
        266,
        267,
        268,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        317,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        372,
        373,
        374,
        375,
        376,
        377,
        381,
        382,
        383,
        388
      ],
      "cover_details": {
        "line_cover_rate": 0.8226950354609929
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt64s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustInt64s",
      "signature": "(b *ValueBinder) MustInt64s (sourceParam string, dest *[]int64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt64s(sourceParam string, dest *[]int64) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustInt64s requires parameter value to exist to bind to int64 slice variable. Returns error when value does not exist",
      "function_statement": "// MustInt64s requires parameter value to exist to bind to int64 slice variable. Returns error when value does not exist",
      "start_line": 627,
      "end_line": 629,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        627,
        628,
        629
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint8",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustUint8",
      "signature": "(b *ValueBinder) MustUint8 (sourceParam string, dest *uint8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint8(sourceParam string, dest *uint8) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 8, true)\n}",
      "function_comment": "// MustUint8 requires parameter value to exist to bind to uint8 variable. Returns error when value does not exist",
      "function_statement": "// MustUint8 requires parameter value to exist to bind to uint8 variable. Returns error when value does not exist",
      "start_line": 707,
      "end_line": 709,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        707,
        708,
        709
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:xml",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        }
      ],
      "name": "xml",
      "signature": "(c *context) xml (code int, i any, indent string) (err error)",
      "ground_truth": "func (c *context) xml(code int, i any, indent string) (err error) {\n\tc.writeContentType(MIMEApplicationXMLCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tenc := xml.NewEncoder(c.response)\n\tif indent != \"\" {\n\t\tenc.Indent(\"\", indent)\n\t}\n\tif _, err = c.response.Write([]byte(xml.Header)); err != nil {\n\t\treturn\n\t}\n\treturn enc.Encode(i)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 541,
      "end_line": 552,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationXMLCharsetUTF8        = MIMEApplicationXML + \"; \" + charsetUTF8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Write(b []byte) (n int, err error) {\n\tif !r.Committed {\n\t\tif r.Status == 0 {\n\t\t\tr.Status = http.StatusOK\n\t\t}\n\t\tr.WriteHeader(r.Status)\n\t}\n\tn, err = r.Writer.Write(b)\n\tr.Size += int64(n)\n\tfor _, fn := range r.afterFuncs {\n\t\tfn()\n\t}\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "func NewEncoder(w io.Writer) *Encoder {\n\te := \u0026Encoder{printer{w: bufio.NewWriter(w)}}\n\te.p.encoder = e\n\treturn e\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "func (enc *Encoder) Indent(prefix, indent string) {\n\tenc.p.prefix = prefix\n\tenc.p.indent = indent\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "Header = `\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e` + \"\\n\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "func (enc *Encoder) Encode(v any) error {\n\terr := enc.p.marshalValue(reflect.ValueOf(v), nil, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn enc.p.w.Flush()\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        541,
        542,
        543,
        544,
        545,
        546,
        547,
        548,
        549,
        550,
        551
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:Flush",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        }
      ],
      "name": "Flush",
      "signature": "(w *gzipResponseWriter) Flush ()",
      "ground_truth": "func (w *gzipResponseWriter) Flush() {\n\tif !w.minLengthExceeded {\n\t\t// Enforce compression because we will not know how much more data will come\n\t\tw.minLengthExceeded = true\n\t\tw.Header().Set(echo.HeaderContentEncoding, gzipScheme) // Issue #806\n\t\tif w.wroteHeader {\n\t\t\tw.ResponseWriter.WriteHeader(w.code)\n\t\t}\n\n\t\tw.Writer.Write(w.buffer.Bytes())\n\t}\n\n\tw.Writer.(*gzip.Writer).Flush()\n\t_ = http.NewResponseController(w.ResponseWriter).Flush()\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 180,
      "end_line": 194,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n\twroteHeader       bool\n\twroteBody         bool\n\tminLength         int\n\tminLengthExceeded bool\n\tbuffer            *bytes.Buffer\n\tcode              int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentEncoding     = \"Content-Encoding\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipScheme = \"gzip\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gzip.go",
          "code_snippet": "func (z *Writer) Flush() error {\n\tif z.err != nil {\n\t\treturn z.err\n\t}\n\tif z.closed {\n\t\treturn nil\n\t}\n\tif !z.wroteHeader {\n\t\tz.Write(nil)\n\t\tif z.err != nil {\n\t\t\treturn z.err\n\t\t}\n\t}\n\tz.err = z.compressor.Flush()\n\treturn z.err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gzip.go",
          "code_snippet": "Writer struct {\n\tHeader      // written at first call to Write, Flush, or Close\n\tw           io.Writer\n\tlevel       int\n\twroteHeader bool\n\tclosed      bool\n\tbuf         [10]byte\n\tcompressor  *flate.Writer\n\tdigest      uint32 // CRC-32, IEEE polynomial (section 8)\n\tsize        uint32 // Uncompressed size (section 2.3.1)\n\terr         error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func (c *ResponseController) Flush() error {\n\trw := c.rw\n\tfor {\n\t\tswitch t := rw.(type) {\n\t\tcase interface{ FlushError() error }:\n\t\t\treturn t.FlushError()\n\t\tcase Flusher:\n\t\t\tt.Flush()\n\t\t\treturn nil\n\t\tcase rwUnwrapper:\n\t\t\trw = t.Unwrap()\n\t\tdefault:\n\t\t\treturn errNotSupported()\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func NewResponseController(rw ResponseWriter) *ResponseController {\n\treturn \u0026ResponseController{rw}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        189,
        192,
        193
      ],
      "cover_details": {
        "line_cover_rate": 0.7333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustFloat32s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        }
      ],
      "name": "MustFloat32s",
      "signature": "(b *ValueBinder) MustFloat32s (sourceParam string, dest *[]float32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustFloat32s(sourceParam string, dest *[]float32) *ValueBinder {\n\treturn b.floatsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustFloat32s requires parameter values to exist to bind to slice of float32 variables. Returns error when values does not exist",
      "function_statement": "// MustFloat32s requires parameter values to exist to bind to slice of float32 variables. Returns error when values does not exist",
      "start_line": 1085,
      "end_line": 1087,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.floats(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1085,
        1086,
        1087
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt32",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustInt32",
      "signature": "(b *ValueBinder) MustInt32 (sourceParam string, dest *int32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt32(sourceParam string, dest *int32) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 32, true)\n}",
      "function_comment": "// MustInt32 requires parameter value to exist to bind to int32 variable. Returns error when value does not exist",
      "function_statement": "// MustInt32 requires parameter value to exist to bind to int32 variable. Returns error when value does not exist",
      "start_line": 469,
      "end_line": 471,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        469,
        470,
        471
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:HTMLBlob",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        }
      ],
      "name": "HTMLBlob",
      "signature": "(c *context) HTMLBlob (code int, b []byte) (err error)",
      "ground_truth": "func (c *context) HTMLBlob(code int, b []byte) (err error) {\n\treturn c.Blob(code, MIMETextHTMLCharsetUTF8, b)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 475,
      "end_line": 477,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Blob(code int, contentType string, b []byte) (err error) {\n\tc.writeContentType(contentType)\n\tc.response.WriteHeader(code)\n\t_, err = c.response.Write(b)\n\treturn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMETextHTMLCharsetUTF8              = MIMETextHTML + \"; \" + charsetUTF8",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        475,
        476,
        477
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:Timeout",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithTimeout0"
        }
      ],
      "name": "Timeout",
      "signature": "Timeout () echo.MiddlewareFunc",
      "ground_truth": "func Timeout() echo.MiddlewareFunc {\n\treturn TimeoutWithConfig(DefaultTimeoutConfig)\n}",
      "function_comment": "// Timeout returns a middleware which returns error (503 Service Unavailable error) to client immediately when handler\n// call runs for longer than its time limit. NB: timeout does not stop handler execution.",
      "function_statement": "// Timeout returns a middleware which returns error (503 Service Unavailable error) to client immediately when handler\n// call runs for longer than its time limit. NB: timeout does not stop handler execution.",
      "start_line": 92,
      "end_line": 94,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "func TimeoutWithConfig(config TimeoutConfig) echo.MiddlewareFunc {\n\tmw, err := config.ToMiddleware()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn mw\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "DefaultTimeoutConfig = TimeoutConfig{\n\tSkipper:      DefaultSkipper,\n\tTimeout:      0,\n\tErrorMessage: \"\",\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:StartTLS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        }
      ],
      "name": "StartTLS",
      "signature": "(e *Echo) StartTLS (address string, certFile, keyFile interface{}) (err error)",
      "ground_truth": "func (e *Echo) StartTLS(address string, certFile, keyFile interface{}) (err error) {\n\te.startupMutex.Lock()\n\tvar cert []byte\n\tif cert, err = filepathOrContent(certFile); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn\n\t}\n\n\tvar key []byte\n\tif key, err = filepathOrContent(keyFile); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn\n\t}\n\n\ts := e.TLSServer\n\ts.TLSConfig = new(tls.Config)\n\ts.TLSConfig.Certificates = make([]tls.Certificate, 1)\n\tif s.TLSConfig.Certificates[0], err = tls.X509KeyPair(cert, key); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn\n\t}\n\n\te.configureTLS(address)\n\tif err := e.configureServer(s); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn err\n\t}\n\te.startupMutex.Unlock()\n\treturn s.Serve(e.TLSListener)\n}",
      "function_comment": "// StartTLS starts an HTTPS server.\n// If `certFile` or `keyFile` is `string` the values are treated as file paths.\n// If `certFile` or `keyFile` is `[]byte` the values are treated as the certificate or key as-is.",
      "function_statement": "// StartTLS starts an HTTPS server.\n// If `certFile` or `keyFile` is `string` the values are treated as file paths.\n// If `certFile` or `keyFile` is `[]byte` the values are treated as the certificate or key as-is.",
      "start_line": 691,
      "end_line": 720,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func filepathOrContent(fileOrContent interface{}) (content []byte, err error) {\n\tswitch v := fileOrContent.(type) {\n\tcase string:\n\t\treturn os.ReadFile(v)\n\tcase []byte:\n\t\treturn v, nil\n\tdefault:\n\t\treturn nil, ErrInvalidCertOrKeyType\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) configureTLS(address string) {\n\ts := e.TLSServer\n\ts.Addr = address\n\tif !e.DisableHTTP2 {\n\t\ts.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, \"h2\")\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) configureServer(s *http.Server) error {\n\t// Setup\n\te.colorer.SetOutput(e.Logger.Output())\n\ts.ErrorLog = e.StdLogger\n\ts.Handler = e\n\tif e.Debug {\n\t\te.Logger.SetLevel(log.DEBUG)\n\t}\n\n\tif !e.HideBanner {\n\t\te.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n\t}\n\n\tif s.TLSConfig == nil {\n\t\tif e.Listener == nil {\n\t\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\te.Listener = l\n\t\t}\n\t\tif !e.HidePort {\n\t\t\te.colorer.Printf(\"⇨ http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n\t\t}\n\t\treturn nil\n\t}\n\tif e.TLSListener == nil {\n\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.TLSListener = tls.NewListener(l, s.TLSConfig)\n\t}\n\tif !e.HidePort {\n\t\te.colorer.Printf(\"⇨ https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/common.go",
          "code_snippet": "Config struct {\n\t// Rand provides the source of entropy for nonces and RSA blinding.\n\t// If Rand is nil, TLS uses the cryptographic random reader in package\n\t// crypto/rand.\n\t// The Reader must be safe for use by multiple goroutines.\n\tRand io.Reader\n\n\t// Time returns the current time as the number of seconds since the epoch.\n\t// If Time is nil, TLS uses time.Now.\n\tTime func() time.Time\n\n\t// Certificates contains one or more certificate chains to present to the\n\t// other side of the connection. The first certificate compatible with the\n\t// peer's requirements is selected automatically.\n\t//\n\t// Server configurations must set one of Certificates, GetCertificate or\n\t// GetConfigForClient. Clients doing client-authentication may set either\n\t// Certificates or GetClientCertificate.\n\t//\n\t// Note: if there are multiple Certificates, and they don't have the\n\t// optional field Leaf set, certificate selection will incur a significant\n\t// per-handshake performance cost.\n\tCertificates []Certificate\n\n\t// NameToCertificate maps from a certificate name to an element of\n\t// Certificates. Note that a certificate name can be of the form\n\t// '*.example.com' and so doesn't have to be a domain name as such.\n\t//\n\t// Deprecated: NameToCertificate only allows associating a single\n\t// certificate with a given name. Leave this field nil to let the library\n\t// select the first compatible chain from Certificates.\n\tNameToCertificate map[string]*Certificate\n\n\t// GetCertificate returns a Certificate based on the given\n\t// ClientHelloInfo. It will only be called if the client supplies SNI\n\t// information or if Certificates is empty.\n\t//\n\t// If GetCertificate is nil or returns nil, then the certificate is\n\t// retrieved from NameToCertificate. If NameToCertificate is nil, the\n\t// best element of Certificates will be used.\n\t//\n\t// Once a Certificate is returned it should not be modified.\n\tGetCertificate func(*ClientHelloInfo) (*Certificate, error)\n\n\t// GetClientCertificate, if not nil, is called when a server requests a\n\t// certificate from a client. If set, the contents of Certificates will\n\t// be ignored.\n\t//\n\t// If GetClientCertificate returns an error, the handshake will be\n\t// aborted and that error will be returned. Otherwise\n\t// GetClientCertificate must return a non-nil Certificate. If\n\t// Certificate.Certificate is empty then no certificate will be sent to\n\t// the server. If this is unacceptable to the server then it may abort\n\t// the handshake.\n\t//\n\t// GetClientCertificate may be called multiple times for the same\n\t// connection if renegotiation occurs or if TLS 1.3 is in use.\n\t//\n\t// Once a Certificate is returned it should not be modified.\n\tGetClientCertificate func(*CertificateRequestInfo) (*Certificate, error)\n\n\t// GetConfigForClient, if not nil, is called after a ClientHello is\n\t// received from a client. It may return a non-nil Config in order to\n\t// change the Config that will be used to handle this connection. If\n\t// the returned Config is nil, the original Config will be used. The\n\t// Config returned by this callback may not be subsequently modified.\n\t//\n\t// If GetConfigForClient is nil, the Config passed to Server() will be\n\t// used for all connections.\n\t//\n\t// If SessionTicketKey was explicitly set on the returned Config, or if\n\t// SetSessionTicketKeys was called on the returned Config, those keys will\n\t// be used. Otherwise, the original Config keys will be used (and possibly\n\t// rotated if they are automatically managed).\n\tGetConfigForClient func(*ClientHelloInfo) (*Config, error)\n\n\t// VerifyPeerCertificate, if not nil, is called after normal\n\t// certificate verification by either a TLS client or server. It\n\t// receives the raw ASN.1 certificates provided by the peer and also\n\t// any verified chains that normal processing found. If it returns a\n\t// non-nil error, the handshake is aborted and that error results.\n\t//\n\t// If normal verification fails then the handshake will abort before\n\t// considering this callback. If normal verification is disabled (on the\n\t// client when InsecureSkipVerify is set, or on a server when ClientAuth is\n\t// RequestClientCert or RequireAnyClientCert), then this callback will be\n\t// considered but the verifiedChains argument will always be nil. When\n\t// ClientAuth is NoClientCert, this callback is not called on the server.\n\t// rawCerts may be empty on the server if ClientAuth is RequestClientCert or\n\t// VerifyClientCertIfGiven.\n\t//\n\t// This callback is not invoked on resumed connections, as certificates are\n\t// not re-verified on resumption.\n\t//\n\t// verifiedChains and its contents should not be modified.\n\tVerifyPeerCertificate func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error\n\n\t// VerifyConnection, if not nil, is called after normal certificate\n\t// verification and after VerifyPeerCertificate by either a TLS client\n\t// or server. If it returns a non-nil error, the handshake is aborted\n\t// and that error results.\n\t//\n\t// If normal verification fails then the handshake will abort before\n\t// considering this callback. This callback will run for all connections,\n\t// including resumptions, regardless of InsecureSkipVerify or ClientAuth\n\t// settings.\n\tVerifyConnection func(ConnectionState) error\n\n\t// RootCAs defines the set of root certificate authorities\n\t// that clients use when verifying server certificates.\n\t// If RootCAs is nil, TLS uses the host's root CA set.\n\tRootCAs *x509.CertPool\n\n\t// NextProtos is a list of supported application level protocols, in\n\t// order of preference. If both peers support ALPN, the selected\n\t// protocol will be one from this list, and the connection will fail\n\t// if there is no mutually supported protocol. If NextProtos is empty\n\t// or the peer doesn't support ALPN, the connection will succeed and\n\t// ConnectionState.NegotiatedProtocol will be empty.\n\tNextProtos []string\n\n\t// ServerName is used to verify the hostname on the returned\n\t// certificates unless InsecureSkipVerify is given. It is also included\n\t// in the client's handshake to support virtual hosting unless it is\n\t// an IP address.\n\tServerName string\n\n\t// ClientAuth determines the server's policy for\n\t// TLS Client Authentication. The default is NoClientCert.\n\tClientAuth ClientAuthType\n\n\t// ClientCAs defines the set of root certificate authorities\n\t// that servers use if required to verify a client certificate\n\t// by the policy in ClientAuth.\n\tClientCAs *x509.CertPool\n\n\t// InsecureSkipVerify controls whether a client verifies the server's\n\t// certificate chain and host name. If InsecureSkipVerify is true, crypto/tls\n\t// accepts any certificate presented by the server and any host name in that\n\t// certificate. In this mode, TLS is susceptible to machine-in-the-middle\n\t// attacks unless custom verification is used. This should be used only for\n\t// testing or in combination with VerifyConnection or VerifyPeerCertificate.\n\tInsecureSkipVerify bool\n\n\t// CipherSuites is a list of enabled TLS 1.0–1.2 cipher suites. The order of\n\t// the list is ignored. Note that TLS 1.3 ciphersuites are not configurable.\n\t//\n\t// If CipherSuites is nil, a safe default list is used. The default cipher\n\t// suites might change over time. In Go 1.22 RSA key exchange based cipher\n\t// suites were removed from the default list, but can be re-added with the\n\t// GODEBUG setting tlsrsakex=1. In Go 1.23 3DES cipher suites were removed\n\t// from the default list, but can be re-added with the GODEBUG setting\n\t// tls3des=1.\n\tCipherSuites []uint16\n\n\t// PreferServerCipherSuites is a legacy field and has no effect.\n\t//\n\t// It used to control whether the server would follow the client's or the\n\t// server's preference. Servers now select the best mutually supported\n\t// cipher suite based on logic that takes into account inferred client\n\t// hardware, server hardware, and security.\n\t//\n\t// Deprecated: PreferServerCipherSuites is ignored.\n\tPreferServerCipherSuites bool\n\n\t// SessionTicketsDisabled may be set to true to disable session ticket and\n\t// PSK (resumption) support. Note that on clients, session ticket support is\n\t// also disabled if ClientSessionCache is nil.\n\tSessionTicketsDisabled bool\n\n\t// SessionTicketKey is used by TLS servers to provide session resumption.\n\t// See RFC 5077 and the PSK mode of RFC 8446. If zero, it will be filled\n\t// with random data before the first server handshake.\n\t//\n\t// Deprecated: if this field is left at zero, session ticket keys will be\n\t// automatically rotated every day and dropped after seven days. For\n\t// customizing the rotation schedule or synchronizing servers that are\n\t// terminating connections for the same host, use SetSessionTicketKeys.\n\tSessionTicketKey [32]byte\n\n\t// ClientSessionCache is a cache of ClientSessionState entries for TLS\n\t// session resumption. It is only used by clients.\n\tClientSessionCache ClientSessionCache\n\n\t// UnwrapSession is called on the server to turn a ticket/identity\n\t// previously produced by [WrapSession] into a usable session.\n\t//\n\t// UnwrapSession will usually either decrypt a session state in the ticket\n\t// (for example with [Config.EncryptTicket]), or use the ticket as a handle\n\t// to recover a previously stored state. It must use [ParseSessionState] to\n\t// deserialize the session state.\n\t//\n\t// If UnwrapSession returns an error, the connection is terminated. If it\n\t// returns (nil, nil), the session is ignored. crypto/tls may still choose\n\t// not to resume the returned session.\n\tUnwrapSession func(identity []byte, cs ConnectionState) (*SessionState, error)\n\n\t// WrapSession is called on the server to produce a session ticket/identity.\n\t//\n\t// WrapSession must serialize the session state with [SessionState.Bytes].\n\t// It may then encrypt the serialized state (for example with\n\t// [Config.DecryptTicket]) and use it as the ticket, or store the state and\n\t// return a handle for it.\n\t//\n\t// If WrapSession returns an error, the connection is terminated.\n\t//\n\t// Warning: the return value will be exposed on the wire and to clients in\n\t// plaintext. The application is in charge of encrypting and authenticating\n\t// it (and rotating keys) or returning high-entropy identifiers. Failing to\n\t// do so correctly can compromise current, previous, and future connections\n\t// depending on the protocol version.\n\tWrapSession func(ConnectionState, *SessionState) ([]byte, error)\n\n\t// MinVersion contains the minimum TLS version that is acceptable.\n\t//\n\t// By default, TLS 1.2 is currently used as the minimum. TLS 1.0 is the\n\t// minimum supported by this package.\n\t//\n\t// The server-side default can be reverted to TLS 1.0 by including the value\n\t// \"tls10server=1\" in the GODEBUG environment variable.\n\tMinVersion uint16\n\n\t// MaxVersion contains the maximum TLS version that is acceptable.\n\t//\n\t// By default, the maximum version supported by this package is used,\n\t// which is currently TLS 1.3.\n\tMaxVersion uint16\n\n\t// CurvePreferences contains the elliptic curves that will be used in\n\t// an ECDHE handshake, in preference order. If empty, the default will\n\t// be used. The client will use the first preference as the type for\n\t// its key share in TLS 1.3. This may change in the future.\n\t//\n\t// From Go 1.23, the default includes the X25519Kyber768Draft00 hybrid\n\t// post-quantum key exchange. To disable it, set CurvePreferences explicitly\n\t// or use the GODEBUG=tlskyber=0 environment variable.\n\tCurvePreferences []CurveID\n\n\t// DynamicRecordSizingDisabled disables adaptive sizing of TLS records.\n\t// When true, the largest possible TLS record size is always used. When\n\t// false, the size of TLS records may be adjusted in an attempt to\n\t// improve latency.\n\tDynamicRecordSizingDisabled bool\n\n\t// Renegotiation controls what types of renegotiation are supported.\n\t// The default, none, is correct for the vast majority of applications.\n\tRenegotiation RenegotiationSupport\n\n\t// KeyLogWriter optionally specifies a destination for TLS master secrets\n\t// in NSS key log format that can be used to allow external programs\n\t// such as Wireshark to decrypt TLS connections.\n\t// See https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format.\n\t// Use of KeyLogWriter compromises security and should only be\n\t// used for debugging.\n\tKeyLogWriter io.Writer\n\n\t// EncryptedClientHelloConfigList is a serialized ECHConfigList. If\n\t// provided, clients will attempt to connect to servers using Encrypted\n\t// Client Hello (ECH) using one of the provided ECHConfigs. Servers\n\t// currently ignore this field.\n\t//\n\t// If the list contains no valid ECH configs, the handshake will fail\n\t// and return an error.\n\t//\n\t// If EncryptedClientHelloConfigList is set, MinVersion, if set, must\n\t// be VersionTLS13.\n\t//\n\t// When EncryptedClientHelloConfigList is set, the handshake will only\n\t// succeed if ECH is sucessfully negotiated. If the server rejects ECH,\n\t// an ECHRejectionError error will be returned, which may contain a new\n\t// ECHConfigList that the server suggests using.\n\t//\n\t// How this field is parsed may change in future Go versions, if the\n\t// encoding described in the final Encrypted Client Hello RFC changes.\n\tEncryptedClientHelloConfigList []byte\n\n\t// EncryptedClientHelloRejectionVerify, if not nil, is called when ECH is\n\t// rejected, in order to verify the ECH provider certificate in the outer\n\t// Client Hello. If it returns a non-nil error, the handshake is aborted and\n\t// that error results.\n\t//\n\t// Unlike VerifyPeerCertificate and VerifyConnection, normal certificate\n\t// verification will not be performed before calling\n\t// EncryptedClientHelloRejectionVerify.\n\t//\n\t// If EncryptedClientHelloRejectionVerify is nil and ECH is rejected, the\n\t// roots in RootCAs will be used to verify the ECH providers public\n\t// certificate. VerifyPeerCertificate and VerifyConnection are not called\n\t// when ECH is rejected, even if set, and InsecureSkipVerify is ignored.\n\tEncryptedClientHelloRejectionVerify func(ConnectionState) error\n\n\t// mutex protects sessionTicketKeys and autoSessionTicketKeys.\n\tmutex sync.RWMutex\n\t// sessionTicketKeys contains zero or more ticket keys. If set, it means\n\t// the keys were set with SessionTicketKey or SetSessionTicketKeys. The\n\t// first key is used for new tickets and any subsequent keys can be used to\n\t// decrypt old tickets. The slice contents are not protected by the mutex\n\t// and are immutable.\n\tsessionTicketKeys []ticketKey\n\t// autoSessionTicketKeys is like sessionTicketKeys but is owned by the\n\t// auto-rotation logic. See Config.ticketKeys.\n\tautoSessionTicketKeys []ticketKey\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/common.go",
          "code_snippet": "Certificate struct {\n\tCertificate [][]byte\n\t// PrivateKey contains the private key corresponding to the public key in\n\t// Leaf. This must implement crypto.Signer with an RSA, ECDSA or Ed25519 PublicKey.\n\t// For a server up to TLS 1.2, it can also implement crypto.Decrypter with\n\t// an RSA PublicKey.\n\tPrivateKey crypto.PrivateKey\n\t// SupportedSignatureAlgorithms is an optional list restricting what\n\t// signature algorithms the PrivateKey can be used for.\n\tSupportedSignatureAlgorithms []SignatureScheme\n\t// OCSPStaple contains an optional OCSP response which will be served\n\t// to clients that request it.\n\tOCSPStaple []byte\n\t// SignedCertificateTimestamps contains an optional list of Signed\n\t// Certificate Timestamps which will be served to clients that request it.\n\tSignedCertificateTimestamps [][]byte\n\t// Leaf is the parsed form of the leaf certificate, which may be initialized\n\t// using x509.ParseCertificate to reduce per-handshake processing. If nil,\n\t// the leaf certificate will be parsed as needed.\n\tLeaf *x509.Certificate\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/tls.go",
          "code_snippet": "func X509KeyPair(certPEMBlock, keyPEMBlock []byte) (Certificate, error) {\n\tfail := func(err error) (Certificate, error) { return Certificate{}, err }\n\n\tvar cert Certificate\n\tvar skippedBlockTypes []string\n\tfor {\n\t\tvar certDERBlock *pem.Block\n\t\tcertDERBlock, certPEMBlock = pem.Decode(certPEMBlock)\n\t\tif certDERBlock == nil {\n\t\t\tbreak\n\t\t}\n\t\tif certDERBlock.Type == \"CERTIFICATE\" {\n\t\t\tcert.Certificate = append(cert.Certificate, certDERBlock.Bytes)\n\t\t} else {\n\t\t\tskippedBlockTypes = append(skippedBlockTypes, certDERBlock.Type)\n\t\t}\n\t}\n\n\tif len(cert.Certificate) == 0 {\n\t\tif len(skippedBlockTypes) == 0 {\n\t\t\treturn fail(errors.New(\"tls: failed to find any PEM data in certificate input\"))\n\t\t}\n\t\tif len(skippedBlockTypes) == 1 \u0026\u0026 strings.HasSuffix(skippedBlockTypes[0], \"PRIVATE KEY\") {\n\t\t\treturn fail(errors.New(\"tls: failed to find certificate PEM data in certificate input, but did find a private key; PEM inputs may have been switched\"))\n\t\t}\n\t\treturn fail(fmt.Errorf(\"tls: failed to find \\\"CERTIFICATE\\\" PEM block in certificate input after skipping PEM blocks of the following types: %v\", skippedBlockTypes))\n\t}\n\n\tskippedBlockTypes = skippedBlockTypes[:0]\n\tvar keyDERBlock *pem.Block\n\tfor {\n\t\tkeyDERBlock, keyPEMBlock = pem.Decode(keyPEMBlock)\n\t\tif keyDERBlock == nil {\n\t\t\tif len(skippedBlockTypes) == 0 {\n\t\t\t\treturn fail(errors.New(\"tls: failed to find any PEM data in key input\"))\n\t\t\t}\n\t\t\tif len(skippedBlockTypes) == 1 \u0026\u0026 skippedBlockTypes[0] == \"CERTIFICATE\" {\n\t\t\t\treturn fail(errors.New(\"tls: found a certificate rather than a key in the PEM for the private key\"))\n\t\t\t}\n\t\t\treturn fail(fmt.Errorf(\"tls: failed to find PEM block with type ending in \\\"PRIVATE KEY\\\" in key input after skipping PEM blocks of the following types: %v\", skippedBlockTypes))\n\t\t}\n\t\tif keyDERBlock.Type == \"PRIVATE KEY\" || strings.HasSuffix(keyDERBlock.Type, \" PRIVATE KEY\") {\n\t\t\tbreak\n\t\t}\n\t\tskippedBlockTypes = append(skippedBlockTypes, keyDERBlock.Type)\n\t}\n\n\t// We don't need to parse the public key for TLS, but we so do anyway\n\t// to check that it looks sane and matches the private key.\n\tx509Cert, err := x509.ParseCertificate(cert.Certificate[0])\n\tif err != nil {\n\t\treturn fail(err)\n\t}\n\n\tif x509keypairleaf.Value() != \"0\" {\n\t\tcert.Leaf = x509Cert\n\t} else {\n\t\tx509keypairleaf.IncNonDefault()\n\t}\n\n\tcert.PrivateKey, err = parsePrivateKey(keyDERBlock.Bytes)\n\tif err != nil {\n\t\treturn fail(err)\n\t}\n\n\tswitch pub := x509Cert.PublicKey.(type) {\n\tcase *rsa.PublicKey:\n\t\tpriv, ok := cert.PrivateKey.(*rsa.PrivateKey)\n\t\tif !ok {\n\t\t\treturn fail(errors.New(\"tls: private key type does not match public key type\"))\n\t\t}\n\t\tif pub.N.Cmp(priv.N) != 0 {\n\t\t\treturn fail(errors.New(\"tls: private key does not match public key\"))\n\t\t}\n\tcase *ecdsa.PublicKey:\n\t\tpriv, ok := cert.PrivateKey.(*ecdsa.PrivateKey)\n\t\tif !ok {\n\t\t\treturn fail(errors.New(\"tls: private key type does not match public key type\"))\n\t\t}\n\t\tif pub.X.Cmp(priv.X) != 0 || pub.Y.Cmp(priv.Y) != 0 {\n\t\t\treturn fail(errors.New(\"tls: private key does not match public key\"))\n\t\t}\n\tcase ed25519.PublicKey:\n\t\tpriv, ok := cert.PrivateKey.(ed25519.PrivateKey)\n\t\tif !ok {\n\t\t\treturn fail(errors.New(\"tls: private key type does not match public key type\"))\n\t\t}\n\t\tif !bytes.Equal(priv.Public().(ed25519.PublicKey), pub) {\n\t\t\treturn fail(errors.New(\"tls: private key does not match public key\"))\n\t\t}\n\tdefault:\n\t\treturn fail(errors.New(\"tls: unknown public key algorithm\"))\n\t}\n\n\treturn cert, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Serve(l net.Listener) error {\n\tif fn := testHookServerServe; fn != nil {\n\t\tfn(srv, l) // call hook with unwrapped listener\n\t}\n\n\torigListener := l\n\tl = \u0026onceCloseListener{Listener: l}\n\tdefer l.Close()\n\n\tif err := srv.setupHTTP2_Serve(); err != nil {\n\t\treturn err\n\t}\n\n\tif !srv.trackListener(\u0026l, true) {\n\t\treturn ErrServerClosed\n\t}\n\tdefer srv.trackListener(\u0026l, false)\n\n\tbaseCtx := context.Background()\n\tif srv.BaseContext != nil {\n\t\tbaseCtx = srv.BaseContext(origListener)\n\t\tif baseCtx == nil {\n\t\t\tpanic(\"BaseContext returned a nil context\")\n\t\t}\n\t}\n\n\tvar tempDelay time.Duration // how long to sleep on accept failure\n\n\tctx := context.WithValue(baseCtx, ServerContextKey, srv)\n\tfor {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif srv.shuttingDown() {\n\t\t\t\treturn ErrServerClosed\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok \u0026\u0026 ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay \u003e max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\tsrv.logf(\"http: Accept error: %v; retrying in %v\", err, tempDelay)\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tconnCtx := ctx\n\t\tif cc := srv.ConnContext; cc != nil {\n\t\t\tconnCtx = cc(connCtx, rw)\n\t\t\tif connCtx == nil {\n\t\t\t\tpanic(\"ConnContext returned nil\")\n\t\t\t}\n\t\t}\n\t\ttempDelay = 0\n\t\tc := srv.newConn(rw)\n\t\tc.setState(c.rwc, StateNew, runHooks) // before Serve can return\n\t\tgo c.serve(connCtx)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        691,
        692,
        693,
        694,
        695,
        696,
        697,
        699,
        700,
        701,
        702,
        703,
        705,
        706,
        707,
        708,
        709,
        710,
        711,
        713,
        714,
        715,
        716,
        717,
        718,
        719
      ],
      "cover_details": {
        "line_cover_rate": 0.8666666666666667
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Bind",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        }
      ],
      "name": "Bind",
      "signature": "(c *context) Bind (i any) error",
      "ground_truth": "func (c *context) Bind(i any) error {\n\treturn c.echo.Binder.Bind(i, c)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 449,
      "end_line": 451,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "Binder interface {\n\tBind(i interface{}, c Context) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        449,
        450,
        451
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:String",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "String",
      "signature": "(c *context) String (code int, s string) (err error)",
      "ground_truth": "func (c *context) String(code int, s string) (err error) {\n\treturn c.Blob(code, MIMETextPlainCharsetUTF8, []byte(s))\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 479,
      "end_line": 481,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Blob(code int, contentType string, b []byte) (err error) {\n\tc.writeContentType(contentType)\n\tc.response.WriteHeader(code)\n\t_, err = c.response.Write(b)\n\treturn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMETextPlainCharsetUTF8             = MIMETextPlain + \"; \" + charsetUTF8",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        479,
        480,
        481
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:GET",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        }
      ],
      "name": "GET",
      "signature": "(e *Echo) GET (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) GET(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodGet, path, h, m...)\n}",
      "function_comment": "// GET registers a new GET route for a path with matching handler in the router\n// with optional route-level middleware.",
      "function_statement": "// GET registers a new GET route for a path with matching handler in the router\n// with optional route-level middleware.",
      "start_line": 490,
      "end_line": 492,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        490,
        491,
        492
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Match",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        }
      ],
      "name": "Match",
      "signature": "(e *Echo) Match (methods []string, path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route",
      "ground_truth": "func (e *Echo) Match(methods []string, path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route {\n\troutes := make([]*Route, len(methods))\n\tfor i, m := range methods {\n\t\troutes[i] = e.Add(m, path, handler, middleware...)\n\t}\n\treturn routes\n}",
      "function_comment": "// Match registers a new route for multiple HTTP methods and path with matching\n// handler in the router with optional route-level middleware.",
      "function_statement": "// Match registers a new route for multiple HTTP methods and path with matching\n// handler in the router with optional route-level middleware.",
      "start_line": 555,
      "end_line": 561,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        555,
        556,
        557,
        558,
        559,
        560
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Param",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        }
      ],
      "name": "Param",
      "signature": "(c *context) Param (name string) string",
      "ground_truth": "func (c *context) Param(name string) string {\n\tfor i, n := range c.pnames {\n\t\tif i \u003c len(c.pvalues) {\n\t\t\tif n == name {\n\t\t\t\treturn c.pvalues[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\"\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 328,
      "end_line": 337,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        328,
        329,
        330,
        331,
        332,
        333,
        336
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetLogger",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        }
      ],
      "name": "SetLogger",
      "signature": "(c *context) SetLogger (l Logger)",
      "ground_truth": "func (c *context) SetLogger(l Logger) {\n\tc.logger = l\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 643,
      "end_line": 645,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        643,
        644,
        645
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/csrf.go:CSRFWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        }
      ],
      "name": "CSRFWithConfig",
      "signature": "CSRFWithConfig (config CSRFConfig) echo.MiddlewareFunc",
      "ground_truth": "func CSRFWithConfig(config CSRFConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultCSRFConfig.Skipper\n\t}\n\tif config.TokenLength == 0 {\n\t\tconfig.TokenLength = DefaultCSRFConfig.TokenLength\n\t}\n\n\tif config.TokenLookup == \"\" {\n\t\tconfig.TokenLookup = DefaultCSRFConfig.TokenLookup\n\t}\n\tif config.ContextKey == \"\" {\n\t\tconfig.ContextKey = DefaultCSRFConfig.ContextKey\n\t}\n\tif config.CookieName == \"\" {\n\t\tconfig.CookieName = DefaultCSRFConfig.CookieName\n\t}\n\tif config.CookieMaxAge == 0 {\n\t\tconfig.CookieMaxAge = DefaultCSRFConfig.CookieMaxAge\n\t}\n\tif config.CookieSameSite == http.SameSiteNoneMode {\n\t\tconfig.CookieSecure = true\n\t}\n\n\textractors, cErr := CreateExtractors(config.TokenLookup)\n\tif cErr != nil {\n\t\tpanic(cErr)\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\ttoken := \"\"\n\t\t\tif k, err := c.Cookie(config.CookieName); err != nil {\n\t\t\t\ttoken = randomString(config.TokenLength)\n\t\t\t} else {\n\t\t\t\ttoken = k.Value // Reuse token\n\t\t\t}\n\n\t\t\tswitch c.Request().Method {\n\t\t\tcase http.MethodGet, http.MethodHead, http.MethodOptions, http.MethodTrace:\n\t\t\tdefault:\n\t\t\t\t// Validate token only for requests which are not defined as 'safe' by RFC7231\n\t\t\t\tvar lastExtractorErr error\n\t\t\t\tvar lastTokenErr error\n\t\t\touter:\n\t\t\t\tfor _, extractor := range extractors {\n\t\t\t\t\tclientTokens, err := extractor(c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlastExtractorErr = err\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tfor _, clientToken := range clientTokens {\n\t\t\t\t\t\tif validateCSRFToken(token, clientToken) {\n\t\t\t\t\t\t\tlastTokenErr = nil\n\t\t\t\t\t\t\tlastExtractorErr = nil\n\t\t\t\t\t\t\tbreak outer\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastTokenErr = ErrCSRFInvalid\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar finalErr error\n\t\t\t\tif lastTokenErr != nil {\n\t\t\t\t\tfinalErr = lastTokenErr\n\t\t\t\t} else if lastExtractorErr != nil {\n\t\t\t\t\t// ugly part to preserve backwards compatible errors. someone could rely on them\n\t\t\t\t\tif lastExtractorErr == errQueryExtractorValueMissing {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, \"missing csrf token in the query string\")\n\t\t\t\t\t} else if lastExtractorErr == errFormExtractorValueMissing {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, \"missing csrf token in the form parameter\")\n\t\t\t\t\t} else if lastExtractorErr == errHeaderExtractorValueMissing {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, \"missing csrf token in request header\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, lastExtractorErr.Error())\n\t\t\t\t\t}\n\t\t\t\t\tfinalErr = lastExtractorErr\n\t\t\t\t}\n\n\t\t\t\tif finalErr != nil {\n\t\t\t\t\tif config.ErrorHandler != nil {\n\t\t\t\t\t\treturn config.ErrorHandler(finalErr, c)\n\t\t\t\t\t}\n\t\t\t\t\treturn finalErr\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set CSRF cookie\n\t\t\tcookie := new(http.Cookie)\n\t\t\tcookie.Name = config.CookieName\n\t\t\tcookie.Value = token\n\t\t\tif config.CookiePath != \"\" {\n\t\t\t\tcookie.Path = config.CookiePath\n\t\t\t}\n\t\t\tif config.CookieDomain != \"\" {\n\t\t\t\tcookie.Domain = config.CookieDomain\n\t\t\t}\n\t\t\tif config.CookieSameSite != http.SameSiteDefaultMode {\n\t\t\t\tcookie.SameSite = config.CookieSameSite\n\t\t\t}\n\t\t\tcookie.Expires = time.Now().Add(time.Duration(config.CookieMaxAge) * time.Second)\n\t\t\tcookie.Secure = config.CookieSecure\n\t\t\tcookie.HttpOnly = config.CookieHTTPOnly\n\t\t\tc.SetCookie(cookie)\n\n\t\t\t// Store token in the context\n\t\t\tc.Set(config.ContextKey, token)\n\n\t\t\t// Protect clients from caching the response\n\t\t\tc.Response().Header().Add(echo.HeaderVary, echo.HeaderCookie)\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// CSRFWithConfig returns a CSRF middleware with config.\n// See `CSRF()`.",
      "function_statement": "// CSRFWithConfig returns a CSRF middleware with config.\n// See `CSRF()`.",
      "start_line": 96,
      "end_line": 214,
      "file_path": "./middleware/csrf.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/csrf.go",
          "code_snippet": "CSRFConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// TokenLength is the length of the generated token.\n\tTokenLength uint8 `yaml:\"token_length\"`\n\t// Optional. Default value 32.\n\n\t// TokenLookup is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n\t// to extract token from the request.\n\t// Optional. Default value \"header:X-CSRF-Token\".\n\t// Possible values:\n\t// - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n\t// - \"query:\u003cname\u003e\"\n\t// - \"form:\u003cname\u003e\"\n\t// Multiple sources example:\n\t// - \"header:X-CSRF-Token,query:csrf\"\n\tTokenLookup string `yaml:\"token_lookup\"`\n\n\t// Context key to store generated CSRF token into context.\n\t// Optional. Default value \"csrf\".\n\tContextKey string `yaml:\"context_key\"`\n\n\t// Name of the CSRF cookie. This cookie will store CSRF token.\n\t// Optional. Default value \"csrf\".\n\tCookieName string `yaml:\"cookie_name\"`\n\n\t// Domain of the CSRF cookie.\n\t// Optional. Default value none.\n\tCookieDomain string `yaml:\"cookie_domain\"`\n\n\t// Path of the CSRF cookie.\n\t// Optional. Default value none.\n\tCookiePath string `yaml:\"cookie_path\"`\n\n\t// Max age (in seconds) of the CSRF cookie.\n\t// Optional. Default value 86400 (24hr).\n\tCookieMaxAge int `yaml:\"cookie_max_age\"`\n\n\t// Indicates if CSRF cookie is secure.\n\t// Optional. Default value false.\n\tCookieSecure bool `yaml:\"cookie_secure\"`\n\n\t// Indicates if CSRF cookie is HTTP only.\n\t// Optional. Default value false.\n\tCookieHTTPOnly bool `yaml:\"cookie_http_only\"`\n\n\t// Indicates SameSite mode of the CSRF cookie.\n\t// Optional. Default value SameSiteDefaultMode.\n\tCookieSameSite http.SameSite `yaml:\"cookie_same_site\"`\n\n\t// ErrorHandler defines a function which is executed for returning custom errors.\n\tErrorHandler CSRFErrorHandler\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/csrf.go",
          "code_snippet": "DefaultCSRFConfig = CSRFConfig{\n\tSkipper:        DefaultSkipper,\n\tTokenLength:    32,\n\tTokenLookup:    \"header:\" + echo.HeaderXCSRFToken,\n\tContextKey:     \"csrf\",\n\tCookieName:     \"_csrf\",\n\tCookieMaxAge:   86400,\n\tCookieSameSite: http.SameSiteDefaultMode,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func CreateExtractors(lookups string) ([]ValuesExtractor, error) {\n\treturn createExtractors(lookups, \"\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "func randomString(length uint8) string {\n\treader := randomReaderPool.Get().(*bufio.Reader)\n\tdefer randomReaderPool.Put(reader)\n\n\tb := make([]byte, length)\n\tr := make([]byte, length+(length/4)) // perf: avoid read from rand.Reader many times\n\tvar i uint8 = 0\n\n\t// security note:\n\t// we can't just simply do b[i]=randomStringCharset[rb%len(randomStringCharset)],\n\t// len(len(randomStringCharset)) is 52, and rb is [0, 255], 256 = 52 * 4 + 48.\n\t// make the first 48 characters more possibly to be generated then others.\n\t// So we have to skip bytes when rb \u003e randomStringMaxByte\n\n\tfor {\n\t\t_, err := io.ReadFull(reader, r)\n\t\tif err != nil {\n\t\t\tpanic(\"unexpected error happened when reading from bufio.NewReader(crypto/rand.Reader)\")\n\t\t}\n\t\tfor _, rb := range r {\n\t\t\tif rb \u003e randomStringMaxByte {\n\t\t\t\t// Skip this number to avoid bias.\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tb[i] = randomStringCharset[rb%randomStringCharsetLen]\n\t\t\ti++\n\t\t\tif i == length {\n\t\t\t\treturn string(b)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/csrf.go",
          "code_snippet": "func validateCSRFToken(token, clientToken string) bool {\n\treturn subtle.ConstantTimeCompare([]byte(token), []byte(clientToken)) == 1\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/csrf.go",
          "code_snippet": "ErrCSRFInvalid = echo.NewHTTPError(http.StatusForbidden, \"invalid csrf token\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errQueryExtractorValueMissing = errors.New(\"missing value in the query string\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errFormExtractorValueMissing = errors.New(\"missing value in the form\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errHeaderExtractorValueMissing = errors.New(\"missing value in request header\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderVary                = \"Vary\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderCookie              = \"Cookie\"",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "SameSiteNoneMode",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "Cookie struct {\n\tName   string\n\tValue  string\n\tQuoted bool // indicates whether the Value was originally quoted\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge\u003e0 means Max-Age attribute present and given in seconds\n\tMaxAge      int\n\tSecure      bool\n\tHttpOnly    bool\n\tSameSite    SameSite\n\tPartitioned bool\n\tRaw         string\n\tUnparsed    []string // Raw text of unparsed attribute-value pairs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodTrace   = \"TRACE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "SameSiteDefaultMode SameSite = iota + 1",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Add(d Duration) Time {\n\tdsec := int64(d / 1e9)\n\tnsec := t.nsec() + int32(d%1e9)\n\tif nsec \u003e= 1e9 {\n\t\tdsec++\n\t\tnsec -= 1e9\n\t} else if nsec \u003c 0 {\n\t\tdsec--\n\t\tnsec += 1e9\n\t}\n\tt.wall = t.wall\u0026^nsecMask | uint64(nsec) // update nsec\n\tt.addSec(dsec)\n\tif t.wall\u0026hasMonotonic != 0 {\n\t\tte := t.ext + int64(d)\n\t\tif d \u003c 0 \u0026\u0026 te \u003e t.ext || d \u003e 0 \u0026\u0026 te \u003c t.ext {\n\t\t\t// Monotonic clock reading now out of range; degrade to wall-only.\n\t\t\tt.stripMono()\n\t\t} else {\n\t\t\tt.ext = te\n\t\t}\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := now()\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Second               = 1000 * Millisecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Add(key, value string) {\n\ttextproto.MIMEHeader(h).Add(key, value)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        126,
        127,
        128,
        129,
        130,
        132,
        133,
        134,
        135,
        136,
        137,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        153,
        154,
        155,
        156,
        157,
        159,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        176,
        179,
        180,
        181,
        182,
        183,
        188,
        189,
        190,
        191,
        194,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211
      ],
      "cover_details": {
        "line_cover_rate": 0.773109243697479
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:PathParamsBinder",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        }
      ],
      "name": "PathParamsBinder",
      "signature": "PathParamsBinder (c Context) *ValueBinder",
      "ground_truth": "func PathParamsBinder(c Context) *ValueBinder {\n\treturn \u0026ValueBinder{\n\t\tfailFast:  true,\n\t\tValueFunc: c.Param,\n\t\tValuesFunc: func(sourceParam string) []string {\n\t\t\t// path parameter should not have multiple values so getting values does not make sense but lets not error out here\n\t\t\tvalue := c.Param(sourceParam)\n\t\t\tif value == \"\" {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn []string{value}\n\t\t},\n\t\tErrorFunc: NewBindingError,\n\t}\n}",
      "function_comment": "// PathParamsBinder creates path parameter value binder",
      "function_statement": "// PathParamsBinder creates path parameter value binder",
      "start_line": 125,
      "end_line": 139,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func NewBindingError(sourceParam string, values []string, message interface{}, internalError error) error {\n\treturn \u0026BindingError{\n\t\tField:  sourceParam,\n\t\tValues: values,\n\t\tHTTPError: \u0026HTTPError{\n\t\t\tCode:     http.StatusBadRequest,\n\t\t\tMessage:  message,\n\t\t\tInternal: internalError,\n\t\t},\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135
      ],
      "cover_details": {
        "line_cover_rate": 0.7333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Float32s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        }
      ],
      "name": "Float32s",
      "signature": "(b *ValueBinder) Float32s (sourceParam string, dest *[]float32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Float32s(sourceParam string, dest *[]float32) *ValueBinder {\n\treturn b.floatsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Float32s binds parameter values to slice of float32 variables",
      "function_statement": "// Float32s binds parameter values to slice of float32 variables",
      "start_line": 1080,
      "end_line": 1082,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.floats(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1080,
        1081,
        1082
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Error",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        }
      ],
      "name": "Error",
      "signature": "(c *context) Error (err error)",
      "ground_truth": "func (c *context) Error(err error) {\n\tc.echo.HTTPErrorHandler(err, c)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 619,
      "end_line": 621,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        619,
        620,
        621
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:DELETE",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "DELETE",
      "signature": "(g *Group) DELETE (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) DELETE(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodDelete, path, h, m...)\n}",
      "function_comment": "// DELETE implements `Echo#DELETE()` for sub-routes within the Group.",
      "function_statement": "// DELETE implements `Echo#DELETE()` for sub-routes within the Group.",
      "start_line": 41,
      "end_line": 43,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodDelete  = \"DELETE\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        41,
        42,
        43
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/csrf.go:validateCSRFToken",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        }
      ],
      "name": "validateCSRFToken",
      "signature": "validateCSRFToken (token, clientToken string) bool",
      "ground_truth": "func validateCSRFToken(token, clientToken string) bool {\n\treturn subtle.ConstantTimeCompare([]byte(token), []byte(clientToken)) == 1\n}",
      "function_comment": "// CSRFWithConfig returns a CSRF middleware with config.",
      "function_statement": "// CSRFWithConfig returns a CSRF middleware with config.",
      "start_line": 216,
      "end_line": 218,
      "file_path": "./middleware/csrf.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/subtle/constant_time.go",
          "code_snippet": "func ConstantTimeCompare(x, y []byte) int {\n\tif len(x) != len(y) {\n\t\treturn 0\n\t}\n\n\tvar v byte\n\n\tfor i := 0; i \u003c len(x); i++ {\n\t\tv |= x[i] ^ y[i]\n\t}\n\n\treturn ConstantTimeByteEq(v, 0)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        216,
        217,
        218
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:Write",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "Write",
      "signature": "(r *Response) Write (b []byte) (n int, err error)",
      "ground_truth": "func (r *Response) Write(b []byte) (n int, err error) {\n\tif !r.Committed {\n\t\tif r.Status == 0 {\n\t\t\tr.Status = http.StatusOK\n\t\t}\n\t\tr.WriteHeader(r.Status)\n\t}\n\tn, err = r.Writer.Write(b)\n\tr.Size += int64(n)\n\tfor _, fn := range r.afterFuncs {\n\t\tfn()\n\t}\n\treturn\n}",
      "function_comment": "// Write writes the data to the connection as part of an HTTP reply.",
      "function_statement": "// Write writes the data to the connection as part of an HTTP reply.",
      "start_line": 71,
      "end_line": 84,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusOK                   = 200",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:updateAllowHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "updateAllowHeader",
      "signature": "(m *routeMethods) updateAllowHeader ()",
      "ground_truth": "func (m *routeMethods) updateAllowHeader() {\n\tbuf := new(bytes.Buffer)\n\tbuf.WriteString(http.MethodOptions)\n\n\tif m.connect != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodConnect)\n\t}\n\tif m.delete != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodDelete)\n\t}\n\tif m.get != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodGet)\n\t}\n\tif m.head != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodHead)\n\t}\n\tif m.patch != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodPatch)\n\t}\n\tif m.post != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodPost)\n\t}\n\tif m.propfind != nil {\n\t\tbuf.WriteString(\", PROPFIND\")\n\t}\n\tif m.put != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodPut)\n\t}\n\tif m.trace != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodTrace)\n\t}\n\tif m.report != nil {\n\t\tbuf.WriteString(\", REPORT\")\n\t}\n\tfor method := range m.anyOther { // for simplicity, we use map and therefore order is not deterministic here\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(method)\n\t}\n\tm.allowHeader = buf.String()\n}",
      "function_comment": "// Router is the registry of all registered routes for an `Echo` instance for",
      "function_statement": "// Router is the registry of all registered routes for an `Echo` instance for",
      "start_line": 89,
      "end_line": 136,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteString(s string) (n int, err error) {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(len(s))\n\tif !ok {\n\t\tm = b.grow(len(s))\n\t}\n\treturn copy(b.buf[m:], s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodConnect = \"CONNECT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodDelete  = \"DELETE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPatch   = \"PATCH\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPut     = \"PUT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodTrace   = \"TRACE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) String() string {\n\tif b == nil {\n\t\t// Special case, useful in debugging.\n\t\treturn \"\u003cnil\u003e\"\n\t}\n\treturn string(b.buf[b.off:])\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135
      ],
      "cover_details": {
        "line_cover_rate": 0.9791666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Routers",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        }
      ],
      "name": "Routers",
      "signature": "(e *Echo) Routers () map[string]*Router",
      "ground_truth": "func (e *Echo) Routers() map[string]*Router {\n\treturn e.routers\n}",
      "function_comment": "// Routers returns the map of host =\u003e router.",
      "function_statement": "// Routers returns the map of host =\u003e router.",
      "start_line": 407,
      "end_line": 409,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        407,
        408,
        409
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:BodyDump",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDump"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpFails"
        }
      ],
      "name": "BodyDump",
      "signature": "BodyDump (handler BodyDumpHandler) echo.MiddlewareFunc",
      "ground_truth": "func BodyDump(handler BodyDumpHandler) echo.MiddlewareFunc {\n\tc := DefaultBodyDumpConfig\n\tc.Handler = handler\n\treturn BodyDumpWithConfig(c)\n}",
      "function_comment": "// BodyDump returns a BodyDump middleware.\n//\n// BodyDump middleware captures the request and response payload and calls the\n// registered handler.",
      "function_statement": "// BodyDump returns a BodyDump middleware.\n//\n// BodyDump middleware captures the request and response payload and calls the\n// registered handler.",
      "start_line": 44,
      "end_line": 48,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "BodyDumpHandler func(echo.Context, []byte, []byte)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "DefaultBodyDumpConfig = BodyDumpConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "BodyDumpConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Handler receives request and response payload.\n\t// Required.\n\tHandler BodyDumpHandler\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "func BodyDumpWithConfig(config BodyDumpConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Handler == nil {\n\t\tpanic(\"echo: body-dump middleware requires a handler function\")\n\t}\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBodyDumpConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\t// Request\n\t\t\treqBody := []byte{}\n\t\t\tif c.Request().Body != nil { // Read\n\t\t\t\treqBody, _ = io.ReadAll(c.Request().Body)\n\t\t\t}\n\t\t\tc.Request().Body = io.NopCloser(bytes.NewBuffer(reqBody)) // Reset\n\n\t\t\t// Response\n\t\t\tresBody := new(bytes.Buffer)\n\t\t\tmw := io.MultiWriter(c.Response().Writer, resBody)\n\t\t\twriter := \u0026bodyDumpResponseWriter{Writer: mw, ResponseWriter: c.Response().Writer}\n\t\t\tc.Response().Writer = writer\n\n\t\t\tif err = next(c); err != nil {\n\t\t\t\tc.Error(err)\n\t\t\t}\n\n\t\t\t// Callback\n\t\t\tconfig.Handler(c, reqBody, resBody.Bytes())\n\n\t\t\treturn\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        44,
        45,
        46,
        47,
        48
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:float",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "float",
      "signature": "(b *ValueBinder) float (sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) float(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseFloat(value, bitSize)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to float%v\", bitSize), err))\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *float64:\n\t\t*d = n\n\tcase *float32:\n\t\t*d = float32(n)\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1010,
      "end_line": 1024,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atof.go",
          "code_snippet": "func ParseFloat(s string, bitSize int) (float64, error) {\n\tf, n, err := parseFloatPrefix(s, bitSize)\n\tif n != len(s) \u0026\u0026 (err == nil || err.(*NumError).Err != ErrSyntax) {\n\t\treturn 0, syntaxError(fnParseFloat, s)\n\t}\n\treturn f, err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1010,
        1011,
        1012,
        1013,
        1014,
        1015,
        1017,
        1018,
        1019,
        1020,
        1021,
        1023
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/middleware.go:rewriteURL",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/middleware_test.go",
          "func_name": "TestRewriteURL"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestFailNextTarget"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestTargetProvider"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestModifyResponseUseContext"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteAfterRouting"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithCaret"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteWithConfigPreMiddleware_Issue1143"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithRegexRules"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteReplacementEscaping"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        }
      ],
      "name": "rewriteURL",
      "signature": "rewriteURL (rewriteRegex map[*regexp.Regexp]string, req *http.Request) error",
      "ground_truth": "func rewriteURL(rewriteRegex map[*regexp.Regexp]string, req *http.Request) error {\n\tif len(rewriteRegex) == 0 {\n\t\treturn nil\n\t}\n\n\t// Depending on how HTTP request is sent RequestURI could contain Scheme://Host/path or be just /path.\n\t// We only want to use path part for rewriting and therefore trim prefix if it exists\n\trawURI := req.RequestURI\n\tif rawURI != \"\" \u0026\u0026 rawURI[0] != '/' {\n\t\tprefix := \"\"\n\t\tif req.URL.Scheme != \"\" {\n\t\t\tprefix = req.URL.Scheme + \"://\"\n\t\t}\n\t\tif req.URL.Host != \"\" {\n\t\t\tprefix += req.URL.Host // host or host:port\n\t\t}\n\t\tif prefix != \"\" {\n\t\t\trawURI = strings.TrimPrefix(rawURI, prefix)\n\t\t}\n\t}\n\n\tfor k, v := range rewriteRegex {\n\t\tif replacer := captureTokens(k, rawURI); replacer != nil {\n\t\t\turl, err := req.URL.Parse(replacer.Replace(v))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treq.URL = url\n\n\t\t\treturn nil // rewrite only once\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 52,
      "end_line": 85,
      "file_path": "./middleware/middleware.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func captureTokens(pattern *regexp.Regexp, input string) *strings.Replacer {\n\tgroups := pattern.FindAllStringSubmatch(input, -1)\n\tif groups == nil {\n\t\treturn nil\n\t}\n\tvalues := groups[0][1:]\n\treplace := make([]string, 2*len(values))\n\tfor i, v := range values {\n\t\tj := 2 * i\n\t\treplace[j] = \"$\" + strconv.Itoa(i+1)\n\t\treplace[j+1] = v\n\t}\n\treturn strings.NewReplacer(replace...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "Regexp struct {\n\texpr           string       // as passed to Compile\n\tprog           *syntax.Prog // compiled program\n\tonepass        *onePassProg // onepass program or nil\n\tnumSubexp      int\n\tmaxBitStateLen int\n\tsubexpNames    []string\n\tprefix         string         // required prefix in unanchored matches\n\tprefixBytes    []byte         // prefix, as a []byte\n\tprefixRune     rune           // first rune in prefix\n\tprefixEnd      uint32         // pc for last rune in prefix\n\tmpool          int            // pool for machines\n\tmatchcap       int            // size of recorded match lengths\n\tprefixComplete bool           // prefix is the entire regexp\n\tcond           syntax.EmptyOp // empty-width conditions required at start of match\n\tminInputLen    int            // minimum length of the input in bytes\n\n\t// This field can be modified by the Longest method,\n\t// but it is otherwise read-only.\n\tlongest bool // whether regexp prefers leftmost-longest match\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimPrefix(s, prefix string) string {\n\treturn stringslite.TrimPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func (u *URL) Parse(ref string) (*URL, error) {\n\trefURL, err := Parse(ref)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn u.ResolveReference(refURL), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func (r *Replacer) Replace(s string) string {\n\tr.once.Do(r.buildOnce)\n\treturn r.r.Replace(s)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        52,
        53,
        54,
        55,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        73,
        74,
        75,
        76,
        79,
        80,
        81,
        84
      ],
      "cover_details": {
        "line_cover_rate": 0.7058823529411765
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:reset",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "reset",
      "signature": "(r *Response) reset (w http.ResponseWriter)",
      "ground_truth": "func (r *Response) reset(w http.ResponseWriter) {\n\tr.beforeFuncs = nil\n\tr.afterFuncs = nil\n\tr.Writer = w\n\tr.Size = 0\n\tr.Status = http.StatusOK\n\tr.Committed = false\n}",
      "function_comment": "// Unwrap returns the original http.ResponseWriter.\n// ResponseController can be used to access the original http.ResponseWriter.",
      "function_statement": "// Unwrap returns the original http.ResponseWriter.\n// ResponseController can be used to access the original http.ResponseWriter.",
      "start_line": 110,
      "end_line": 117,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusOK                   = 200",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:addStaticChild",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "addStaticChild",
      "signature": "(n *node) addStaticChild (c *node)",
      "ground_truth": "func (n *node) addStaticChild(c *node) {\n\tn.staticChildren = append(n.staticChildren, c)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 427,
      "end_line": 429,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        427,
        428,
        429
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:bindWithDelimiter",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "bindWithDelimiter",
      "signature": "(b *ValueBinder) bindWithDelimiter (sourceParam string, dest interface{}, delimiter string, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) bindWithDelimiter(sourceParam string, dest interface{}, delimiter string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\ttmpValues := make([]string, 0, len(values))\n\tfor _, v := range values {\n\t\ttmpValues = append(tmpValues, strings.Split(v, delimiter)...)\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *[]string:\n\t\t*d = tmpValues\n\t\treturn b\n\tcase *[]bool:\n\t\treturn b.bools(sourceParam, tmpValues, d)\n\tcase *[]int64, *[]int32, *[]int16, *[]int8, *[]int:\n\t\treturn b.ints(sourceParam, tmpValues, d)\n\tcase *[]uint64, *[]uint32, *[]uint16, *[]uint8, *[]uint: // *[]byte is same as *[]uint8\n\t\treturn b.uints(sourceParam, tmpValues, d)\n\tcase *[]float64, *[]float32:\n\t\treturn b.floats(sourceParam, tmpValues, d)\n\tcase *[]time.Duration:\n\t\treturn b.durations(sourceParam, tmpValues, d)\n\tdefault:\n\t\t// support only cases when destination is slice\n\t\t// does not support time.Time as it needs argument (layout) for parsing or BindUnmarshaler\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"unsupported bind type\", nil))\n\t\treturn b\n\t}\n}",
      "function_comment": "// MustBindWithDelimiter requires parameter value to exist to bind destination by suitable conversion function.",
      "function_statement": "// MustBindWithDelimiter requires parameter value to exist to bind destination by suitable conversion function.",
      "start_line": 415,
      "end_line": 451,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) bools(sourceParam string, values []string, dest *[]bool) *ValueBinder {\n\ttmp := make([]bool, len(values))\n\tfor i, v := range values {\n\t\tb.bool(sourceParam, v, \u0026tmp[i])\n\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\treturn b\n\t\t}\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) ints(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]int64:\n\t\ttmp := make([]int64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int32:\n\t\ttmp := make([]int32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int16:\n\t\ttmp := make([]int16, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 16)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int8:\n\t\ttmp := make([]int8, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 8)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int:\n\t\ttmp := make([]int, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 0)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uints(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]uint64:\n\t\ttmp := make([]uint64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint32:\n\t\ttmp := make([]uint32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint16:\n\t\ttmp := make([]uint16, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 16)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint8: // byte is alias to uint8\n\t\ttmp := make([]uint8, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 8)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint:\n\t\ttmp := make([]uint, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 0)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floats(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]float64:\n\t\ttmp := make([]float64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.float(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]float32:\n\t\ttmp := make([]float32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.float(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) durations(sourceParam string, values []string, dest *[]time.Duration) *ValueBinder {\n\ttmp := make([]time.Duration, len(values))\n\tfor i, v := range values {\n\t\tt, err := time.ParseDuration(v)\n\t\tif err != nil {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{v}, \"failed to bind field value to Duration\", err))\n\t\t\tif b.failFast {\n\t\t\t\treturn b\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ttmp[i] = t\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Split(s, sep string) []string { return genSplit(s, sep, 0, -1) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        415,
        416,
        417,
        418,
        419,
        420,
        421,
        422,
        423,
        424,
        426,
        427,
        428,
        429,
        431,
        432,
        433,
        434,
        435,
        436,
        437,
        438,
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449
      ],
      "cover_details": {
        "line_cover_rate": 0.8918918918918919
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:subFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "subFS",
      "signature": "subFS (currentFs fs.FS, root string) (fs.FS, error)",
      "ground_truth": "func subFS(currentFs fs.FS, root string) (fs.FS, error) {\n\troot = filepath.ToSlash(filepath.Clean(root)) // note: fs.FS operates only with slashes. `ToSlash` is necessary for Windows\n\tif dFS, ok := currentFs.(*defaultFS); ok {\n\t\t// we need to make exception for `defaultFS` instances as it interprets root prefix differently from fs.FS.\n\t\t// fs.Fs.Open does not like relative paths (\"./\", \"../\") and absolute paths at all but prior echo.Filesystem we\n\t\t// were able to use paths like `./myfile.log`, `/etc/hosts` and these would work fine with `os.Open` but not with fs.Fs\n\t\tif !filepath.IsAbs(root) {\n\t\t\troot = filepath.Join(dFS.prefix, root)\n\t\t}\n\t\treturn \u0026defaultFS{\n\t\t\tprefix: root,\n\t\t\tfs:     os.DirFS(root),\n\t\t}, nil\n\t}\n\treturn fs.Sub(currentFs, root)\n}",
      "function_comment": "// defaultFS exists to preserve pre v4.7.0 behaviour where files were open by `os.Open`.\n// v4.7 introduced `echo.Filesystem` field which is Go1.16+ `fs.Fs` interface.\n// Difference between `os.Open` and `fs.Open` is that FS does not allow opening path that start with `.`, `..` or `/`\n// etc. For example previously you could have `../images` in your application but `fs := os.DirFS(\"./\")` would not\n// allow you to use `fs.Open(\"../images\")` and this would break all old applications that rely on being able to\n// traverse up from current executable run path.",
      "function_statement": "// defaultFS exists to preserve pre v4.7.0 behaviour where files were open by `os.Open`.\n// v4.7 introduced `echo.Filesystem` field which is Go1.16+ `fs.Fs` interface.\n// Difference between `os.Open` and `fs.Open` is that FS does not allow opening path that start with `.`, `..` or `/`\n// etc. For example previously you could have `../images` in your application but `fs := os.DirFS(\"./\")` would not\n// allow you to use `fs.Open(\"../images\")` and this would break all old applications that rely on being able to\n// traverse up from current executable run path.",
      "start_line": 124,
      "end_line": 139,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "defaultFS struct {\n\tfs     fs.FS\n\tprefix string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func ToSlash(path string) string {\n\treturn filepathlite.ToSlash(path)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func Clean(path string) string {\n\treturn filepathlite.Clean(path)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func IsAbs(path string) bool {\n\treturn filepathlite.IsAbs(path)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func Join(elem ...string) string {\n\treturn join(elem)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/os/file.go",
          "code_snippet": "func DirFS(dir string) fs.FS {\n\treturn dirFS(dir)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/sub.go",
          "code_snippet": "func Sub(fsys FS, dir string) (FS, error) {\n\tif !ValidPath(dir) {\n\t\treturn nil, \u0026PathError{Op: \"sub\", Path: dir, Err: ErrInvalid}\n\t}\n\tif dir == \".\" {\n\t\treturn fsys, nil\n\t}\n\tif fsys, ok := fsys.(SubFS); ok {\n\t\treturn fsys.Sub(dir)\n\t}\n\treturn \u0026subFS{fsys, dir}, nil\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        138
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:Group",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        }
      ],
      "name": "Group",
      "signature": "(g *Group) Group (prefix string, middleware ...MiddlewareFunc) (sg *Group)",
      "ground_truth": "func (g *Group) Group(prefix string, middleware ...MiddlewareFunc) (sg *Group) {\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\tsg = g.echo.Group(g.prefix+prefix, m...)\n\tsg.host = g.host\n\treturn\n}",
      "function_comment": "// Group creates a new sub-group with prefix and optional sub-group-level middleware.",
      "function_statement": "// Group creates a new sub-group with prefix and optional sub-group-level middleware.",
      "start_line": 99,
      "end_line": 106,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Group(prefix string, m ...MiddlewareFunc) (g *Group) {\n\tg = \u0026Group{prefix: prefix, echo: e}\n\tg.Use(m...)\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int16",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Int16",
      "signature": "(b *ValueBinder) Int16 (sourceParam string, dest *int16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int16(sourceParam string, dest *int16) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 16, false)\n}",
      "function_comment": "// Int16 binds parameter to int16 variable",
      "function_statement": "// Int16 binds parameter to int16 variable",
      "start_line": 474,
      "end_line": 476,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        474,
        475,
        476
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:CONNECT",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "CONNECT",
      "signature": "(g *Group) CONNECT (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) CONNECT(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodConnect, path, h, m...)\n}",
      "function_comment": "// CONNECT implements `Echo#CONNECT()` for sub-routes within the Group.",
      "function_statement": "// CONNECT implements `Echo#CONNECT()` for sub-routes within the Group.",
      "start_line": 36,
      "end_line": 38,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodConnect = \"CONNECT\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        36,
        37,
        38
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/secure.go:Secure",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/secure_test.go",
          "func_name": "TestSecure"
        }
      ],
      "name": "Secure",
      "signature": "Secure () echo.MiddlewareFunc",
      "ground_truth": "func Secure() echo.MiddlewareFunc {\n\treturn SecureWithConfig(DefaultSecureConfig)\n}",
      "function_comment": "// Secure returns a Secure middleware.\n// Secure middleware provides protection against cross-site scripting (XSS) attack,\n// content type sniffing, clickjacking, insecure connection and other code injection\n// attacks.",
      "function_statement": "// Secure returns a Secure middleware.\n// Secure middleware provides protection against cross-site scripting (XSS) attack,\n// content type sniffing, clickjacking, insecure connection and other code injection\n// attacks.",
      "start_line": 91,
      "end_line": 93,
      "file_path": "./middleware/secure.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/secure.go",
          "code_snippet": "func SecureWithConfig(config SecureConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultSecureConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\n\t\t\tif config.XSSProtection != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderXXSSProtection, config.XSSProtection)\n\t\t\t}\n\t\t\tif config.ContentTypeNosniff != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderXContentTypeOptions, config.ContentTypeNosniff)\n\t\t\t}\n\t\t\tif config.XFrameOptions != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderXFrameOptions, config.XFrameOptions)\n\t\t\t}\n\t\t\tif (c.IsTLS() || (req.Header.Get(echo.HeaderXForwardedProto) == \"https\")) \u0026\u0026 config.HSTSMaxAge != 0 {\n\t\t\t\tsubdomains := \"\"\n\t\t\t\tif !config.HSTSExcludeSubdomains {\n\t\t\t\t\tsubdomains = \"; includeSubdomains\"\n\t\t\t\t}\n\t\t\t\tif config.HSTSPreloadEnabled {\n\t\t\t\t\tsubdomains = fmt.Sprintf(\"%s; preload\", subdomains)\n\t\t\t\t}\n\t\t\t\tres.Header().Set(echo.HeaderStrictTransportSecurity, fmt.Sprintf(\"max-age=%d%s\", config.HSTSMaxAge, subdomains))\n\t\t\t}\n\t\t\tif config.ContentSecurityPolicy != \"\" {\n\t\t\t\tif config.CSPReportOnly {\n\t\t\t\t\tres.Header().Set(echo.HeaderContentSecurityPolicyReportOnly, config.ContentSecurityPolicy)\n\t\t\t\t} else {\n\t\t\t\t\tres.Header().Set(echo.HeaderContentSecurityPolicy, config.ContentSecurityPolicy)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif config.ReferrerPolicy != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderReferrerPolicy, config.ReferrerPolicy)\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/secure.go",
          "code_snippet": "DefaultSecureConfig = SecureConfig{\n\tSkipper:            DefaultSkipper,\n\tXSSProtection:      \"1; mode=block\",\n\tContentTypeNosniff: \"nosniff\",\n\tXFrameOptions:      \"SAMEORIGIN\",\n\tHSTSPreloadEnabled: false,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        91,
        92,
        93
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int16s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Int16s",
      "signature": "(b *ValueBinder) Int16s (sourceParam string, dest *[]int16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int16s(sourceParam string, dest *[]int16) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Int16s binds parameter to slice of int16",
      "function_statement": "// Int16s binds parameter to slice of int16",
      "start_line": 642,
      "end_line": 644,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        642,
        643,
        644
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:NoContent",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "NoContent",
      "signature": "(c *context) NoContent (code int) error",
      "ground_truth": "func (c *context) NoContent(code int) error {\n\tc.response.WriteHeader(code)\n\treturn nil\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 605,
      "end_line": 608,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        605,
        606,
        607,
        608
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:configureServer",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        }
      ],
      "name": "configureServer",
      "signature": "(e *Echo) configureServer (s *http.Server) error",
      "ground_truth": "func (e *Echo) configureServer(s *http.Server) error {\n\t// Setup\n\te.colorer.SetOutput(e.Logger.Output())\n\ts.ErrorLog = e.StdLogger\n\ts.Handler = e\n\tif e.Debug {\n\t\te.Logger.SetLevel(log.DEBUG)\n\t}\n\n\tif !e.HideBanner {\n\t\te.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n\t}\n\n\tif s.TLSConfig == nil {\n\t\tif e.Listener == nil {\n\t\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\te.Listener = l\n\t\t}\n\t\tif !e.HidePort {\n\t\t\te.colorer.Printf(\"⇨ http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n\t\t}\n\t\treturn nil\n\t}\n\tif e.TLSListener == nil {\n\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.TLSListener = tls.NewListener(l, s.TLSConfig)\n\t}\n\tif !e.HidePort {\n\t\te.colorer.Printf(\"⇨ https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 773,
      "end_line": 810,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "banner = `\n   ____    __\n  / __/___/ /  ___\n / _// __/ _ \\/ _ \\\n/___/\\__/_//_/\\___/ %s\nHigh performance, minimalist Go web framework\n%s\n____________________________________O/_______\n                                    O\\\n`",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Version = \"4.13.4\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "website = \"https://echo.labstack.com\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func newListener(address, network string) (*tcpKeepAliveListener, error) {\n\tif network != \"tcp\" \u0026\u0026 network != \"tcp4\" \u0026\u0026 network != \"tcp6\" {\n\t\treturn nil, ErrInvalidListenerNetwork\n\t}\n\tl, err := net.Listen(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026tcpKeepAliveListener{l.(*net.TCPListener)}, nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) SetOutput(w io.Writer) {\n\tc.output = w\n\tif w, ok := w.(*os.File); !ok || !isatty.IsTerminal(w.Fd()) {\n\t\tc.disabled = true\n\t}\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "DEBUG Lvl = iota + 1",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Printf(format string, args ...interface{}) {\n\tfmt.Fprintf(c.output, format, args...)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Red(msg interface{}, styles ...string) string {\n\treturn red(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Blue(msg interface{}, styles ...string) string {\n\treturn blue(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Green(msg interface{}, styles ...string) string {\n\treturn green(msg, styles, c)\n}",
          "ref_module": "color"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Listener interface {\n\t// Accept waits for and returns the next connection to the listener.\n\tAccept() (Conn, error)\n\n\t// Close closes the listener.\n\t// Any blocked Accept operations will be unblocked and return errors.\n\tClose() error\n\n\t// Addr returns the listener's network address.\n\tAddr() Addr\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/tls.go",
          "code_snippet": "func NewListener(inner net.Listener, config *Config) net.Listener {\n\tl := new(listener)\n\tl.Listener = inner\n\tl.config = config\n\treturn l\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        773,
        774,
        775,
        776,
        777,
        778,
        779,
        780,
        782,
        783,
        784,
        786,
        787,
        788,
        789,
        790,
        791,
        792,
        794,
        795,
        796,
        797,
        799,
        800,
        801,
        802,
        803,
        804,
        806,
        807,
        808,
        809
      ],
      "cover_details": {
        "line_cover_rate": 0.8421052631578947
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Routes",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        }
      ],
      "name": "Routes",
      "signature": "(e *Echo) Routes () []*Route",
      "ground_truth": "func (e *Echo) Routes() []*Route {\n\treturn e.router.Routes()\n}",
      "function_comment": "// Routes returns the registered routes for default router.\n// In case when Echo serves multiple hosts/domains use `e.Routers()[\"domain2.site\"].Routes()` to get specific host routes.",
      "function_statement": "// Routes returns the registered routes for default router.\n// In case when Echo serves multiple hosts/domains use `e.Routers()[\"domain2.site\"].Routes()` to get specific host routes.",
      "start_line": 630,
      "end_line": 632,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) Routes() []*Route {\n\troutes := make([]*Route, 0, len(r.routes))\n\tfor _, v := range r.routes {\n\t\troutes = append(routes, v)\n\t}\n\treturn routes\n}",
          "ref_module": "v4"
        }
      ],
      "covered_lines": [
        630,
        631,
        632
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustBool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        }
      ],
      "name": "MustBool",
      "signature": "(b *ValueBinder) MustBool (sourceParam string, dest *bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustBool(sourceParam string, dest *bool) *ValueBinder {\n\treturn b.boolValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustBool requires parameter value to exist to bind to bool variable. Returns error when value does not exist",
      "function_statement": "// MustBool requires parameter value to exist to bind to bool variable. Returns error when value does not exist",
      "start_line": 905,
      "end_line": 907,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) boolValue(sourceParam string, dest *bool, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.bool(sourceParam, value, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        905,
        906,
        907
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:WWWRedirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectWWWRedirect"
        }
      ],
      "name": "WWWRedirect",
      "signature": "WWWRedirect () echo.MiddlewareFunc",
      "ground_truth": "func WWWRedirect() echo.MiddlewareFunc {\n\treturn WWWRedirectWithConfig(DefaultRedirectConfig)\n}",
      "function_comment": "// WWWRedirect redirects non www requests to www.\n// For example, http://labstack.com will be redirect to http://www.labstack.com.\n//\n// Usage `Echo#Pre(WWWRedirect())`",
      "function_statement": "// WWWRedirect redirects non www requests to www.\n// For example, http://labstack.com will be redirect to http://www.labstack.com.\n//\n// Usage `Echo#Pre(WWWRedirect())`",
      "start_line": 98,
      "end_line": 100,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func WWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif !strings.HasPrefix(host, www) {\n\t\t\treturn true, scheme + \"://www.\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "DefaultRedirectConfig = RedirectConfig{\n\tSkipper: DefaultSkipper,\n\tCode:    http.StatusMovedPermanently,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        98,
        99,
        100
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:JSONBlob",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        }
      ],
      "name": "JSONBlob",
      "signature": "(c *context) JSONBlob (code int, b []byte) (err error)",
      "ground_truth": "func (c *context) JSONBlob(code int, b []byte) (err error) {\n\treturn c.Blob(code, MIMEApplicationJSON, b)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 520,
      "end_line": 522,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Blob(code int, contentType string, b []byte) (err error) {\n\tc.writeContentType(contentType)\n\tc.response.WriteHeader(code)\n\t_, err = c.response.Write(b)\n\treturn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationJSON = \"application/json\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        520,
        521,
        522
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:JSONPBlob",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        }
      ],
      "name": "JSONPBlob",
      "signature": "(c *context) JSONPBlob (code int, callback string, b []byte) (err error)",
      "ground_truth": "func (c *context) JSONPBlob(code int, callback string, b []byte) (err error) {\n\tc.writeContentType(MIMEApplicationJavaScriptCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tif _, err = c.response.Write([]byte(callback + \"(\")); err != nil {\n\t\treturn\n\t}\n\tif _, err = c.response.Write(b); err != nil {\n\t\treturn\n\t}\n\t_, err = c.response.Write([]byte(\");\"))\n\treturn\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 528,
      "end_line": 539,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationJavaScriptCharsetUTF8 = MIMEApplicationJavaScript + \"; \" + charsetUTF8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Write(b []byte) (n int, err error) {\n\tif !r.Committed {\n\t\tif r.Status == 0 {\n\t\t\tr.Status = http.StatusOK\n\t\t}\n\t\tr.WriteHeader(r.Status)\n\t}\n\tn, err = r.Writer.Write(b)\n\tr.Size += int64(n)\n\tfor _, fn := range r.afterFuncs {\n\t\tfn()\n\t}\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        528,
        529,
        530,
        531,
        534,
        537,
        538
      ],
      "cover_details": {
        "line_cover_rate": 0.5833333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint16s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustUint16s",
      "signature": "(b *ValueBinder) MustUint16s (sourceParam string, dest *[]uint16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint16s(sourceParam string, dest *[]uint16) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustUint16s requires parameter value to exist to bind to uint16 slice variable. Returns error when value does not exist",
      "function_statement": "// MustUint16s requires parameter value to exist to bind to uint16 slice variable. Returns error when value does not exist",
      "start_line": 875,
      "end_line": 877,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        875,
        876,
        877
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:handlerName",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "handlerName",
      "signature": "handlerName (h HandlerFunc) string",
      "ground_truth": "func handlerName(h HandlerFunc) string {\n\tt := reflect.ValueOf(h).Type()\n\tif t.Kind() == reflect.Func {\n\t\treturn runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name()\n\t}\n\treturn t.String()\n}",
      "function_comment": "// GetPath returns RawPath, if it's empty returns Path from URL\n// Difference between RawPath and Path is:\n//   - Path is where request path is stored. Value is stored in decoded form: /%47%6f%2f becomes /Go/.",
      "function_statement": "// GetPath returns RawPath, if it's empty returns Path from URL\n// Difference between RawPath and Path is:\n//   - Path is where request path is stored. Value is stored in decoded form: /%47%6f%2f becomes /Go/.",
      "start_line": 966,
      "end_line": 972,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Type() Type {\n\tif v.flag != 0 \u0026\u0026 v.flag\u0026flagMethod == 0 {\n\t\treturn (*rtype)(noescape(unsafe.Pointer(v.typ_))) // inline of toRType(v.typ()), for own inlining in inline test\n\t}\n\treturn v.typeSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Func",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/runtime/symtab.go",
          "code_snippet": "func (f *Func) Name() string {\n\tif f == nil {\n\t\treturn \"\"\n\t}\n\tfn := f.raw()\n\tif fn.isInlined() { // inlined version\n\t\tfi := (*funcinl)(unsafe.Pointer(fn))\n\t\treturn funcNameForPrint(fi.name)\n\t}\n\treturn funcNameForPrint(funcname(f.funcInfo()))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/runtime/symtab.go",
          "code_snippet": "func FuncForPC(pc uintptr) *Func {\n\tf := findfunc(pc)\n\tif !f.valid() {\n\t\treturn nil\n\t}\n\t// This must interpret PC non-strictly so bad PCs (those between functions) don't crash the runtime.\n\t// We just report the preceding function in that situation. See issue 29735.\n\t// TODO: Perhaps we should report no function at all in that case.\n\t// The runtime currently doesn't have function end info, alas.\n\tu, uf := newInlineUnwinder(f, pc)\n\tif !u.isInlined(uf) {\n\t\treturn f._Func()\n\t}\n\tsf := u.srcFunc(uf)\n\tfile, line := u.fileLine(uf)\n\tfi := \u0026funcinl{\n\t\tones:      ^uint32(0),\n\t\tentry:     f.entry(), // entry of the real (the outermost) function.\n\t\tname:      sf.name(),\n\t\tfile:      file,\n\t\tline:      int32(line),\n\t\tstartLine: sf.startLine,\n\t}\n\treturn (*Func)(unsafe.Pointer(fi))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Pointer() uintptr {\n\t// The compiler loses track as it converts to uintptr. Force escape.\n\tescapes(v.ptr)\n\n\tk := v.kind()\n\tswitch k {\n\tcase Pointer:\n\t\tif !v.typ().Pointers() {\n\t\t\tval := *(*uintptr)(v.ptr)\n\t\t\t// Since it is a not-in-heap pointer, all pointers to the heap are\n\t\t\t// forbidden! See comment in Value.Elem and issue #48399.\n\t\t\tif !verifyNotInHeapPtr(val) {\n\t\t\t\tpanic(\"reflect: reflect.Value.Pointer on an invalid notinheap pointer\")\n\t\t\t}\n\t\t\treturn val\n\t\t}\n\t\tfallthrough\n\tcase Chan, Map, UnsafePointer:\n\t\treturn uintptr(v.pointer())\n\tcase Func:\n\t\tif v.flag\u0026flagMethod != 0 {\n\t\t\t// As the doc comment says, the returned pointer is an\n\t\t\t// underlying code pointer but not necessarily enough to\n\t\t\t// identify a single function uniquely. All method expressions\n\t\t\t// created via reflect have the same underlying code pointer,\n\t\t\t// so their Pointers are equal. The function used here must\n\t\t\t// match the one used in makeMethodValue.\n\t\t\treturn methodValueCallCodePtr()\n\t\t}\n\t\tp := v.pointer()\n\t\t// Non-nil func value points at data block.\n\t\t// First word of data block is actual code.\n\t\tif p != nil {\n\t\t\tp = *(*unsafe.Pointer)(p)\n\t\t}\n\t\treturn uintptr(p)\n\tcase Slice:\n\t\treturn uintptr((*unsafeheader.Slice)(v.ptr).Data)\n\tcase String:\n\t\treturn uintptr((*unsafeheader.String)(v.ptr).Data)\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Pointer\", v.kind()})\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        966,
        967,
        968,
        969,
        970
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:Next",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyBalancerWithNoTargets"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        }
      ],
      "name": "Next",
      "signature": "(b *randomBalancer) Next (c echo.Context) *ProxyTarget",
      "ground_truth": "func (b *randomBalancer) Next(c echo.Context) *ProxyTarget {\n\tb.mutex.Lock()\n\tdefer b.mutex.Unlock()\n\tif len(b.targets) == 0 {\n\t\treturn nil\n\t} else if len(b.targets) == 1 {\n\t\treturn b.targets[0]\n\t}\n\treturn b.targets[b.random.Intn(len(b.targets))]\n}",
      "function_comment": "// Next randomly returns an upstream target.\n//\n// Note: `nil` is returned in case upstream target list is empty.",
      "function_statement": "// Next randomly returns an upstream target.\n//\n// Note: `nil` is returned in case upstream target list is empty.",
      "start_line": 232,
      "end_line": 241,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "randomBalancer struct {\n\tcommonBalancer\n\trandom *rand.Rand\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "commonBalancer struct {\n\ttargets []*ProxyTarget\n\tmutex   sync.Mutex\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/math/rand/rand.go",
          "code_snippet": "func (r *Rand) Intn(n int) int {\n\tif n \u003c= 0 {\n\t\tpanic(\"invalid argument to Intn\")\n\t}\n\tif n \u003c= 1\u003c\u003c31-1 {\n\t\treturn int(r.Int31n(int32(n)))\n\t}\n\treturn int(r.Int63n(int64(n)))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        232,
        233,
        234,
        235,
        237,
        238,
        239
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:setIntField",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        }
      ],
      "name": "setIntField",
      "signature": "setIntField (value string, bitSize int, field reflect.Value) error",
      "ground_truth": "func setIntField(value string, bitSize int, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"0\"\n\t}\n\tintVal, err := strconv.ParseInt(value, 10, bitSize)\n\tif err == nil {\n\t\tfield.SetInt(intVal)\n\t}\n\treturn err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 400,
      "end_line": 409,
      "file_path": "./bind.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func ParseInt(s string, base int, bitSize int) (i int64, err error) {\n\tconst fnParseInt = \"ParseInt\"\n\n\tif s == \"\" {\n\t\treturn 0, syntaxError(fnParseInt, s)\n\t}\n\n\t// Pick off leading sign.\n\ts0 := s\n\tneg := false\n\tif s[0] == '+' {\n\t\ts = s[1:]\n\t} else if s[0] == '-' {\n\t\tneg = true\n\t\ts = s[1:]\n\t}\n\n\t// Convert unsigned and check range.\n\tvar un uint64\n\tun, err = ParseUint(s, base, bitSize)\n\tif err != nil \u0026\u0026 err.(*NumError).Err != ErrRange {\n\t\terr.(*NumError).Func = fnParseInt\n\t\terr.(*NumError).Num = stringslite.Clone(s0)\n\t\treturn 0, err\n\t}\n\n\tif bitSize == 0 {\n\t\tbitSize = IntSize\n\t}\n\n\tcutoff := uint64(1 \u003c\u003c uint(bitSize-1))\n\tif !neg \u0026\u0026 un \u003e= cutoff {\n\t\treturn int64(cutoff - 1), rangeError(fnParseInt, s0)\n\t}\n\tif neg \u0026\u0026 un \u003e cutoff {\n\t\treturn -int64(cutoff), rangeError(fnParseInt, s0)\n\t}\n\tn := int64(un)\n\tif neg {\n\t\tn = -n\n\t}\n\treturn n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) SetInt(x int64) {\n\tv.mustBeAssignable()\n\tswitch k := v.kind(); k {\n\tdefault:\n\t\tpanic(\u0026ValueError{\"reflect.Value.SetInt\", v.kind()})\n\tcase Int:\n\t\t*(*int)(v.ptr) = int(x)\n\tcase Int8:\n\t\t*(*int8)(v.ptr) = int8(x)\n\tcase Int16:\n\t\t*(*int16)(v.ptr) = int16(x)\n\tcase Int32:\n\t\t*(*int32)(v.ptr) = int32(x)\n\tcase Int64:\n\t\t*(*int64)(v.ptr) = x\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        400,
        401,
        404,
        405,
        406,
        407,
        408
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:MultipartForm",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        }
      ],
      "name": "MultipartForm",
      "signature": "(c *context) MultipartForm () (*multipart.Form, error)",
      "ground_truth": "func (c *context) MultipartForm() (*multipart.Form, error) {\n\terr := c.request.ParseMultipartForm(defaultMemory)\n\treturn c.request.MultipartForm, err\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 416,
      "end_line": 419,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "defaultMemory = 32 \u003c\u003c 20",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/mime/multipart/formdata.go",
          "code_snippet": "Form struct {\n\tValue map[string][]string\n\tFile  map[string][]*FileHeader\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) ParseMultipartForm(maxMemory int64) error {\n\tif r.MultipartForm == multipartByReader {\n\t\treturn errors.New(\"http: multipart handled by MultipartReader\")\n\t}\n\tvar parseFormErr error\n\tif r.Form == nil {\n\t\t// Let errors in ParseForm fall through, and just\n\t\t// return it at the end.\n\t\tparseFormErr = r.ParseForm()\n\t}\n\tif r.MultipartForm != nil {\n\t\treturn nil\n\t}\n\n\tmr, err := r.multipartReader(false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tf, err := mr.ReadForm(maxMemory)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif r.PostForm == nil {\n\t\tr.PostForm = make(url.Values)\n\t}\n\tfor k, v := range f.Value {\n\t\tr.Form[k] = append(r.Form[k], v...)\n\t\t// r.PostForm should also be populated. See Issue 9305.\n\t\tr.PostForm[k] = append(r.PostForm[k], v...)\n\t}\n\n\tr.MultipartForm = f\n\n\treturn parseFormErr\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        416,
        417,
        418,
        419
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Bool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        }
      ],
      "name": "Bool",
      "signature": "(b *ValueBinder) Bool (sourceParam string, dest *bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Bool(sourceParam string, dest *bool) *ValueBinder {\n\treturn b.boolValue(sourceParam, dest, false)\n}",
      "function_comment": "// Bool binds parameter to bool variable",
      "function_statement": "// Bool binds parameter to bool variable",
      "start_line": 900,
      "end_line": 902,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) boolValue(sourceParam string, dest *bool, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.bool(sourceParam, value, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        900,
        901,
        902
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Cookie",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        }
      ],
      "name": "Cookie",
      "signature": "(c *context) Cookie (name string) (*http.Cookie, error)",
      "ground_truth": "func (c *context) Cookie(name string) (*http.Cookie, error) {\n\treturn c.request.Cookie(name)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 421,
      "end_line": 423,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "Cookie struct {\n\tName   string\n\tValue  string\n\tQuoted bool // indicates whether the Value was originally quoted\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge\u003e0 means Max-Age attribute present and given in seconds\n\tMaxAge      int\n\tSecure      bool\n\tHttpOnly    bool\n\tSameSite    SameSite\n\tPartitioned bool\n\tRaw         string\n\tUnparsed    []string // Raw text of unparsed attribute-value pairs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Cookie(name string) (*Cookie, error) {\n\tif name == \"\" {\n\t\treturn nil, ErrNoCookie\n\t}\n\tfor _, c := range readCookies(r.Header, name) {\n\t\treturn c, nil\n\t}\n\treturn nil, ErrNoCookie\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        421,
        422,
        423
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/static.go:serveFile",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic_CustomFS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic"
        }
      ],
      "name": "serveFile",
      "signature": "serveFile (c echo.Context, file http.File, info os.FileInfo) error",
      "ground_truth": "func serveFile(c echo.Context, file http.File, info os.FileInfo) error {\n\thttp.ServeContent(c.Response(), c.Request(), info.Name(), info.ModTime(), file)\n\treturn nil\n}",
      "function_comment": "// StaticWithConfig returns a Static middleware with config.",
      "function_statement": "// StaticWithConfig returns a Static middleware with config.",
      "start_line": 243,
      "end_line": 246,
      "file_path": "./middleware/static.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "File interface {\n\tio.Closer\n\tio.Reader\n\tio.Seeker\n\tReaddir(count int) ([]fs.FileInfo, error)\n\tStat() (fs.FileInfo, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/os/types.go",
          "code_snippet": "FileInfo = fs.FileInfo",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker) {\n\tsizeFunc := func() (int64, error) {\n\t\tsize, err := content.Seek(0, io.SeekEnd)\n\t\tif err != nil {\n\t\t\treturn 0, errSeeker\n\t\t}\n\t\t_, err = content.Seek(0, io.SeekStart)\n\t\tif err != nil {\n\t\t\treturn 0, errSeeker\n\t\t}\n\t\treturn size, nil\n\t}\n\tserveContent(w, req, name, modtime, sizeFunc, content)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FileInfo interface {\n\tName() string       // base name of the file\n\tSize() int64        // length in bytes for regular files; system-dependent for others\n\tMode() FileMode     // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool        // abbreviation for Mode().IsDir()\n\tSys() any           // underlying data source (can return nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        243,
        244,
        245,
        246
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Bools",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        }
      ],
      "name": "Bools",
      "signature": "(b *ValueBinder) Bools (sourceParam string, dest *[]bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Bools(sourceParam string, dest *[]bool) *ValueBinder {\n\treturn b.boolsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Bools binds parameter values to slice of bool variables",
      "function_statement": "// Bools binds parameter values to slice of bool variables",
      "start_line": 965,
      "end_line": 967,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) boolsValue(sourceParam string, dest *[]bool, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.bools(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        965,
        966,
        967
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:CONNECT",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        }
      ],
      "name": "CONNECT",
      "signature": "(e *Echo) CONNECT (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) CONNECT(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodConnect, path, h, m...)\n}",
      "function_comment": "// CONNECT registers a new CONNECT route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// CONNECT registers a new CONNECT route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 478,
      "end_line": 480,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodConnect = \"CONNECT\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        478,
        479,
        480
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:Add",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "Add",
      "signature": "(g *Group) Add (method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
      "function_comment": "// Add implements `Echo#Add()` for sub-routes within the Group.",
      "function_statement": "// Add implements `Echo#Add()` for sub-routes within the Group.",
      "start_line": 121,
      "end_line": 129,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) add(host, method, path string, handler HandlerFunc, middlewares ...MiddlewareFunc) *Route {\n\trouter := e.findRouter(host)\n\t//FIXME: when handler+middleware are both nil ... make it behave like handler removal\n\tname := handlerName(handler)\n\troute := router.add(method, path, name, func(c Context) error {\n\t\th := applyMiddleware(handler, middlewares...)\n\t\treturn h(c)\n\t})\n\n\tif e.OnAddRouteHandler != nil {\n\t\te.OnAddRouteHandler(host, *route, handler, middlewares)\n\t}\n\n\treturn route\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rate_limiter.go:NewRateLimiterMemoryStore",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipperNoSkip"
        }
      ],
      "name": "NewRateLimiterMemoryStore",
      "signature": "NewRateLimiterMemoryStore (rate rate.Limit) (store *RateLimiterMemoryStore)",
      "ground_truth": "func NewRateLimiterMemoryStore(rate rate.Limit) (store *RateLimiterMemoryStore) {\n\treturn NewRateLimiterMemoryStoreWithConfig(RateLimiterMemoryStoreConfig{\n\t\tRate: rate,\n\t})\n}",
      "function_comment": "/*\nNewRateLimiterMemoryStore returns an instance of RateLimiterMemoryStore with\nthe provided rate (as req/s).\nfor more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\nBurst and ExpiresIn will be set to default values.\n\nNote that if the provided rate is a float number and Burst is zero, Burst will be treated as the rounded down value of the rate.\n\nExample (with 20 requests/sec):\n\n\tlimiterStore := middleware.NewRateLimiterMemoryStore(20)\n*/",
      "function_statement": "/*\nNewRateLimiterMemoryStore returns an instance of RateLimiterMemoryStore with\nthe provided rate (as req/s).\nfor more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\nBurst and ExpiresIn will be set to default values.\n\nNote that if the provided rate is a float number and Burst is zero, Burst will be treated as the rounded down value of the rate.\n\nExample (with 20 requests/sec):\n\n\tlimiterStore := middleware.NewRateLimiterMemoryStore(20)\n*/",
      "start_line": 183,
      "end_line": 187,
      "file_path": "./middleware/rate_limiter.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterMemoryStore struct {\n\tvisitors map[string]*Visitor\n\tmutex    sync.Mutex\n\trate     rate.Limit // for more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\n\tburst       int\n\texpiresIn   time.Duration\n\tlastCleanup time.Time\n\n\ttimeNow func() time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "func NewRateLimiterMemoryStoreWithConfig(config RateLimiterMemoryStoreConfig) (store *RateLimiterMemoryStore) {\n\tstore = \u0026RateLimiterMemoryStore{}\n\n\tstore.rate = config.Rate\n\tstore.burst = config.Burst\n\tstore.expiresIn = config.ExpiresIn\n\tif config.ExpiresIn == 0 {\n\t\tstore.expiresIn = DefaultRateLimiterMemoryStoreConfig.ExpiresIn\n\t}\n\tif config.Burst == 0 {\n\t\tstore.burst = int(config.Rate)\n\t}\n\tstore.visitors = make(map[string]*Visitor)\n\tstore.timeNow = time.Now\n\tstore.lastCleanup = store.timeNow()\n\treturn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterMemoryStoreConfig struct {\n\tRate      rate.Limit    // Rate of requests allowed to pass as req/s. For more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\tBurst     int           // Burst is maximum number of requests to pass at the same moment. It additionally allows a number of requests to pass when rate limit is reached.\n\tExpiresIn time.Duration // ExpiresIn is the duration after that a rate limiter is cleaned up\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/time@v0.12.0/rate/rate.go",
          "code_snippet": "Limit float64",
          "ref_module": "rate"
        }
      ],
      "covered_lines": [
        183,
        184,
        185,
        186,
        187
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:BindPathParams",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        }
      ],
      "name": "BindPathParams",
      "signature": "(b *DefaultBinder) BindPathParams (c Context, i interface{}) error",
      "ground_truth": "func (b *DefaultBinder) BindPathParams(c Context, i interface{}) error {\n\tnames := c.ParamNames()\n\tvalues := c.ParamValues()\n\tparams := map[string][]string{}\n\tfor i, name := range names {\n\t\tparams[name] = []string{values[i]}\n\t}\n\tif err := b.bindData(i, params, \"param\", nil); err != nil {\n\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t}\n\treturn nil\n}",
      "function_comment": "// BindPathParams binds path params to bindable object\n//\n// Time format support: time.Time fields can use `format` tags to specify custom parsing layouts.\n// Example: `param:\"created\" format:\"2006-01-02T15:04\"` for datetime-local format\n// Example: `param:\"date\" format:\"2006-01-02\"` for date format\n// Uses Go's standard time format reference time: Mon Jan 2 15:04:05 MST 2006\n// Works with form data, query parameters, and path parameters (not JSON body)\n// Falls back to default time.Time parsing if no format tag is specified",
      "function_statement": "// BindPathParams binds path params to bindable object\n//\n// Time format support: time.Time fields can use `format` tags to specify custom parsing layouts.\n// Example: `param:\"created\" format:\"2006-01-02T15:04\"` for datetime-local format\n// Example: `param:\"date\" format:\"2006-01-02\"` for date format\n// Uses Go's standard time format reference time: Mon Jan 2 15:04:05 MST 2006\n// Works with form data, query parameters, and path parameters (not JSON body)\n// Falls back to default time.Time parsing if no format tag is specified",
      "start_line": 50,
      "end_line": 61,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) bindData(destination interface{}, data map[string][]string, tag string, dataFiles map[string][]*multipart.FileHeader) error {\n\tif destination == nil || (len(data) == 0 \u0026\u0026 len(dataFiles) == 0) {\n\t\treturn nil\n\t}\n\thasFiles := len(dataFiles) \u003e 0\n\ttyp := reflect.TypeOf(destination).Elem()\n\tval := reflect.ValueOf(destination).Elem()\n\n\t// Support binding to limited Map destinations:\n\t// - map[string][]string,\n\t// - map[string]string \u003c-- (binds first value from data slice)\n\t// - map[string]interface{}\n\t// You are better off binding to struct but there are user who want this map feature. Source of data for these cases are:\n\t// params,query,header,form as these sources produce string values, most of the time slice of strings, actually.\n\tif typ.Kind() == reflect.Map \u0026\u0026 typ.Key().Kind() == reflect.String {\n\t\tk := typ.Elem().Kind()\n\t\tisElemInterface := k == reflect.Interface\n\t\tisElemString := k == reflect.String\n\t\tisElemSliceOfStrings := k == reflect.Slice \u0026\u0026 typ.Elem().Elem().Kind() == reflect.String\n\t\tif !(isElemSliceOfStrings || isElemString || isElemInterface) {\n\t\t\treturn nil\n\t\t}\n\t\tif val.IsNil() {\n\t\t\tval.Set(reflect.MakeMap(typ))\n\t\t}\n\t\tfor k, v := range data {\n\t\t\tif isElemString {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else if isElemInterface {\n\t\t\t\t// To maintain backward compatibility, we always bind to the first string value\n\t\t\t\t// and not the slice of strings when dealing with map[string]interface{}{}\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v))\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\t// !struct\n\tif typ.Kind() != reflect.Struct {\n\t\tif tag == \"param\" || tag == \"query\" || tag == \"header\" {\n\t\t\t// incompatible type, data is probably to be found in the body\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"binding element must be a struct\")\n\t}\n\n\tfor i := 0; i \u003c typ.NumField(); i++ { // iterate over all destination fields\n\t\ttypeField := typ.Field(i)\n\t\tstructField := val.Field(i)\n\t\tif typeField.Anonymous {\n\t\t\tif structField.Kind() == reflect.Ptr {\n\t\t\t\tstructField = structField.Elem()\n\t\t\t}\n\t\t}\n\t\tif !structField.CanSet() {\n\t\t\tcontinue\n\t\t}\n\t\tstructFieldKind := structField.Kind()\n\t\tinputFieldName := typeField.Tag.Get(tag)\n\t\tif typeField.Anonymous \u0026\u0026 structFieldKind == reflect.Struct \u0026\u0026 inputFieldName != \"\" {\n\t\t\t// if anonymous struct with query/param/form tags, report an error\n\t\t\treturn errors.New(\"query/param/form tags are not allowed with anonymous struct field\")\n\t\t}\n\n\t\tif inputFieldName == \"\" {\n\t\t\t// If tag is nil, we inspect if the field is a not BindUnmarshaler struct and try to bind data into it (might contain fields with tags).\n\t\t\t// structs that implement BindUnmarshaler are bound only when they have explicit tag\n\t\t\tif _, ok := structField.Addr().Interface().(BindUnmarshaler); !ok \u0026\u0026 structFieldKind == reflect.Struct {\n\t\t\t\tif err := b.bindData(structField.Addr().Interface(), data, tag, dataFiles); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\t// does not have explicit tag and is not an ordinary struct - so move to next field\n\t\t\tcontinue\n\t\t}\n\n\t\tif hasFiles {\n\t\t\tif ok, err := isFieldMultipartFile(structField.Type()); err != nil {\n\t\t\t\treturn err\n\t\t\t} else if ok {\n\t\t\t\tif ok := setMultipartFileHeaderTypes(structField, inputFieldName, dataFiles); ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinputValue, exists := data[inputFieldName]\n\t\tif !exists {\n\t\t\t// Go json.Unmarshal supports case-insensitive binding.  However the\n\t\t\t// url params are bound case-sensitive which is inconsistent.  To\n\t\t\t// fix this we must check all of the map values in a\n\t\t\t// case-insensitive search.\n\t\t\tfor k, v := range data {\n\t\t\t\tif strings.EqualFold(k, inputFieldName) {\n\t\t\t\t\tinputValue = v\n\t\t\t\t\texists = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\n\t\t// NOTE: algorithm here is not particularly sophisticated. It probably does not work with absurd types like `**[]*int`\n\t\t// but it is smart enough to handle niche cases like `*int`,`*[]string`,`[]*int` .\n\n\t\t// try unmarshalling first, in case we're dealing with an alias to an array type\n\t\tif ok, err := unmarshalInputsToField(typeField.Type.Kind(), inputValue, structField); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tformatTag := typeField.Tag.Get(\"format\")\n\t\tif ok, err := unmarshalInputToField(typeField.Type.Kind(), inputValue[0], structField, formatTag); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// we could be dealing with pointer to slice `*[]string` so dereference it. There are weird OpenAPI generators\n\t\t// that could create struct fields like that.\n\t\tif structFieldKind == reflect.Pointer {\n\t\t\tstructFieldKind = structField.Elem().Kind()\n\t\t\tstructField = structField.Elem()\n\t\t}\n\n\t\tif structFieldKind == reflect.Slice {\n\t\t\tsliceOf := structField.Type().Elem().Kind()\n\t\t\tnumElems := len(inputValue)\n\t\t\tslice := reflect.MakeSlice(structField.Type(), numElems, numElems)\n\t\t\tfor j := 0; j \u003c numElems; j++ {\n\t\t\t\tif err := setWithProperType(sliceOf, inputValue[j], slice.Index(j)); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tstructField.Set(slice)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := setWithProperType(structFieldKind, inputValue[0], structField); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        60
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustDuration",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        }
      ],
      "name": "MustDuration",
      "signature": "(b *ValueBinder) MustDuration (sourceParam string, dest *time.Duration) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustDuration(sourceParam string, dest *time.Duration) *ValueBinder {\n\treturn b.duration(sourceParam, dest, true)\n}",
      "function_comment": "// MustDuration requires parameter value to exist to bind to time.Duration variable. Returns error when value does not exist",
      "function_statement": "// MustDuration requires parameter value to exist to bind to time.Duration variable. Returns error when value does not exist",
      "start_line": 1167,
      "end_line": 1169,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) duration(sourceParam string, dest *time.Duration, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tt, err := time.ParseDuration(value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Duration\", err))\n\t\treturn b\n\t}\n\t*dest = t\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1167,
        1168,
        1169
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:UnixTime",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        }
      ],
      "name": "UnixTime",
      "signature": "(b *ValueBinder) UnixTime (sourceParam string, dest *time.Time) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) UnixTime(sourceParam string, dest *time.Time) *ValueBinder {\n\treturn b.unixTime(sourceParam, dest, false, time.Second)\n}",
      "function_comment": "// UnixTime binds parameter to time.Time variable (in local Time corresponding to the given Unix time).\n//\n// Example: 1609180603 bind to 2020-12-28T18:36:43.000000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "function_statement": "// UnixTime binds parameter to time.Time variable (in local Time corresponding to the given Unix time).\n//\n// Example: 1609180603 bind to 2020-12-28T18:36:43.000000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "start_line": 1242,
      "end_line": 1244,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Second               = 1000 * Millisecond",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1242,
        1243,
        1244
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:QueryParams",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "QueryParams",
      "signature": "(c *context) QueryParams () url.Values",
      "ground_truth": "func (c *context) QueryParams() url.Values {\n\tif c.query == nil {\n\t\tc.query = c.request.URL.Query()\n\t}\n\treturn c.query\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 379,
      "end_line": 384,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "Values map[string][]string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func (u *URL) Query() Values {\n\tv, _ := ParseQuery(u.RawQuery)\n\treturn v\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        379,
        380,
        381,
        382,
        383
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:BindError",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "BindError",
      "signature": "(b *ValueBinder) BindError () error",
      "ground_truth": "func (b *ValueBinder) BindError() error {\n\tif b.errors == nil {\n\t\treturn nil\n\t}\n\terr := b.errors[0]\n\tb.errors = nil // reset errors so next chain will start from zero\n\treturn err\n}",
      "function_comment": "// BindError returns first seen bind error and resets/empties binder errors for further calls",
      "function_statement": "// BindError returns first seen bind error and resets/empties binder errors for further calls",
      "start_line": 190,
      "end_line": 197,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        190,
        191,
        192,
        193,
        194,
        195,
        196
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/slash.go:AddTrailingSlash",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlash"
        }
      ],
      "name": "AddTrailingSlash",
      "signature": "AddTrailingSlash () echo.MiddlewareFunc",
      "ground_truth": "func AddTrailingSlash() echo.MiddlewareFunc {\n\treturn AddTrailingSlashWithConfig(DefaultTrailingSlashConfig)\n}",
      "function_comment": "// AddTrailingSlash returns a root level (before router) middleware which adds a\n// trailing slash to the request `URL#Path`.\n//\n// Usage `Echo#Pre(AddTrailingSlash())`",
      "function_statement": "// AddTrailingSlash returns a root level (before router) middleware which adds a\n// trailing slash to the request `URL#Path`.\n//\n// Usage `Echo#Pre(AddTrailingSlash())`",
      "start_line": 31,
      "end_line": 33,
      "file_path": "./middleware/slash.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "func AddTrailingSlashWithConfig(config TrailingSlashConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultTrailingSlashConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\turl := req.URL\n\t\t\tpath := url.Path\n\t\t\tqs := c.QueryString()\n\t\t\tif !strings.HasSuffix(path, \"/\") {\n\t\t\t\tpath += \"/\"\n\t\t\t\turi := path\n\t\t\t\tif qs != \"\" {\n\t\t\t\t\turi += \"?\" + qs\n\t\t\t\t}\n\n\t\t\t\t// Redirect\n\t\t\t\tif config.RedirectCode != 0 {\n\t\t\t\t\treturn c.Redirect(config.RedirectCode, sanitizeURI(uri))\n\t\t\t\t}\n\n\t\t\t\t// Forward\n\t\t\t\treq.RequestURI = uri\n\t\t\t\turl.Path = path\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "DefaultTrailingSlashConfig = TrailingSlashConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        31,
        32,
        33
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/static_other.go:isIgnorableOpenFileError",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic_CustomFS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic"
        }
      ],
      "name": "isIgnorableOpenFileError",
      "signature": "isIgnorableOpenFileError (err error) bool",
      "ground_truth": "func isIgnorableOpenFileError(err error) bool {\n\treturn os.IsNotExist(err)\n}",
      "function_comment": "// We ignore these errors as there could be handler that matches request path.",
      "function_statement": "// We ignore these errors as there could be handler that matches request path.",
      "start_line": 13,
      "end_line": 15,
      "file_path": "./middleware/static_other.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/os/error.go",
          "code_snippet": "func IsNotExist(err error) bool {\n\treturn underlyingErrorIs(err, ErrNotExist)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        13,
        14,
        15
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:GET",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "GET",
      "signature": "(g *Group) GET (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) GET(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodGet, path, h, m...)\n}",
      "function_comment": "// GET implements `Echo#GET()` for sub-routes within the Group.",
      "function_statement": "// GET implements `Echo#GET()` for sub-routes within the Group.",
      "start_line": 46,
      "end_line": 48,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        46,
        47,
        48
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Strings",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        }
      ],
      "name": "Strings",
      "signature": "(b *ValueBinder) Strings (sourceParam string, dest *[]string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Strings(sourceParam string, dest *[]string) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValuesFunc(sourceParam)\n\tif value == nil {\n\t\treturn b\n\t}\n\t*dest = value\n\treturn b\n}",
      "function_comment": "// Strings binds parameter values to slice of string",
      "function_statement": "// Strings binds parameter values to slice of string",
      "start_line": 267,
      "end_line": 278,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        267,
        268,
        269,
        270,
        272,
        273,
        274,
        275,
        276,
        277
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustFloat64",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        }
      ],
      "name": "MustFloat64",
      "signature": "(b *ValueBinder) MustFloat64 (sourceParam string, dest *float64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustFloat64(sourceParam string, dest *float64) *ValueBinder {\n\treturn b.floatValue(sourceParam, dest, 64, true)\n}",
      "function_comment": "// MustFloat64 requires parameter value to exist to bind to float64 variable. Returns error when value does not exist",
      "function_statement": "// MustFloat64 requires parameter value to exist to bind to float64 variable. Returns error when value does not exist",
      "start_line": 980,
      "end_line": 982,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.float(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        980,
        981,
        982
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:isHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "isHandler",
      "signature": "(m *routeMethods) isHandler () bool",
      "ground_truth": "func (m *routeMethods) isHandler() bool {\n\treturn m.connect != nil ||\n\t\tm.delete != nil ||\n\t\tm.get != nil ||\n\t\tm.head != nil ||\n\t\tm.options != nil ||\n\t\tm.patch != nil ||\n\t\tm.post != nil ||\n\t\tm.propfind != nil ||\n\t\tm.put != nil ||\n\t\tm.trace != nil ||\n\t\tm.report != nil ||\n\t\tlen(m.anyOther) != 0\n\t// RouteNotFound/404 is not considered as a handler\n}",
      "function_comment": "// Router is the registry of all registered routes for an `Echo` instance for",
      "function_statement": "// Router is the registry of all registered routes for an `Echo` instance for",
      "start_line": 73,
      "end_line": 87,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:GetPath",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "GetPath",
      "signature": "GetPath (r *http.Request) string",
      "ground_truth": "func GetPath(r *http.Request) string {\n\tpath := r.URL.RawPath\n\tif path == \"\" {\n\t\tpath = r.URL.Path\n\t}\n\treturn path\n}",
      "function_comment": "// GetPath returns RawPath, if it's empty returns Path from URL\n// Difference between RawPath and Path is:\n//   - Path is where request path is stored. Value is stored in decoded form: /%47%6f%2f becomes /Go/.\n//   - RawPath is an optional field which only gets set if the default encoding is different from Path.",
      "function_statement": "// GetPath returns RawPath, if it's empty returns Path from URL\n// Difference between RawPath and Path is:\n//   - Path is where request path is stored. Value is stored in decoded form: /%47%6f%2f becomes /Go/.\n//   - RawPath is an optional field which only gets set if the default encoding is different from Path.",
      "start_line": 949,
      "end_line": 955,
      "file_path": "./echo.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        949,
        950,
        951,
        952,
        953,
        954
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:StartAutoTLS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        }
      ],
      "name": "StartAutoTLS",
      "signature": "(e *Echo) StartAutoTLS (address string) error",
      "ground_truth": "func (e *Echo) StartAutoTLS(address string) error {\n\te.startupMutex.Lock()\n\ts := e.TLSServer\n\ts.TLSConfig = new(tls.Config)\n\ts.TLSConfig.GetCertificate = e.AutoTLSManager.GetCertificate\n\ts.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, acme.ALPNProto)\n\n\te.configureTLS(address)\n\tif err := e.configureServer(s); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn err\n\t}\n\te.startupMutex.Unlock()\n\treturn s.Serve(e.TLSListener)\n}",
      "function_comment": "// StartAutoTLS starts an HTTPS server using certificates automatically installed from https://letsencrypt.org.",
      "function_statement": "// StartAutoTLS starts an HTTPS server using certificates automatically installed from https://letsencrypt.org.",
      "start_line": 734,
      "end_line": 748,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) configureTLS(address string) {\n\ts := e.TLSServer\n\ts.Addr = address\n\tif !e.DisableHTTP2 {\n\t\ts.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, \"h2\")\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) configureServer(s *http.Server) error {\n\t// Setup\n\te.colorer.SetOutput(e.Logger.Output())\n\ts.ErrorLog = e.StdLogger\n\ts.Handler = e\n\tif e.Debug {\n\t\te.Logger.SetLevel(log.DEBUG)\n\t}\n\n\tif !e.HideBanner {\n\t\te.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n\t}\n\n\tif s.TLSConfig == nil {\n\t\tif e.Listener == nil {\n\t\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\te.Listener = l\n\t\t}\n\t\tif !e.HidePort {\n\t\t\te.colorer.Printf(\"⇨ http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n\t\t}\n\t\treturn nil\n\t}\n\tif e.TLSListener == nil {\n\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.TLSListener = tls.NewListener(l, s.TLSConfig)\n\t}\n\tif !e.HidePort {\n\t\te.colorer.Printf(\"⇨ https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/common.go",
          "code_snippet": "Config struct {\n\t// Rand provides the source of entropy for nonces and RSA blinding.\n\t// If Rand is nil, TLS uses the cryptographic random reader in package\n\t// crypto/rand.\n\t// The Reader must be safe for use by multiple goroutines.\n\tRand io.Reader\n\n\t// Time returns the current time as the number of seconds since the epoch.\n\t// If Time is nil, TLS uses time.Now.\n\tTime func() time.Time\n\n\t// Certificates contains one or more certificate chains to present to the\n\t// other side of the connection. The first certificate compatible with the\n\t// peer's requirements is selected automatically.\n\t//\n\t// Server configurations must set one of Certificates, GetCertificate or\n\t// GetConfigForClient. Clients doing client-authentication may set either\n\t// Certificates or GetClientCertificate.\n\t//\n\t// Note: if there are multiple Certificates, and they don't have the\n\t// optional field Leaf set, certificate selection will incur a significant\n\t// per-handshake performance cost.\n\tCertificates []Certificate\n\n\t// NameToCertificate maps from a certificate name to an element of\n\t// Certificates. Note that a certificate name can be of the form\n\t// '*.example.com' and so doesn't have to be a domain name as such.\n\t//\n\t// Deprecated: NameToCertificate only allows associating a single\n\t// certificate with a given name. Leave this field nil to let the library\n\t// select the first compatible chain from Certificates.\n\tNameToCertificate map[string]*Certificate\n\n\t// GetCertificate returns a Certificate based on the given\n\t// ClientHelloInfo. It will only be called if the client supplies SNI\n\t// information or if Certificates is empty.\n\t//\n\t// If GetCertificate is nil or returns nil, then the certificate is\n\t// retrieved from NameToCertificate. If NameToCertificate is nil, the\n\t// best element of Certificates will be used.\n\t//\n\t// Once a Certificate is returned it should not be modified.\n\tGetCertificate func(*ClientHelloInfo) (*Certificate, error)\n\n\t// GetClientCertificate, if not nil, is called when a server requests a\n\t// certificate from a client. If set, the contents of Certificates will\n\t// be ignored.\n\t//\n\t// If GetClientCertificate returns an error, the handshake will be\n\t// aborted and that error will be returned. Otherwise\n\t// GetClientCertificate must return a non-nil Certificate. If\n\t// Certificate.Certificate is empty then no certificate will be sent to\n\t// the server. If this is unacceptable to the server then it may abort\n\t// the handshake.\n\t//\n\t// GetClientCertificate may be called multiple times for the same\n\t// connection if renegotiation occurs or if TLS 1.3 is in use.\n\t//\n\t// Once a Certificate is returned it should not be modified.\n\tGetClientCertificate func(*CertificateRequestInfo) (*Certificate, error)\n\n\t// GetConfigForClient, if not nil, is called after a ClientHello is\n\t// received from a client. It may return a non-nil Config in order to\n\t// change the Config that will be used to handle this connection. If\n\t// the returned Config is nil, the original Config will be used. The\n\t// Config returned by this callback may not be subsequently modified.\n\t//\n\t// If GetConfigForClient is nil, the Config passed to Server() will be\n\t// used for all connections.\n\t//\n\t// If SessionTicketKey was explicitly set on the returned Config, or if\n\t// SetSessionTicketKeys was called on the returned Config, those keys will\n\t// be used. Otherwise, the original Config keys will be used (and possibly\n\t// rotated if they are automatically managed).\n\tGetConfigForClient func(*ClientHelloInfo) (*Config, error)\n\n\t// VerifyPeerCertificate, if not nil, is called after normal\n\t// certificate verification by either a TLS client or server. It\n\t// receives the raw ASN.1 certificates provided by the peer and also\n\t// any verified chains that normal processing found. If it returns a\n\t// non-nil error, the handshake is aborted and that error results.\n\t//\n\t// If normal verification fails then the handshake will abort before\n\t// considering this callback. If normal verification is disabled (on the\n\t// client when InsecureSkipVerify is set, or on a server when ClientAuth is\n\t// RequestClientCert or RequireAnyClientCert), then this callback will be\n\t// considered but the verifiedChains argument will always be nil. When\n\t// ClientAuth is NoClientCert, this callback is not called on the server.\n\t// rawCerts may be empty on the server if ClientAuth is RequestClientCert or\n\t// VerifyClientCertIfGiven.\n\t//\n\t// This callback is not invoked on resumed connections, as certificates are\n\t// not re-verified on resumption.\n\t//\n\t// verifiedChains and its contents should not be modified.\n\tVerifyPeerCertificate func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error\n\n\t// VerifyConnection, if not nil, is called after normal certificate\n\t// verification and after VerifyPeerCertificate by either a TLS client\n\t// or server. If it returns a non-nil error, the handshake is aborted\n\t// and that error results.\n\t//\n\t// If normal verification fails then the handshake will abort before\n\t// considering this callback. This callback will run for all connections,\n\t// including resumptions, regardless of InsecureSkipVerify or ClientAuth\n\t// settings.\n\tVerifyConnection func(ConnectionState) error\n\n\t// RootCAs defines the set of root certificate authorities\n\t// that clients use when verifying server certificates.\n\t// If RootCAs is nil, TLS uses the host's root CA set.\n\tRootCAs *x509.CertPool\n\n\t// NextProtos is a list of supported application level protocols, in\n\t// order of preference. If both peers support ALPN, the selected\n\t// protocol will be one from this list, and the connection will fail\n\t// if there is no mutually supported protocol. If NextProtos is empty\n\t// or the peer doesn't support ALPN, the connection will succeed and\n\t// ConnectionState.NegotiatedProtocol will be empty.\n\tNextProtos []string\n\n\t// ServerName is used to verify the hostname on the returned\n\t// certificates unless InsecureSkipVerify is given. It is also included\n\t// in the client's handshake to support virtual hosting unless it is\n\t// an IP address.\n\tServerName string\n\n\t// ClientAuth determines the server's policy for\n\t// TLS Client Authentication. The default is NoClientCert.\n\tClientAuth ClientAuthType\n\n\t// ClientCAs defines the set of root certificate authorities\n\t// that servers use if required to verify a client certificate\n\t// by the policy in ClientAuth.\n\tClientCAs *x509.CertPool\n\n\t// InsecureSkipVerify controls whether a client verifies the server's\n\t// certificate chain and host name. If InsecureSkipVerify is true, crypto/tls\n\t// accepts any certificate presented by the server and any host name in that\n\t// certificate. In this mode, TLS is susceptible to machine-in-the-middle\n\t// attacks unless custom verification is used. This should be used only for\n\t// testing or in combination with VerifyConnection or VerifyPeerCertificate.\n\tInsecureSkipVerify bool\n\n\t// CipherSuites is a list of enabled TLS 1.0–1.2 cipher suites. The order of\n\t// the list is ignored. Note that TLS 1.3 ciphersuites are not configurable.\n\t//\n\t// If CipherSuites is nil, a safe default list is used. The default cipher\n\t// suites might change over time. In Go 1.22 RSA key exchange based cipher\n\t// suites were removed from the default list, but can be re-added with the\n\t// GODEBUG setting tlsrsakex=1. In Go 1.23 3DES cipher suites were removed\n\t// from the default list, but can be re-added with the GODEBUG setting\n\t// tls3des=1.\n\tCipherSuites []uint16\n\n\t// PreferServerCipherSuites is a legacy field and has no effect.\n\t//\n\t// It used to control whether the server would follow the client's or the\n\t// server's preference. Servers now select the best mutually supported\n\t// cipher suite based on logic that takes into account inferred client\n\t// hardware, server hardware, and security.\n\t//\n\t// Deprecated: PreferServerCipherSuites is ignored.\n\tPreferServerCipherSuites bool\n\n\t// SessionTicketsDisabled may be set to true to disable session ticket and\n\t// PSK (resumption) support. Note that on clients, session ticket support is\n\t// also disabled if ClientSessionCache is nil.\n\tSessionTicketsDisabled bool\n\n\t// SessionTicketKey is used by TLS servers to provide session resumption.\n\t// See RFC 5077 and the PSK mode of RFC 8446. If zero, it will be filled\n\t// with random data before the first server handshake.\n\t//\n\t// Deprecated: if this field is left at zero, session ticket keys will be\n\t// automatically rotated every day and dropped after seven days. For\n\t// customizing the rotation schedule or synchronizing servers that are\n\t// terminating connections for the same host, use SetSessionTicketKeys.\n\tSessionTicketKey [32]byte\n\n\t// ClientSessionCache is a cache of ClientSessionState entries for TLS\n\t// session resumption. It is only used by clients.\n\tClientSessionCache ClientSessionCache\n\n\t// UnwrapSession is called on the server to turn a ticket/identity\n\t// previously produced by [WrapSession] into a usable session.\n\t//\n\t// UnwrapSession will usually either decrypt a session state in the ticket\n\t// (for example with [Config.EncryptTicket]), or use the ticket as a handle\n\t// to recover a previously stored state. It must use [ParseSessionState] to\n\t// deserialize the session state.\n\t//\n\t// If UnwrapSession returns an error, the connection is terminated. If it\n\t// returns (nil, nil), the session is ignored. crypto/tls may still choose\n\t// not to resume the returned session.\n\tUnwrapSession func(identity []byte, cs ConnectionState) (*SessionState, error)\n\n\t// WrapSession is called on the server to produce a session ticket/identity.\n\t//\n\t// WrapSession must serialize the session state with [SessionState.Bytes].\n\t// It may then encrypt the serialized state (for example with\n\t// [Config.DecryptTicket]) and use it as the ticket, or store the state and\n\t// return a handle for it.\n\t//\n\t// If WrapSession returns an error, the connection is terminated.\n\t//\n\t// Warning: the return value will be exposed on the wire and to clients in\n\t// plaintext. The application is in charge of encrypting and authenticating\n\t// it (and rotating keys) or returning high-entropy identifiers. Failing to\n\t// do so correctly can compromise current, previous, and future connections\n\t// depending on the protocol version.\n\tWrapSession func(ConnectionState, *SessionState) ([]byte, error)\n\n\t// MinVersion contains the minimum TLS version that is acceptable.\n\t//\n\t// By default, TLS 1.2 is currently used as the minimum. TLS 1.0 is the\n\t// minimum supported by this package.\n\t//\n\t// The server-side default can be reverted to TLS 1.0 by including the value\n\t// \"tls10server=1\" in the GODEBUG environment variable.\n\tMinVersion uint16\n\n\t// MaxVersion contains the maximum TLS version that is acceptable.\n\t//\n\t// By default, the maximum version supported by this package is used,\n\t// which is currently TLS 1.3.\n\tMaxVersion uint16\n\n\t// CurvePreferences contains the elliptic curves that will be used in\n\t// an ECDHE handshake, in preference order. If empty, the default will\n\t// be used. The client will use the first preference as the type for\n\t// its key share in TLS 1.3. This may change in the future.\n\t//\n\t// From Go 1.23, the default includes the X25519Kyber768Draft00 hybrid\n\t// post-quantum key exchange. To disable it, set CurvePreferences explicitly\n\t// or use the GODEBUG=tlskyber=0 environment variable.\n\tCurvePreferences []CurveID\n\n\t// DynamicRecordSizingDisabled disables adaptive sizing of TLS records.\n\t// When true, the largest possible TLS record size is always used. When\n\t// false, the size of TLS records may be adjusted in an attempt to\n\t// improve latency.\n\tDynamicRecordSizingDisabled bool\n\n\t// Renegotiation controls what types of renegotiation are supported.\n\t// The default, none, is correct for the vast majority of applications.\n\tRenegotiation RenegotiationSupport\n\n\t// KeyLogWriter optionally specifies a destination for TLS master secrets\n\t// in NSS key log format that can be used to allow external programs\n\t// such as Wireshark to decrypt TLS connections.\n\t// See https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format.\n\t// Use of KeyLogWriter compromises security and should only be\n\t// used for debugging.\n\tKeyLogWriter io.Writer\n\n\t// EncryptedClientHelloConfigList is a serialized ECHConfigList. If\n\t// provided, clients will attempt to connect to servers using Encrypted\n\t// Client Hello (ECH) using one of the provided ECHConfigs. Servers\n\t// currently ignore this field.\n\t//\n\t// If the list contains no valid ECH configs, the handshake will fail\n\t// and return an error.\n\t//\n\t// If EncryptedClientHelloConfigList is set, MinVersion, if set, must\n\t// be VersionTLS13.\n\t//\n\t// When EncryptedClientHelloConfigList is set, the handshake will only\n\t// succeed if ECH is sucessfully negotiated. If the server rejects ECH,\n\t// an ECHRejectionError error will be returned, which may contain a new\n\t// ECHConfigList that the server suggests using.\n\t//\n\t// How this field is parsed may change in future Go versions, if the\n\t// encoding described in the final Encrypted Client Hello RFC changes.\n\tEncryptedClientHelloConfigList []byte\n\n\t// EncryptedClientHelloRejectionVerify, if not nil, is called when ECH is\n\t// rejected, in order to verify the ECH provider certificate in the outer\n\t// Client Hello. If it returns a non-nil error, the handshake is aborted and\n\t// that error results.\n\t//\n\t// Unlike VerifyPeerCertificate and VerifyConnection, normal certificate\n\t// verification will not be performed before calling\n\t// EncryptedClientHelloRejectionVerify.\n\t//\n\t// If EncryptedClientHelloRejectionVerify is nil and ECH is rejected, the\n\t// roots in RootCAs will be used to verify the ECH providers public\n\t// certificate. VerifyPeerCertificate and VerifyConnection are not called\n\t// when ECH is rejected, even if set, and InsecureSkipVerify is ignored.\n\tEncryptedClientHelloRejectionVerify func(ConnectionState) error\n\n\t// mutex protects sessionTicketKeys and autoSessionTicketKeys.\n\tmutex sync.RWMutex\n\t// sessionTicketKeys contains zero or more ticket keys. If set, it means\n\t// the keys were set with SessionTicketKey or SetSessionTicketKeys. The\n\t// first key is used for new tickets and any subsequent keys can be used to\n\t// decrypt old tickets. The slice contents are not protected by the mutex\n\t// and are immutable.\n\tsessionTicketKeys []ticketKey\n\t// autoSessionTicketKeys is like sessionTicketKeys but is owned by the\n\t// auto-rotation logic. See Config.ticketKeys.\n\tautoSessionTicketKeys []ticketKey\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/crypto@v0.41.0/acme/autocert/autocert.go",
          "code_snippet": "func (m *Manager) GetCertificate(hello *tls.ClientHelloInfo) (*tls.Certificate, error) {\n\tif m.Prompt == nil {\n\t\treturn nil, errors.New(\"acme/autocert: Manager.Prompt not set\")\n\t}\n\n\tname := hello.ServerName\n\tif name == \"\" {\n\t\treturn nil, errors.New(\"acme/autocert: missing server name\")\n\t}\n\tif !strings.Contains(strings.Trim(name, \".\"), \".\") {\n\t\treturn nil, errors.New(\"acme/autocert: server name component count invalid\")\n\t}\n\n\t// Note that this conversion is necessary because some server names in the handshakes\n\t// started by some clients (such as cURL) are not converted to Punycode, which will\n\t// prevent us from obtaining certificates for them. In addition, we should also treat\n\t// example.com and EXAMPLE.COM as equivalent and return the same certificate for them.\n\t// Fortunately, this conversion also helped us deal with this kind of mixedcase problems.\n\t//\n\t// Due to the \"σςΣ\" problem (see https://unicode.org/faq/idn.html#22), we can't use\n\t// idna.Punycode.ToASCII (or just idna.ToASCII) here.\n\tname, err := idna.Lookup.ToASCII(name)\n\tif err != nil {\n\t\treturn nil, errors.New(\"acme/autocert: server name contains invalid character\")\n\t}\n\n\t// In the worst-case scenario, the timeout needs to account for caching, host policy,\n\t// domain ownership verification and certificate issuance.\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)\n\tdefer cancel()\n\n\t// Check whether this is a token cert requested for TLS-ALPN challenge.\n\tif wantsTokenCert(hello) {\n\t\tm.challengeMu.RLock()\n\t\tdefer m.challengeMu.RUnlock()\n\t\tif cert := m.certTokens[name]; cert != nil {\n\t\t\treturn cert, nil\n\t\t}\n\t\tif cert, err := m.cacheGet(ctx, certKey{domain: name, isToken: true}); err == nil {\n\t\t\treturn cert, nil\n\t\t}\n\t\t// TODO: cache error results?\n\t\treturn nil, fmt.Errorf(\"acme/autocert: no token cert for %q\", name)\n\t}\n\n\t// regular domain\n\tif err := m.hostPolicy()(ctx, name); err != nil {\n\t\treturn nil, err\n\t}\n\n\tck := certKey{\n\t\tdomain: strings.TrimSuffix(name, \".\"), // golang.org/issue/18114\n\t\tisRSA:  !supportsECDSA(hello),\n\t}\n\tcert, err := m.cert(ctx, ck)\n\tif err == nil {\n\t\treturn cert, nil\n\t}\n\tif err != ErrCacheMiss {\n\t\treturn nil, err\n\t}\n\n\t// first-time\n\tcert, err = m.createCert(ctx, ck)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tm.cachePut(ctx, ck, cert)\n\treturn cert, nil\n}",
          "ref_module": "autocert"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/crypto@v0.41.0/acme/acme.go",
          "code_snippet": "ALPNProto = \"acme-tls/1\"",
          "ref_module": "acme"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Serve(l net.Listener) error {\n\tif fn := testHookServerServe; fn != nil {\n\t\tfn(srv, l) // call hook with unwrapped listener\n\t}\n\n\torigListener := l\n\tl = \u0026onceCloseListener{Listener: l}\n\tdefer l.Close()\n\n\tif err := srv.setupHTTP2_Serve(); err != nil {\n\t\treturn err\n\t}\n\n\tif !srv.trackListener(\u0026l, true) {\n\t\treturn ErrServerClosed\n\t}\n\tdefer srv.trackListener(\u0026l, false)\n\n\tbaseCtx := context.Background()\n\tif srv.BaseContext != nil {\n\t\tbaseCtx = srv.BaseContext(origListener)\n\t\tif baseCtx == nil {\n\t\t\tpanic(\"BaseContext returned a nil context\")\n\t\t}\n\t}\n\n\tvar tempDelay time.Duration // how long to sleep on accept failure\n\n\tctx := context.WithValue(baseCtx, ServerContextKey, srv)\n\tfor {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif srv.shuttingDown() {\n\t\t\t\treturn ErrServerClosed\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok \u0026\u0026 ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay \u003e max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\tsrv.logf(\"http: Accept error: %v; retrying in %v\", err, tempDelay)\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tconnCtx := ctx\n\t\tif cc := srv.ConnContext; cc != nil {\n\t\t\tconnCtx = cc(connCtx, rw)\n\t\t\tif connCtx == nil {\n\t\t\t\tpanic(\"ConnContext returned nil\")\n\t\t\t}\n\t\t}\n\t\ttempDelay = 0\n\t\tc := srv.newConn(rw)\n\t\tc.setState(c.rwc, StateNew, runHooks) // before Serve can return\n\t\tgo c.serve(connCtx)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        734,
        735,
        736,
        737,
        738,
        739,
        740,
        741,
        742,
        743,
        744,
        745,
        746,
        747
      ],
      "cover_details": {
        "line_cover_rate": 0.9333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/cors.go:CORS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORS"
        }
      ],
      "name": "CORS",
      "signature": "CORS () echo.MiddlewareFunc",
      "ground_truth": "func CORS() echo.MiddlewareFunc {\n\treturn CORSWithConfig(DefaultCORSConfig)\n}",
      "function_comment": "// CORS returns a Cross-Origin Resource Sharing (CORS) middleware.\n// See also [MDN: Cross-Origin Resource Sharing (CORS)].\n//\n// Security: Poorly configured CORS can compromise security because it allows\n// relaxation of the browser's Same-Origin policy.  See [Exploiting CORS\n// misconfigurations for Bitcoins and bounties] and [Portswigger: Cross-origin\n// resource sharing (CORS)] for more details.\n//\n// [MDN: Cross-Origin Resource Sharing (CORS)]: https://developer.mozilla.org/en/docs/Web/HTTP/Access_control_CORS\n// [Exploiting CORS misconfigurations for Bitcoins and bounties]: https://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\n// [Portswigger: Cross-origin resource sharing (CORS)]: https://portswigger.net/web-security/cors",
      "function_statement": "// CORS returns a Cross-Origin Resource Sharing (CORS) middleware.\n// See also [MDN: Cross-Origin Resource Sharing (CORS)].\n//\n// Security: Poorly configured CORS can compromise security because it allows\n// relaxation of the browser's Same-Origin policy.  See [Exploiting CORS\n// misconfigurations for Bitcoins and bounties] and [Portswigger: Cross-origin\n// resource sharing (CORS)] for more details.\n//\n// [MDN: Cross-Origin Resource Sharing (CORS)]: https://developer.mozilla.org/en/docs/Web/HTTP/Access_control_CORS\n// [Exploiting CORS misconfigurations for Bitcoins and bounties]: https://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\n// [Portswigger: Cross-origin resource sharing (CORS)]: https://portswigger.net/web-security/cors",
      "start_line": 130,
      "end_line": 132,
      "file_path": "./middleware/cors.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/cors.go",
          "code_snippet": "func CORSWithConfig(config CORSConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultCORSConfig.Skipper\n\t}\n\tif len(config.AllowOrigins) == 0 {\n\t\tconfig.AllowOrigins = DefaultCORSConfig.AllowOrigins\n\t}\n\thasCustomAllowMethods := true\n\tif len(config.AllowMethods) == 0 {\n\t\thasCustomAllowMethods = false\n\t\tconfig.AllowMethods = DefaultCORSConfig.AllowMethods\n\t}\n\n\tallowOriginPatterns := make([]*regexp.Regexp, 0, len(config.AllowOrigins))\n\tfor _, origin := range config.AllowOrigins {\n\t\tif origin == \"*\" {\n\t\t\tcontinue // \"*\" is handled differently and does not need regexp\n\t\t}\n\t\tpattern := regexp.QuoteMeta(origin)\n\t\tpattern = strings.ReplaceAll(pattern, \"\\\\*\", \".*\")\n\t\tpattern = strings.ReplaceAll(pattern, \"\\\\?\", \".\")\n\t\tpattern = \"^\" + pattern + \"$\"\n\n\t\tre, err := regexp.Compile(pattern)\n\t\tif err != nil {\n\t\t\t// this is to preserve previous behaviour - invalid patterns were just ignored.\n\t\t\t// If we would turn this to panic, users with invalid patterns\n\t\t\t// would have applications crashing in production due unrecovered panic.\n\t\t\t// TODO: this should be turned to error/panic in `v5`\n\t\t\tcontinue\n\t\t}\n\t\tallowOriginPatterns = append(allowOriginPatterns, re)\n\t}\n\n\tallowMethods := strings.Join(config.AllowMethods, \",\")\n\tallowHeaders := strings.Join(config.AllowHeaders, \",\")\n\texposeHeaders := strings.Join(config.ExposeHeaders, \",\")\n\n\tmaxAge := \"0\"\n\tif config.MaxAge \u003e 0 {\n\t\tmaxAge = strconv.Itoa(config.MaxAge)\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\torigin := req.Header.Get(echo.HeaderOrigin)\n\t\t\tallowOrigin := \"\"\n\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderOrigin)\n\n\t\t\t// Preflight request is an OPTIONS request, using three HTTP request headers: Access-Control-Request-Method,\n\t\t\t// Access-Control-Request-Headers, and the Origin header. See: https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n\t\t\t// For simplicity we just consider method type and later `Origin` header.\n\t\t\tpreflight := req.Method == http.MethodOptions\n\n\t\t\t// Although router adds special handler in case of OPTIONS method we avoid calling next for OPTIONS in this middleware\n\t\t\t// as CORS requests do not have cookies / authentication headers by default, so we could get stuck in auth\n\t\t\t// middlewares by calling next(c).\n\t\t\t// But we still want to send `Allow` header as response in case of Non-CORS OPTIONS request as router default\n\t\t\t// handler does.\n\t\t\trouterAllowMethods := \"\"\n\t\t\tif preflight {\n\t\t\t\ttmpAllowMethods, ok := c.Get(echo.ContextKeyHeaderAllow).(string)\n\t\t\t\tif ok \u0026\u0026 tmpAllowMethods != \"\" {\n\t\t\t\t\trouterAllowMethods = tmpAllowMethods\n\t\t\t\t\tc.Response().Header().Set(echo.HeaderAllow, routerAllowMethods)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// No Origin provided. This is (probably) not request from actual browser - proceed executing middleware chain\n\t\t\tif origin == \"\" {\n\t\t\t\tif !preflight {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn c.NoContent(http.StatusNoContent)\n\t\t\t}\n\n\t\t\tif config.AllowOriginFunc != nil {\n\t\t\t\tallowed, err := config.AllowOriginFunc(origin)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tif allowed {\n\t\t\t\t\tallowOrigin = origin\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Check allowed origins\n\t\t\t\tfor _, o := range config.AllowOrigins {\n\t\t\t\t\tif o == \"*\" \u0026\u0026 config.AllowCredentials \u0026\u0026 config.UnsafeWildcardOriginWithAllowCredentials {\n\t\t\t\t\t\tallowOrigin = origin\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif o == \"*\" || o == origin {\n\t\t\t\t\t\tallowOrigin = o\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif matchSubdomain(origin, o) {\n\t\t\t\t\t\tallowOrigin = origin\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcheckPatterns := false\n\t\t\t\tif allowOrigin == \"\" {\n\t\t\t\t\t// to avoid regex cost by invalid (long) domains (253 is domain name max limit)\n\t\t\t\t\tif len(origin) \u003c= (253+3+5) \u0026\u0026 strings.Contains(origin, \"://\") {\n\t\t\t\t\t\tcheckPatterns = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif checkPatterns {\n\t\t\t\t\tfor _, re := range allowOriginPatterns {\n\t\t\t\t\t\tif match := re.MatchString(origin); match {\n\t\t\t\t\t\t\tallowOrigin = origin\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Origin not allowed\n\t\t\tif allowOrigin == \"\" {\n\t\t\t\tif !preflight {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn c.NoContent(http.StatusNoContent)\n\t\t\t}\n\n\t\t\tres.Header().Set(echo.HeaderAccessControlAllowOrigin, allowOrigin)\n\t\t\tif config.AllowCredentials {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowCredentials, \"true\")\n\t\t\t}\n\n\t\t\t// Simple request\n\t\t\tif !preflight {\n\t\t\t\tif exposeHeaders != \"\" {\n\t\t\t\t\tres.Header().Set(echo.HeaderAccessControlExposeHeaders, exposeHeaders)\n\t\t\t\t}\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\t// Preflight request\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderAccessControlRequestMethod)\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderAccessControlRequestHeaders)\n\n\t\t\tif !hasCustomAllowMethods \u0026\u0026 routerAllowMethods != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowMethods, routerAllowMethods)\n\t\t\t} else {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowMethods, allowMethods)\n\t\t\t}\n\n\t\t\tif allowHeaders != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowHeaders, allowHeaders)\n\t\t\t} else {\n\t\t\t\th := req.Header.Get(echo.HeaderAccessControlRequestHeaders)\n\t\t\t\tif h != \"\" {\n\t\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowHeaders, h)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif config.MaxAge != 0 {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlMaxAge, maxAge)\n\t\t\t}\n\t\t\treturn c.NoContent(http.StatusNoContent)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/cors.go",
          "code_snippet": "DefaultCORSConfig = CORSConfig{\n\tSkipper:      DefaultSkipper,\n\tAllowOrigins: []string{\"*\"},\n\tAllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        130,
        131,
        132
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/middleware.go:captureTokens",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/middleware_test.go",
          "func_name": "TestRewriteURL"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteAfterRouting"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithCaret"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteWithConfigPreMiddleware_Issue1143"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithRegexRules"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteReplacementEscaping"
        }
      ],
      "name": "captureTokens",
      "signature": "captureTokens (pattern *regexp.Regexp, input string) *strings.Replacer",
      "ground_truth": "func captureTokens(pattern *regexp.Regexp, input string) *strings.Replacer {\n\tgroups := pattern.FindAllStringSubmatch(input, -1)\n\tif groups == nil {\n\t\treturn nil\n\t}\n\tvalues := groups[0][1:]\n\treplace := make([]string, 2*len(values))\n\tfor i, v := range values {\n\t\tj := 2 * i\n\t\treplace[j] = \"$\" + strconv.Itoa(i+1)\n\t\treplace[j+1] = v\n\t}\n\treturn strings.NewReplacer(replace...)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 22,
      "end_line": 35,
      "file_path": "./middleware/middleware.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "Regexp struct {\n\texpr           string       // as passed to Compile\n\tprog           *syntax.Prog // compiled program\n\tonepass        *onePassProg // onepass program or nil\n\tnumSubexp      int\n\tmaxBitStateLen int\n\tsubexpNames    []string\n\tprefix         string         // required prefix in unanchored matches\n\tprefixBytes    []byte         // prefix, as a []byte\n\tprefixRune     rune           // first rune in prefix\n\tprefixEnd      uint32         // pc for last rune in prefix\n\tmpool          int            // pool for machines\n\tmatchcap       int            // size of recorded match lengths\n\tprefixComplete bool           // prefix is the entire regexp\n\tcond           syntax.EmptyOp // empty-width conditions required at start of match\n\tminInputLen    int            // minimum length of the input in bytes\n\n\t// This field can be modified by the Longest method,\n\t// but it is otherwise read-only.\n\tlongest bool // whether regexp prefers leftmost-longest match\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "Replacer struct {\n\tonce   sync.Once // guards buildOnce method\n\tr      replacer\n\toldnew []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "func (re *Regexp) FindAllStringSubmatch(s string, n int) [][]string {\n\tif n \u003c 0 {\n\t\tn = len(s) + 1\n\t}\n\tvar result [][]string\n\tre.allMatches(s, nil, n, func(match []int) {\n\t\tif result == nil {\n\t\t\tresult = make([][]string, 0, startSize)\n\t\t}\n\t\tslice := make([]string, len(match)/2)\n\t\tfor j := range slice {\n\t\t\tif match[2*j] \u003e= 0 {\n\t\t\t\tslice[j] = s[match[2*j]:match[2*j+1]]\n\t\t\t}\n\t\t}\n\t\tresult = append(result, slice)\n\t})\n\treturn result\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/itoa.go",
          "code_snippet": "func Itoa(i int) string {\n\treturn FormatInt(int64(i), 10)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func NewReplacer(oldnew ...string) *Replacer {\n\tif len(oldnew)%2 == 1 {\n\t\tpanic(\"strings.NewReplacer: odd argument count\")\n\t}\n\treturn \u0026Replacer{oldnew: append([]string(nil), oldnew...)}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:ProxyWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestFailNextTarget"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestTargetProvider"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestModifyResponseUseContext"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        }
      ],
      "name": "ProxyWithConfig",
      "signature": "ProxyWithConfig (config ProxyConfig) echo.MiddlewareFunc",
      "ground_truth": "func ProxyWithConfig(config ProxyConfig) echo.MiddlewareFunc {\n\tif config.Balancer == nil {\n\t\tpanic(\"echo: proxy middleware requires balancer\")\n\t}\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultProxyConfig.Skipper\n\t}\n\tif config.RetryFilter == nil {\n\t\tconfig.RetryFilter = func(c echo.Context, e error) bool {\n\t\t\tif httpErr, ok := e.(*echo.HTTPError); ok {\n\t\t\t\treturn httpErr.Code == http.StatusBadGateway\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t}\n\tif config.ErrorHandler == nil {\n\t\tconfig.ErrorHandler = func(c echo.Context, err error) error {\n\t\t\treturn err\n\t\t}\n\t}\n\tif config.Rewrite != nil {\n\t\tif config.RegexRewrite == nil {\n\t\t\tconfig.RegexRewrite = make(map[*regexp.Regexp]string)\n\t\t}\n\t\tfor k, v := range rewriteRulesRegex(config.Rewrite) {\n\t\t\tconfig.RegexRewrite[k] = v\n\t\t}\n\t}\n\n\tprovider, isTargetProvider := config.Balancer.(TargetProvider)\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\tif err := rewriteURL(config.RegexRewrite, req); err != nil {\n\t\t\t\treturn config.ErrorHandler(c, err)\n\t\t\t}\n\n\t\t\t// Fix header\n\t\t\t// Basically it's not good practice to unconditionally pass incoming x-real-ip header to upstream.\n\t\t\t// However, for backward compatibility, legacy behavior is preserved unless you configure Echo#IPExtractor.\n\t\t\tif req.Header.Get(echo.HeaderXRealIP) == \"\" || c.Echo().IPExtractor != nil {\n\t\t\t\treq.Header.Set(echo.HeaderXRealIP, c.RealIP())\n\t\t\t}\n\t\t\tif req.Header.Get(echo.HeaderXForwardedProto) == \"\" {\n\t\t\t\treq.Header.Set(echo.HeaderXForwardedProto, c.Scheme())\n\t\t\t}\n\t\t\tif c.IsWebSocket() \u0026\u0026 req.Header.Get(echo.HeaderXForwardedFor) == \"\" { // For HTTP, it is automatically set by Go HTTP reverse proxy.\n\t\t\t\treq.Header.Set(echo.HeaderXForwardedFor, c.RealIP())\n\t\t\t}\n\n\t\t\tretries := config.RetryCount\n\t\t\tfor {\n\t\t\t\tvar tgt *ProxyTarget\n\t\t\t\tvar err error\n\t\t\t\tif isTargetProvider {\n\t\t\t\t\ttgt, err = provider.NextTarget(c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn config.ErrorHandler(c, err)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttgt = config.Balancer.Next(c)\n\t\t\t\t}\n\n\t\t\t\tc.Set(config.ContextKey, tgt)\n\n\t\t\t\t//If retrying a failed request, clear any previous errors from\n\t\t\t\t//context here so that balancers have the option to check for\n\t\t\t\t//errors that occurred using previous target\n\t\t\t\tif retries \u003c config.RetryCount {\n\t\t\t\t\tc.Set(\"_error\", nil)\n\t\t\t\t}\n\n\t\t\t\t// This is needed for ProxyConfig.ModifyResponse and/or ProxyConfig.Transport to be able to process the Request\n\t\t\t\t// that Balancer may have replaced with c.SetRequest.\n\t\t\t\treq = c.Request()\n\n\t\t\t\t// Proxy\n\t\t\t\tswitch {\n\t\t\t\tcase c.IsWebSocket():\n\t\t\t\t\tproxyRaw(tgt, c, config).ServeHTTP(res, req)\n\t\t\t\tdefault: // even SSE requests\n\t\t\t\t\tproxyHTTP(tgt, c, config).ServeHTTP(res, req)\n\t\t\t\t}\n\n\t\t\t\terr, hasError := c.Get(\"_error\").(error)\n\t\t\t\tif !hasError {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tretry := retries \u003e 0 \u0026\u0026 config.RetryFilter(c, err)\n\t\t\t\tif !retry {\n\t\t\t\t\treturn config.ErrorHandler(c, err)\n\t\t\t\t}\n\n\t\t\t\tretries--\n\t\t\t}\n\t\t}\n\t}\n}",
      "function_comment": "// ProxyWithConfig returns a Proxy middleware with config.\n// See: `Proxy()`",
      "function_statement": "// ProxyWithConfig returns a Proxy middleware with config.\n// See: `Proxy()`",
      "start_line": 295,
      "end_line": 400,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Balancer defines a load balancing technique.\n\t// Required.\n\tBalancer ProxyBalancer\n\n\t// RetryCount defines the number of times a failed proxied request should be retried\n\t// using the next available ProxyTarget. Defaults to 0, meaning requests are never retried.\n\tRetryCount int\n\n\t// RetryFilter defines a function used to determine if a failed request to a\n\t// ProxyTarget should be retried. The RetryFilter will only be called when the number\n\t// of previous retries is less than RetryCount. If the function returns true, the\n\t// request will be retried. The provided error indicates the reason for the request\n\t// failure. When the ProxyTarget is unavailable, the error will be an instance of\n\t// echo.HTTPError with a Code of http.StatusBadGateway. In all other cases, the error\n\t// will indicate an internal error in the Proxy middleware. When a RetryFilter is not\n\t// specified, all requests that fail with http.StatusBadGateway will be retried. A custom\n\t// RetryFilter can be provided to only retry specific requests. Note that RetryFilter is\n\t// only called when the request to the target fails, or an internal error in the Proxy\n\t// middleware has occurred. Successful requests that return a non-200 response code cannot\n\t// be retried.\n\tRetryFilter func(c echo.Context, e error) bool\n\n\t// ErrorHandler defines a function which can be used to return custom errors from\n\t// the Proxy middleware. ErrorHandler is only invoked when there has been\n\t// either an internal error in the Proxy middleware or the ProxyTarget is\n\t// unavailable. Due to the way requests are proxied, ErrorHandler is not invoked\n\t// when a ProxyTarget returns a non-200 response. In these cases, the response\n\t// is already written so errors cannot be modified. ErrorHandler is only\n\t// invoked after all retry attempts have been exhausted.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n\t// retrieved by index e.g. $1, $2 and so on.\n\t// Examples:\n\t// \"/old\":              \"/new\",\n\t// \"/api/*\":            \"/$1\",\n\t// \"/js/*\":             \"/public/javascripts/$1\",\n\t// \"/users/*/orders/*\": \"/user/$1/order/$2\",\n\tRewrite map[string]string\n\n\t// RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n\t// Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"^/old/[0.9]+/\":     \"/new\",\n\t// \"^/api/.+?/(.*)\":    \"/v2/$1\",\n\tRegexRewrite map[*regexp.Regexp]string\n\n\t// Context key to store selected ProxyTarget into context.\n\t// Optional. Default value \"target\".\n\tContextKey string\n\n\t// To customize the transport to remote.\n\t// Examples: If custom TLS certificates are required.\n\tTransport http.RoundTripper\n\n\t// ModifyResponse defines function to modify response from ProxyTarget.\n\tModifyResponse func(*http.Response) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "DefaultProxyConfig = ProxyConfig{\n\tSkipper:    DefaultSkipper,\n\tContextKey: \"target\",\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func rewriteRulesRegex(rewrite map[string]string) map[*regexp.Regexp]string {\n\t// Initialize\n\trulesRegex := map[*regexp.Regexp]string{}\n\tfor k, v := range rewrite {\n\t\tk = regexp.QuoteMeta(k)\n\t\tk = strings.ReplaceAll(k, `\\*`, \"(.*?)\")\n\t\tif strings.HasPrefix(k, `\\^`) {\n\t\t\tk = strings.ReplaceAll(k, `\\^`, \"^\")\n\t\t}\n\t\tk = k + \"$\"\n\t\trulesRegex[regexp.MustCompile(k)] = v\n\t}\n\treturn rulesRegex\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "TargetProvider interface {\n\tNextTarget(echo.Context) (*ProxyTarget, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func rewriteURL(rewriteRegex map[*regexp.Regexp]string, req *http.Request) error {\n\tif len(rewriteRegex) == 0 {\n\t\treturn nil\n\t}\n\n\t// Depending on how HTTP request is sent RequestURI could contain Scheme://Host/path or be just /path.\n\t// We only want to use path part for rewriting and therefore trim prefix if it exists\n\trawURI := req.RequestURI\n\tif rawURI != \"\" \u0026\u0026 rawURI[0] != '/' {\n\t\tprefix := \"\"\n\t\tif req.URL.Scheme != \"\" {\n\t\t\tprefix = req.URL.Scheme + \"://\"\n\t\t}\n\t\tif req.URL.Host != \"\" {\n\t\t\tprefix += req.URL.Host // host or host:port\n\t\t}\n\t\tif prefix != \"\" {\n\t\t\trawURI = strings.TrimPrefix(rawURI, prefix)\n\t\t}\n\t}\n\n\tfor k, v := range rewriteRegex {\n\t\tif replacer := captureTokens(k, rawURI); replacer != nil {\n\t\t\turl, err := req.URL.Parse(replacer.Replace(v))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treq.URL = url\n\n\t\t\treturn nil // rewrite only once\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXRealIP             = \"X-Real-Ip\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedProto     = \"X-Forwarded-Proto\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedFor       = \"X-Forwarded-For\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyBalancer interface {\n\tAddTarget(*ProxyTarget) bool\n\tRemoveTarget(string) bool\n\tNext(echo.Context) *ProxyTarget\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "func proxyRaw(t *ProxyTarget, c echo.Context, config ProxyConfig) http.Handler {\n\tvar dialFunc func(ctx context.Context, network, addr string) (net.Conn, error)\n\tif transport, ok := config.Transport.(*http.Transport); ok {\n\t\tif transport.TLSClientConfig != nil {\n\t\t\td := tls.Dialer{\n\t\t\t\tConfig: transport.TLSClientConfig,\n\t\t\t}\n\t\t\tdialFunc = d.DialContext\n\t\t}\n\t}\n\tif dialFunc == nil {\n\t\tvar d net.Dialer\n\t\tdialFunc = d.DialContext\n\t}\n\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tin, _, err := c.Response().Hijack()\n\t\tif err != nil {\n\t\t\tc.Set(\"_error\", fmt.Errorf(\"proxy raw, hijack error=%w, url=%s\", err, t.URL))\n\t\t\treturn\n\t\t}\n\t\tdefer in.Close()\n\t\tout, err := dialFunc(c.Request().Context(), \"tcp\", t.URL.Host)\n\t\tif err != nil {\n\t\t\tc.Set(\"_error\", echo.NewHTTPError(http.StatusBadGateway, fmt.Sprintf(\"proxy raw, dial error=%v, url=%s\", err, t.URL)))\n\t\t\treturn\n\t\t}\n\n\t\t// Write header\n\t\terr = r.Write(out)\n\t\tif err != nil {\n\t\t\tc.Set(\"_error\", echo.NewHTTPError(http.StatusBadGateway, fmt.Sprintf(\"proxy raw, request header copy error=%v, url=%s\", err, t.URL)))\n\t\t\treturn\n\t\t}\n\n\t\terrCh := make(chan error, 2)\n\t\tcp := func(dst io.Writer, src io.Reader) {\n\t\t\t_, err = io.Copy(dst, src)\n\t\t\terrCh \u003c- err\n\t\t}\n\n\t\tgo cp(out, in)\n\t\tgo cp(in, out)\n\t\terr = \u003c-errCh\n\t\tif err != nil \u0026\u0026 err != io.EOF {\n\t\t\tc.Set(\"_error\", fmt.Errorf(\"proxy raw, copy body error=%w, url=%s\", err, t.URL))\n\t\t}\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "func proxyHTTP(tgt *ProxyTarget, c echo.Context, config ProxyConfig) http.Handler {\n\tproxy := httputil.NewSingleHostReverseProxy(tgt.URL)\n\tproxy.ErrorHandler = func(resp http.ResponseWriter, req *http.Request, err error) {\n\t\tdesc := tgt.URL.String()\n\t\tif tgt.Name != \"\" {\n\t\t\tdesc = fmt.Sprintf(\"%s(%s)\", tgt.Name, tgt.URL.String())\n\t\t}\n\t\t// If the client canceled the request (usually by closing the connection), we can report a\n\t\t// client error (4xx) instead of a server error (5xx) to correctly identify the situation.\n\t\t// The Go standard library (at of late 2020) wraps the exported, standard\n\t\t// context.Canceled error with unexported garbage value requiring a substring check, see\n\t\t// https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/net/net.go#L416-L430\n\t\tif err == context.Canceled || strings.Contains(err.Error(), \"operation was canceled\") {\n\t\t\thttpError := echo.NewHTTPError(StatusCodeContextCanceled, fmt.Sprintf(\"client closed connection: %v\", err))\n\t\t\thttpError.Internal = err\n\t\t\tc.Set(\"_error\", httpError)\n\t\t} else {\n\t\t\thttpError := echo.NewHTTPError(http.StatusBadGateway, fmt.Sprintf(\"remote %s unreachable, could not forward: %v\", desc, err))\n\t\t\thttpError.Internal = err\n\t\t\tc.Set(\"_error\", httpError)\n\t\t}\n\t}\n\tproxy.Transport = config.Transport\n\tproxy.ModifyResponse = config.ModifyResponse\n\treturn proxy\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadGateway                    = 502",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "Regexp struct {\n\texpr           string       // as passed to Compile\n\tprog           *syntax.Prog // compiled program\n\tonepass        *onePassProg // onepass program or nil\n\tnumSubexp      int\n\tmaxBitStateLen int\n\tsubexpNames    []string\n\tprefix         string         // required prefix in unanchored matches\n\tprefixBytes    []byte         // prefix, as a []byte\n\tprefixRune     rune           // first rune in prefix\n\tprefixEnd      uint32         // pc for last rune in prefix\n\tmpool          int            // pool for machines\n\tmatchcap       int            // size of recorded match lengths\n\tprefixComplete bool           // prefix is the entire regexp\n\tcond           syntax.EmptyOp // empty-width conditions required at start of match\n\tminInputLen    int            // minimum length of the input in bytes\n\n\t// This field can be modified by the Longest method,\n\t// but it is otherwise read-only.\n\tlongest bool // whether regexp prefers leftmost-longest match\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        295,
        296,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        311,
        312,
        313,
        314,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        325,
        326,
        327,
        328,
        329,
        333,
        334,
        335,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        386,
        387,
        388,
        389,
        391,
        392,
        393,
        394,
        396
      ],
      "cover_details": {
        "line_cover_rate": 0.7075471698113207
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:ParamValues",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        }
      ],
      "name": "ParamValues",
      "signature": "(c *context) ParamValues () []string",
      "ground_truth": "func (c *context) ParamValues() []string {\n\treturn c.pvalues[:len(c.pnames)]\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 356,
      "end_line": 358,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        356,
        357,
        358
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:boolsValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        }
      ],
      "name": "boolsValue",
      "signature": "(b *ValueBinder) boolsValue (sourceParam string, dest *[]bool, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) boolsValue(sourceParam string, dest *[]bool, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.bools(sourceParam, values, dest)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 935,
      "end_line": 948,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) bools(sourceParam string, values []string, dest *[]bool) *ValueBinder {\n\ttmp := make([]bool, len(values))\n\tfor i, v := range values {\n\t\tb.bool(sourceParam, v, \u0026tmp[i])\n\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\treturn b\n\t\t}\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        935,
        936,
        937,
        938,
        940,
        941,
        942,
        943,
        944,
        945,
        947
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint8s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Uint8s",
      "signature": "(b *ValueBinder) Uint8s (sourceParam string, dest *[]uint8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint8s(sourceParam string, dest *[]uint8) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Uint8s binds parameter to slice of uint8",
      "function_statement": "// Uint8s binds parameter to slice of uint8",
      "start_line": 880,
      "end_line": 882,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        880,
        881,
        882
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:WrapHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        }
      ],
      "name": "WrapHandler",
      "signature": "WrapHandler (h http.Handler) HandlerFunc",
      "ground_truth": "func WrapHandler(h http.Handler) HandlerFunc {\n\treturn func(c Context) error {\n\t\th.ServeHTTP(c.Response(), c.Request())\n\t\treturn nil\n\t}\n}",
      "function_comment": "// WrapHandler wraps `http.Handler` into `echo.HandlerFunc`.",
      "function_statement": "// WrapHandler wraps `http.Handler` into `echo.HandlerFunc`.",
      "start_line": 924,
      "end_line": 929,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        924,
        925,
        926,
        927,
        928
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:ints",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "ints",
      "signature": "(b *ValueBinder) ints (sourceParam string, values []string, dest interface{}) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) ints(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]int64:\n\t\ttmp := make([]int64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int32:\n\t\ttmp := make([]int32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int16:\n\t\ttmp := make([]int16, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 16)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int8:\n\t\ttmp := make([]int8, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 8)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int:\n\t\ttmp := make([]int, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 0)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 560,
      "end_line": 619,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) int(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseInt(value, 10, bitSize)\n\tif err != nil {\n\t\tif bitSize == 0 {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to int\", err))\n\t\t} else {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to int%v\", bitSize), err))\n\t\t}\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *int64:\n\t\t*d = n\n\tcase *int32:\n\t\t*d = int32(n)\n\tcase *int16:\n\t\t*d = int16(n)\n\tcase *int8:\n\t\t*d = int8(n)\n\tcase *int:\n\t\t*d = int(n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        560,
        561,
        562,
        563,
        564,
        565,
        566,
        567,
        568,
        570,
        571,
        572,
        573,
        574,
        575,
        576,
        577,
        578,
        579,
        581,
        582,
        583,
        584,
        585,
        586,
        587,
        588,
        589,
        590,
        592,
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        600,
        601,
        603,
        604,
        605,
        606,
        607,
        608,
        609,
        610,
        611,
        612,
        614,
        615,
        616,
        618
      ],
      "cover_details": {
        "line_cover_rate": 0.8833333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetCookie",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        }
      ],
      "name": "SetCookie",
      "signature": "(c *context) SetCookie (cookie *http.Cookie)",
      "ground_truth": "func (c *context) SetCookie(cookie *http.Cookie) {\n\thttp.SetCookie(c.Response(), cookie)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 425,
      "end_line": 427,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Response() *Response {\n\treturn c.response\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "Cookie struct {\n\tName   string\n\tValue  string\n\tQuoted bool // indicates whether the Value was originally quoted\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge\u003e0 means Max-Age attribute present and given in seconds\n\tMaxAge      int\n\tSecure      bool\n\tHttpOnly    bool\n\tSameSite    SameSite\n\tPartitioned bool\n\tRaw         string\n\tUnparsed    []string // Raw text of unparsed attribute-value pairs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "func SetCookie(w ResponseWriter, cookie *Cookie) {\n\tif v := cookie.String(); v != \"\" {\n\t\tw.Header().Add(\"Set-Cookie\", v)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        425,
        426,
        427
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:Unwrap",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipResponseWriter_CanUnwrap"
        }
      ],
      "name": "Unwrap",
      "signature": "(w *gzipResponseWriter) Unwrap () http.ResponseWriter",
      "ground_truth": "func (w *gzipResponseWriter) Unwrap() http.ResponseWriter {\n\treturn w.ResponseWriter\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 196,
      "end_line": 198,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n\twroteHeader       bool\n\twroteBody         bool\n\tminLength         int\n\tminLengthExceeded bool\n\tbuffer            *bytes.Buffer\n\tcode              int\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        196,
        197,
        198
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:IsTLS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Scheme"
        }
      ],
      "name": "IsTLS",
      "signature": "(c *context) IsTLS () bool",
      "ground_truth": "func (c *context) IsTLS() bool {\n\treturn c.request.TLS != nil\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 266,
      "end_line": 268,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        266,
        267,
        268
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:filepathOrContent",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        }
      ],
      "name": "filepathOrContent",
      "signature": "filepathOrContent (fileOrContent interface{}) (content []byte, err error)",
      "ground_truth": "func filepathOrContent(fileOrContent interface{}) (content []byte, err error) {\n\tswitch v := fileOrContent.(type) {\n\tcase string:\n\t\treturn os.ReadFile(v)\n\tcase []byte:\n\t\treturn v, nil\n\tdefault:\n\t\treturn nil, ErrInvalidCertOrKeyType\n\t}\n}",
      "function_comment": "// StartTLS starts an HTTPS server.\n// If `certFile` or `keyFile` is `string` the values are treated as file paths.",
      "function_statement": "// StartTLS starts an HTTPS server.\n// If `certFile` or `keyFile` is `string` the values are treated as file paths.",
      "start_line": 722,
      "end_line": 731,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrInvalidCertOrKeyType   = errors.New(\"invalid cert or key type, must be string or []byte\")",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/os/file.go",
          "code_snippet": "func ReadFile(name string) ([]byte, error) {\n\tf, err := Open(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer f.Close()\n\n\tvar size int\n\tif info, err := f.Stat(); err == nil {\n\t\tsize64 := info.Size()\n\t\tif int64(int(size64)) == size64 {\n\t\t\tsize = int(size64)\n\t\t}\n\t}\n\tsize++ // one byte for final read at EOF\n\n\t// If a file claims a small size, read at least 512 bytes.\n\t// In particular, files in Linux's /proc claim size 0 but\n\t// then do not work right if read in small pieces,\n\t// so an initial read of 1 byte would not work correctly.\n\tif size \u003c 512 {\n\t\tsize = 512\n\t}\n\n\tdata := make([]byte, 0, size)\n\tfor {\n\t\tn, err := f.Read(data[len(data):cap(data)])\n\t\tdata = data[:len(data)+n]\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\terr = nil\n\t\t\t}\n\t\t\treturn data, err\n\t\t}\n\n\t\tif len(data) \u003e= cap(data) {\n\t\t\td := append(data[:cap(data)], 0)\n\t\t\tdata = d[:len(data)]\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        722,
        723,
        724,
        725,
        726,
        727,
        728,
        729
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustTime",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        }
      ],
      "name": "MustTime",
      "signature": "(b *ValueBinder) MustTime (sourceParam string, dest *time.Time, layout string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustTime(sourceParam string, dest *time.Time, layout string) *ValueBinder {\n\treturn b.time(sourceParam, dest, layout, true)\n}",
      "function_comment": "// MustTime requires parameter value to exist to bind to time.Time variable. Returns error when value does not exist",
      "function_statement": "// MustTime requires parameter value to exist to bind to time.Time variable. Returns error when value does not exist",
      "start_line": 1095,
      "end_line": 1097,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) time(sourceParam string, dest *time.Time, layout string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tt, err := time.Parse(layout, value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\t*dest = t\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1095,
        1096,
        1097
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:Unwrap",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Unwrap"
        }
      ],
      "name": "Unwrap",
      "signature": "(r *Response) Unwrap () http.ResponseWriter",
      "ground_truth": "func (r *Response) Unwrap() http.ResponseWriter {\n\treturn r.Writer\n}",
      "function_comment": "// Unwrap returns the original http.ResponseWriter.\n// ResponseController can be used to access the original http.ResponseWriter.\n// See [https://go.dev/blog/go1.20]",
      "function_statement": "// Unwrap returns the original http.ResponseWriter.\n// ResponseController can be used to access the original http.ResponseWriter.\n// See [https://go.dev/blog/go1.20]",
      "start_line": 106,
      "end_line": 108,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        106,
        107,
        108
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Path",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Path"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "Path",
      "signature": "(c *context) Path () string",
      "ground_truth": "func (c *context) Path() string {\n\treturn c.path\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 320,
      "end_line": 322,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        320,
        321,
        322
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetResponse",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        }
      ],
      "name": "SetResponse",
      "signature": "(c *context) SetResponse (r *Response)",
      "ground_truth": "func (c *context) SetResponse(r *Response) {\n\tc.response = r\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 262,
      "end_line": 264,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        262,
        263,
        264
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_limit.go:BodyLimitWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig_Skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit_panicOnInvalidLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig"
        }
      ],
      "name": "BodyLimitWithConfig",
      "signature": "BodyLimitWithConfig (config BodyLimitConfig) echo.MiddlewareFunc",
      "ground_truth": "func BodyLimitWithConfig(config BodyLimitConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBodyLimitConfig.Skipper\n\t}\n\n\tlimit, err := bytes.Parse(config.Limit)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"echo: invalid body-limit=%s\", config.Limit))\n\t}\n\tconfig.limit = limit\n\tpool := limitedReaderPool(config)\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\n\t\t\t// Based on content length\n\t\t\tif req.ContentLength \u003e config.limit {\n\t\t\t\treturn echo.ErrStatusRequestEntityTooLarge\n\t\t\t}\n\n\t\t\t// Based on content read\n\t\t\tr := pool.Get().(*limitedReader)\n\t\t\tr.Reset(req.Body)\n\t\t\tdefer pool.Put(r)\n\t\t\treq.Body = r\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// BodyLimitWithConfig returns a BodyLimit middleware with config.\n// See: `BodyLimit()`.",
      "function_statement": "// BodyLimitWithConfig returns a BodyLimit middleware with config.\n// See: `BodyLimit()`.",
      "start_line": 53,
      "end_line": 88,
      "file_path": "./middleware/body_limit.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "BodyLimitConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Maximum allowed size for a request body, it can be specified\n\t// as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n\tLimit string `yaml:\"limit\"`\n\tlimit int64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "DefaultBodyLimitConfig = BodyLimitConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "func limitedReaderPool(c BodyLimitConfig) sync.Pool {\n\treturn sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\treturn \u0026limitedReader{BodyLimitConfig: c}\n\t\t},\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrStatusRequestEntityTooLarge   = NewHTTPError(http.StatusRequestEntityTooLarge)",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "limitedReader struct {\n\tBodyLimitConfig\n\treader io.ReadCloser\n\tread   int64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "func (r *limitedReader) Reset(reader io.ReadCloser) {\n\tr.reader = reader\n\tr.read = 0\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/bytes/bytes.go",
          "code_snippet": "func Parse(value string) (int64, error) {\n\treturn global.Parse(value)\n}",
          "ref_module": "bytes"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        72,
        73,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "cover_details": {
        "line_cover_rate": 0.7777777777777778
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_limit.go:limitedReaderPool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig_Skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig"
        }
      ],
      "name": "limitedReaderPool",
      "signature": "limitedReaderPool (c BodyLimitConfig) sync.Pool",
      "ground_truth": "func limitedReaderPool(c BodyLimitConfig) sync.Pool {\n\treturn sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\treturn \u0026limitedReader{BodyLimitConfig: c}\n\t\t},\n\t}\n}",
      "function_comment": "// BodyLimitWithConfig returns a BodyLimit middleware with config.",
      "function_statement": "// BodyLimitWithConfig returns a BodyLimit middleware with config.",
      "start_line": 108,
      "end_line": 114,
      "file_path": "./middleware/body_limit.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "BodyLimitConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Maximum allowed size for a request body, it can be specified\n\t// as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n\tLimit string `yaml:\"limit\"`\n\tlimit int64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "limitedReader struct {\n\tBodyLimitConfig\n\treader io.ReadCloser\n\tread   int64\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() any\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        108,
        109,
        110,
        111,
        112
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:PATCH",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        }
      ],
      "name": "PATCH",
      "signature": "(e *Echo) PATCH (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) PATCH(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodPatch, path, h, m...)\n}",
      "function_comment": "// PATCH registers a new PATCH route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// PATCH registers a new PATCH route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 508,
      "end_line": 510,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPatch   = \"PATCH\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        508,
        509,
        510
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:POST",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "POST",
      "signature": "(g *Group) POST (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) POST(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodPost, path, h, m...)\n}",
      "function_comment": "// POST implements `Echo#POST()` for sub-routes within the Group.",
      "function_statement": "// POST implements `Echo#POST()` for sub-routes within the Group.",
      "start_line": 66,
      "end_line": 68,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        66,
        67,
        68
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:Unwrap",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanUnwrap"
        }
      ],
      "name": "Unwrap",
      "signature": "(w *bodyDumpResponseWriter) Unwrap () http.ResponseWriter",
      "ground_truth": "func (w *bodyDumpResponseWriter) Unwrap() http.ResponseWriter {\n\treturn w.ResponseWriter\n}",
      "function_comment": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "function_statement": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "start_line": 111,
      "end_line": 113,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "bodyDumpResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        111,
        112,
        113
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/slash.go:sanitizeURI",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlashWithConfig"
        }
      ],
      "name": "sanitizeURI",
      "signature": "sanitizeURI (uri string) string",
      "ground_truth": "func sanitizeURI(uri string) string {\n\t// double slash `\\\\`, `//` or even `\\/` is absolute uri for browsers and by redirecting request to that uri\n\t// we are vulnerable to open redirect attack. so replace all slashes from the beginning with single slash\n\tif len(uri) \u003e 1 \u0026\u0026 (uri[0] == '\\\\' || uri[0] == '/') \u0026\u0026 (uri[1] == '\\\\' || uri[1] == '/') {\n\t\turi = \"/\" + strings.TrimLeft(uri, `/\\`)\n\t}\n\treturn uri\n}",
      "function_comment": "// RemoveTrailingSlashWithConfig returns a RemoveTrailingSlash middleware with config.",
      "function_statement": "// RemoveTrailingSlashWithConfig returns a RemoveTrailingSlash middleware with config.",
      "start_line": 122,
      "end_line": 129,
      "file_path": "./middleware/slash.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimLeft(s, cutset string) string {\n\tif s == \"\" || cutset == \"\" {\n\t\treturn s\n\t}\n\tif len(cutset) == 1 \u0026\u0026 cutset[0] \u003c utf8.RuneSelf {\n\t\treturn trimLeftByte(s, cutset[0])\n\t}\n\tif as, ok := makeASCIISet(cutset); ok {\n\t\treturn trimLeftASCII(s, \u0026as)\n\t}\n\treturn trimLeftUnicode(s, cutset)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        122,
        123,
        124,
        125,
        126,
        127,
        128
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:insertNode",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "insertNode",
      "signature": "(r *Router) insertNode (method, path string, t kind, rm routeMethod)",
      "ground_truth": "func (r *Router) insertNode(method, path string, t kind, rm routeMethod) {\n\t// Adjust max param\n\tparamLen := len(rm.pnames)\n\tif *r.echo.maxParam \u003c paramLen {\n\t\t*r.echo.maxParam = paramLen\n\t}\n\n\tcurrentNode := r.tree // Current node as root\n\tif currentNode == nil {\n\t\tpanic(\"echo: invalid method\")\n\t}\n\tsearch := path\n\n\tfor {\n\t\tsearchLen := len(search)\n\t\tprefixLen := len(currentNode.prefix)\n\t\tlcpLen := 0\n\n\t\t// LCP - Longest Common Prefix (https://en.wikipedia.org/wiki/LCP_array)\n\t\tmax := prefixLen\n\t\tif searchLen \u003c max {\n\t\t\tmax = searchLen\n\t\t}\n\t\tfor ; lcpLen \u003c max \u0026\u0026 search[lcpLen] == currentNode.prefix[lcpLen]; lcpLen++ {\n\t\t}\n\n\t\tif lcpLen == 0 {\n\t\t\t// At root node\n\t\t\tcurrentNode.label = search[0]\n\t\t\tcurrentNode.prefix = search\n\t\t\tif rm.handler != nil {\n\t\t\t\tcurrentNode.kind = t\n\t\t\t\tcurrentNode.addMethod(method, \u0026rm)\n\t\t\t\tcurrentNode.paramsCount = len(rm.pnames)\n\t\t\t\tcurrentNode.originalPath = rm.ppath\n\t\t\t}\n\t\t\tcurrentNode.isLeaf = currentNode.staticChildren == nil \u0026\u0026 currentNode.paramChild == nil \u0026\u0026 currentNode.anyChild == nil\n\t\t} else if lcpLen \u003c prefixLen {\n\t\t\t// Split node into two before we insert new node.\n\t\t\t// This happens when we are inserting path that is submatch of any existing inserted paths.\n\t\t\t// For example, we have node `/test` and now are about to insert `/te/*`. In that case\n\t\t\t// 1. overlapping part is `/te` that is used as parent node\n\t\t\t// 2. `st` is part from existing node that is not matching - it gets its own node (child to `/te`)\n\t\t\t// 3. `/*` is the new part we are about to insert (child to `/te`)\n\t\t\tn := newNode(\n\t\t\t\tcurrentNode.kind,\n\t\t\t\tcurrentNode.prefix[lcpLen:],\n\t\t\t\tcurrentNode,\n\t\t\t\tcurrentNode.staticChildren,\n\t\t\t\tcurrentNode.originalPath,\n\t\t\t\tcurrentNode.methods,\n\t\t\t\tcurrentNode.paramsCount,\n\t\t\t\tcurrentNode.paramChild,\n\t\t\t\tcurrentNode.anyChild,\n\t\t\t\tcurrentNode.notFoundHandler,\n\t\t\t)\n\t\t\t// Update parent path for all children to new node\n\t\t\tfor _, child := range currentNode.staticChildren {\n\t\t\t\tchild.parent = n\n\t\t\t}\n\t\t\tif currentNode.paramChild != nil {\n\t\t\t\tcurrentNode.paramChild.parent = n\n\t\t\t}\n\t\t\tif currentNode.anyChild != nil {\n\t\t\t\tcurrentNode.anyChild.parent = n\n\t\t\t}\n\n\t\t\t// Reset parent node\n\t\t\tcurrentNode.kind = staticKind\n\t\t\tcurrentNode.label = currentNode.prefix[0]\n\t\t\tcurrentNode.prefix = currentNode.prefix[:lcpLen]\n\t\t\tcurrentNode.staticChildren = nil\n\t\t\tcurrentNode.originalPath = \"\"\n\t\t\tcurrentNode.methods = new(routeMethods)\n\t\t\tcurrentNode.paramsCount = 0\n\t\t\tcurrentNode.paramChild = nil\n\t\t\tcurrentNode.anyChild = nil\n\t\t\tcurrentNode.isLeaf = false\n\t\t\tcurrentNode.isHandler = false\n\t\t\tcurrentNode.notFoundHandler = nil\n\n\t\t\t// Only Static children could reach here\n\t\t\tcurrentNode.addStaticChild(n)\n\n\t\t\tif lcpLen == searchLen {\n\t\t\t\t// At parent node\n\t\t\t\tcurrentNode.kind = t\n\t\t\t\tif rm.handler != nil {\n\t\t\t\t\tcurrentNode.addMethod(method, \u0026rm)\n\t\t\t\t\tcurrentNode.paramsCount = len(rm.pnames)\n\t\t\t\t\tcurrentNode.originalPath = rm.ppath\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create child node\n\t\t\t\tn = newNode(t, search[lcpLen:], currentNode, nil, \"\", new(routeMethods), 0, nil, nil, nil)\n\t\t\t\tif rm.handler != nil {\n\t\t\t\t\tn.addMethod(method, \u0026rm)\n\t\t\t\t\tn.paramsCount = len(rm.pnames)\n\t\t\t\t\tn.originalPath = rm.ppath\n\t\t\t\t}\n\t\t\t\t// Only Static children could reach here\n\t\t\t\tcurrentNode.addStaticChild(n)\n\t\t\t}\n\t\t\tcurrentNode.isLeaf = currentNode.staticChildren == nil \u0026\u0026 currentNode.paramChild == nil \u0026\u0026 currentNode.anyChild == nil\n\t\t} else if lcpLen \u003c searchLen {\n\t\t\tsearch = search[lcpLen:]\n\t\t\tc := currentNode.findChildWithLabel(search[0])\n\t\t\tif c != nil {\n\t\t\t\t// Go deeper\n\t\t\t\tcurrentNode = c\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Create child node\n\t\t\tn := newNode(t, search, currentNode, nil, rm.ppath, new(routeMethods), 0, nil, nil, nil)\n\t\t\tif rm.handler != nil {\n\t\t\t\tn.addMethod(method, \u0026rm)\n\t\t\t\tn.paramsCount = len(rm.pnames)\n\t\t\t}\n\n\t\t\tswitch t {\n\t\t\tcase staticKind:\n\t\t\t\tcurrentNode.addStaticChild(n)\n\t\t\tcase paramKind:\n\t\t\t\tcurrentNode.paramChild = n\n\t\t\tcase anyKind:\n\t\t\t\tcurrentNode.anyChild = n\n\t\t\t}\n\t\t\tcurrentNode.isLeaf = currentNode.staticChildren == nil \u0026\u0026 currentNode.paramChild == nil \u0026\u0026 currentNode.anyChild == nil\n\t\t} else {\n\t\t\t// Node already exists\n\t\t\tif rm.handler != nil {\n\t\t\t\tcurrentNode.addMethod(method, \u0026rm)\n\t\t\t\tcurrentNode.paramsCount = len(rm.pnames)\n\t\t\t\tcurrentNode.originalPath = rm.ppath\n\t\t\t}\n\t\t}\n\t\treturn\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 258,
      "end_line": 396,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "kind uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethod struct {\n\thandler HandlerFunc\n\tppath   string\n\tpnames  []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (n *node) addMethod(method string, h *routeMethod) {\n\tswitch method {\n\tcase http.MethodConnect:\n\t\tn.methods.connect = h\n\tcase http.MethodDelete:\n\t\tn.methods.delete = h\n\tcase http.MethodGet:\n\t\tn.methods.get = h\n\tcase http.MethodHead:\n\t\tn.methods.head = h\n\tcase http.MethodOptions:\n\t\tn.methods.options = h\n\tcase http.MethodPatch:\n\t\tn.methods.patch = h\n\tcase http.MethodPost:\n\t\tn.methods.post = h\n\tcase PROPFIND:\n\t\tn.methods.propfind = h\n\tcase http.MethodPut:\n\t\tn.methods.put = h\n\tcase http.MethodTrace:\n\t\tn.methods.trace = h\n\tcase REPORT:\n\t\tn.methods.report = h\n\tcase RouteNotFound:\n\t\tn.notFoundHandler = h\n\t\treturn // RouteNotFound/404 is not considered as a handler so no further logic needs to be executed\n\tdefault:\n\t\tif n.methods.anyOther == nil {\n\t\t\tn.methods.anyOther = make(map[string]*routeMethod)\n\t\t}\n\t\tif h.handler == nil {\n\t\t\tdelete(n.methods.anyOther, method)\n\t\t} else {\n\t\t\tn.methods.anyOther[method] = h\n\t\t}\n\t}\n\n\tn.methods.updateAllowHeader()\n\tn.isHandler = true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func newNode(\n\tt kind,\n\tpre string,\n\tp *node,\n\tsc children,\n\toriginalPath string,\n\tmethods *routeMethods,\n\tparamsCount int,\n\tparamChildren,\n\tanyChildren *node,\n\tnotFoundHandler *routeMethod,\n) *node {\n\treturn \u0026node{\n\t\tkind:            t,\n\t\tlabel:           pre[0],\n\t\tprefix:          pre,\n\t\tparent:          p,\n\t\tstaticChildren:  sc,\n\t\toriginalPath:    originalPath,\n\t\tmethods:         methods,\n\t\tparamsCount:     paramsCount,\n\t\tparamChild:      paramChildren,\n\t\tanyChild:        anyChildren,\n\t\tisLeaf:          sc == nil \u0026\u0026 paramChildren == nil \u0026\u0026 anyChildren == nil,\n\t\tisHandler:       methods.isHandler(),\n\t\tnotFoundHandler: notFoundHandler,\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "staticKind kind = iota",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (n *node) addStaticChild(c *node) {\n\tn.staticChildren = append(n.staticChildren, c)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (n *node) findChildWithLabel(l byte) *node {\n\tif c := n.findStaticChild(l); c != nil {\n\t\treturn c\n\t}\n\tif l == paramLabel {\n\t\treturn n.paramChild\n\t}\n\tif l == anyLabel {\n\t\treturn n.anyChild\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "paramKind",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "anyKind",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        258,
        259,
        260,
        261,
        262,
        263,
        265,
        266,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        359,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        371,
        372,
        373,
        374,
        375,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        394
      ],
      "cover_details": {
        "line_cover_rate": 0.8920863309352518
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:ParamNames",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        }
      ],
      "name": "ParamNames",
      "signature": "(c *context) ParamNames () []string",
      "ground_truth": "func (c *context) ParamNames() []string {\n\treturn c.pnames\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 339,
      "end_line": 341,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        339,
        340,
        341
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:durationsValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        }
      ],
      "name": "durationsValue",
      "signature": "(b *ValueBinder) durationsValue (sourceParam string, dest *[]time.Duration, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) durationsValue(sourceParam string, dest *[]time.Duration, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.durations(sourceParam, values, dest)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1202,
      "end_line": 1215,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) durations(sourceParam string, values []string, dest *[]time.Duration) *ValueBinder {\n\ttmp := make([]time.Duration, len(values))\n\tfor i, v := range values {\n\t\tt, err := time.ParseDuration(v)\n\t\tif err != nil {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{v}, \"failed to bind field value to Duration\", err))\n\t\t\tif b.failFast {\n\t\t\t\treturn b\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ttmp[i] = t\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1202,
        1203,
        1204,
        1205,
        1207,
        1208,
        1209,
        1210,
        1211,
        1212,
        1214
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:json",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "json",
      "signature": "(c *context) json (code int, i any, indent string) error",
      "ground_truth": "func (c *context) json(code int, i any, indent string) error {\n\tc.writeContentType(MIMEApplicationJSON)\n\tc.response.Status = code\n\treturn c.echo.JSONSerializer.Serialize(c, i, indent)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 502,
      "end_line": 506,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationJSON = \"application/json\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "JSONSerializer interface {\n\tSerialize(c Context, i interface{}, indent string) error\n\tDeserialize(c Context, i interface{}) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        502,
        503,
        504,
        505,
        506
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Handler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_SetHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "Handler",
      "signature": "(c *context) Handler () HandlerFunc",
      "ground_truth": "func (c *context) Handler() HandlerFunc {\n\treturn c.handler\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 627,
      "end_line": 629,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        627,
        628,
        629
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/json.go:Deserialize",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        }
      ],
      "name": "Deserialize",
      "signature": "(d DefaultJSONSerializer) Deserialize (c Context, i interface{}) error",
      "ground_truth": "func (d DefaultJSONSerializer) Deserialize(c Context, i interface{}) error {\n\terr := json.NewDecoder(c.Request().Body).Decode(i)\n\tif ute, ok := err.(*json.UnmarshalTypeError); ok {\n\t\treturn NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Unmarshal type error: expected=%v, got=%v, field=%v, offset=%v\", ute.Type, ute.Value, ute.Field, ute.Offset)).SetInternal(err)\n\t} else if se, ok := err.(*json.SyntaxError); ok {\n\t\treturn NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Syntax error: offset=%v, error=%v\", se.Offset, se.Error())).SetInternal(err)\n\t}\n\treturn err\n}",
      "function_comment": "// Deserialize reads a JSON from a request body and converts it into an interface.",
      "function_statement": "// Deserialize reads a JSON from a request body and converts it into an interface.",
      "start_line": 26,
      "end_line": 34,
      "file_path": "./json.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/json.go",
          "code_snippet": "DefaultJSONSerializer struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/stream.go",
          "code_snippet": "func (dec *Decoder) Decode(v any) error {\n\tif dec.err != nil {\n\t\treturn dec.err\n\t}\n\n\tif err := dec.tokenPrepareForDecode(); err != nil {\n\t\treturn err\n\t}\n\n\tif !dec.tokenValueAllowed() {\n\t\treturn \u0026SyntaxError{msg: \"not at beginning of value\", Offset: dec.InputOffset()}\n\t}\n\n\t// Read whole value into buffer.\n\tn, err := dec.readValue()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdec.d.init(dec.buf[dec.scanp : dec.scanp+n])\n\tdec.scanp += n\n\n\t// Don't save err from unmarshal into dec.err:\n\t// the connection is still usable since we read a complete JSON\n\t// object from it before the error happened.\n\terr = dec.d.unmarshal(v)\n\n\t// fixup token streaming state\n\tdec.tokenValueEnd()\n\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/stream.go",
          "code_snippet": "func NewDecoder(r io.Reader) *Decoder {\n\treturn \u0026Decoder{r: r}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/decode.go",
          "code_snippet": "UnmarshalTypeError struct {\n\tValue  string       // description of JSON value - \"bool\", \"array\", \"number -5\"\n\tType   reflect.Type // type of Go value it could not be assigned to\n\tOffset int64        // error occurred after reading Offset bytes\n\tStruct string       // name of the struct type containing the field\n\tField  string       // the full path from root node to the field\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/scanner.go",
          "code_snippet": "SyntaxError struct {\n\tmsg    string // description of error\n\tOffset int64  // error occurred after reading Offset bytes\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/scanner.go",
          "code_snippet": "func (e *SyntaxError) Error() string { return e.msg }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:bools",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "bools",
      "signature": "(b *ValueBinder) bools (sourceParam string, values []string, dest *[]bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) bools(sourceParam string, values []string, dest *[]bool) *ValueBinder {\n\ttmp := make([]bool, len(values))\n\tfor i, v := range values {\n\t\tb.bool(sourceParam, v, \u0026tmp[i])\n\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\treturn b\n\t\t}\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 950,
      "end_line": 962,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) bool(sourceParam string, value string, dest *bool) *ValueBinder {\n\tn, err := strconv.ParseBool(value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to bool\", err))\n\t\treturn b\n\t}\n\n\t*dest = n\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        950,
        951,
        952,
        953,
        954,
        955,
        956,
        958,
        959,
        960,
        961
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group_fs.go:StaticFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "StaticFS",
      "signature": "(g *Group) StaticFS (pathPrefix string, filesystem fs.FS)",
      "ground_truth": "func (g *Group) StaticFS(pathPrefix string, filesystem fs.FS) {\n\tg.Add(\n\t\thttp.MethodGet,\n\t\tpathPrefix+\"*\",\n\t\tStaticDirectoryHandler(filesystem, false),\n\t)\n}",
      "function_comment": "// StaticFS implements `Echo#StaticFS()` for sub-routes within the Group.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n// including `assets/images` as their prefix.",
      "function_statement": "// StaticFS implements `Echo#StaticFS()` for sub-routes within the Group.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n// including `assets/images` as their prefix.",
      "start_line": 22,
      "end_line": 28,
      "file_path": "./group_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func StaticDirectoryHandler(fileSystem fs.FS, disablePathUnescaping bool) HandlerFunc {\n\treturn func(c Context) error {\n\t\tp := c.Param(\"*\")\n\t\tif !disablePathUnescaping { // when router is already unescaping we do not want to do is twice\n\t\t\ttmpPath, err := url.PathUnescape(p)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to unescape path variable: %w\", err)\n\t\t\t}\n\t\t\tp = tmpPath\n\t\t}\n\n\t\t// fs.FS.Open() already assumes that file names are relative to FS root path and considers name with prefix `/` as invalid\n\t\tname := filepath.ToSlash(filepath.Clean(strings.TrimPrefix(p, \"/\")))\n\t\tfi, err := fs.Stat(fileSystem, name)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\n\t\t// If the request is for a directory and does not end with \"/\"\n\t\tp = c.Request().URL.Path // path must not be empty.\n\t\tif fi.IsDir() \u0026\u0026 len(p) \u003e 0 \u0026\u0026 p[len(p)-1] != '/' {\n\t\t\t// Redirect to ends with \"/\"\n\t\t\treturn c.Redirect(http.StatusMovedPermanently, sanitizeURI(p+\"/\"))\n\t\t}\n\t\treturn fsFile(c, name, fileSystem)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        22,
        23,
        24,
        25,
        26,
        27,
        28
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:Find",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "Find",
      "signature": "(r *Router) Find (method, path string, c Context)",
      "ground_truth": "func (r *Router) Find(method, path string, c Context) {\n\tctx := c.(*context)\n\tcurrentNode := r.tree // Current node as root\n\n\tvar (\n\t\tpreviousBestMatchNode *node\n\t\tmatchedRouteMethod    *routeMethod\n\t\t// search stores the remaining path to check for match. By each iteration we move from start of path to end of the path\n\t\t// and search value gets shorter and shorter.\n\t\tsearch      = path\n\t\tsearchIndex = 0\n\t\tparamIndex  int           // Param counter\n\t\tparamValues = ctx.pvalues // Use the internal slice so the interface can keep the illusion of a dynamic slice\n\t)\n\n\t// Backtracking is needed when a dead end (leaf node) is reached in the router tree.\n\t// To backtrack the current node will be changed to the parent node and the next kind for the\n\t// router logic will be returned based on fromKind or kind of the dead end node (static \u003e param \u003e any).\n\t// For example if there is no static node match we should check parent next sibling by kind (param).\n\t// Backtracking itself does not check if there is a next sibling, this is done by the router logic.\n\tbacktrackToNextNodeKind := func(fromKind kind) (nextNodeKind kind, valid bool) {\n\t\tprevious := currentNode\n\t\tcurrentNode = previous.parent\n\t\tvalid = currentNode != nil\n\n\t\t// Next node type by priority\n\t\tif previous.kind == anyKind {\n\t\t\tnextNodeKind = staticKind\n\t\t} else {\n\t\t\tnextNodeKind = previous.kind + 1\n\t\t}\n\n\t\tif fromKind == staticKind {\n\t\t\t// when backtracking is done from static kind block we did not change search so nothing to restore\n\t\t\treturn\n\t\t}\n\n\t\t// restore search to value it was before we move to current node we are backtracking from.\n\t\tif previous.kind == staticKind {\n\t\t\tsearchIndex -= len(previous.prefix)\n\t\t} else {\n\t\t\tparamIndex--\n\t\t\t// for param/any node.prefix value is always `:` so we can not deduce searchIndex from that and must use pValue\n\t\t\t// for that index as it would also contain part of path we cut off before moving into node we are backtracking from\n\t\t\tsearchIndex -= len(paramValues[paramIndex])\n\t\t\tparamValues[paramIndex] = \"\"\n\t\t}\n\t\tsearch = path[searchIndex:]\n\t\treturn\n\t}\n\n\t// Router tree is implemented by longest common prefix array (LCP array) https://en.wikipedia.org/wiki/LCP_array\n\t// Tree search is implemented as for loop where one loop iteration is divided into 3 separate blocks\n\t// Each of these blocks checks specific kind of node (static/param/any). Order of blocks reflex their priority in routing.\n\t// Search order/priority is: static \u003e param \u003e any.\n\t//\n\t// Note: backtracking in tree is implemented by replacing/switching currentNode to previous node\n\t// and hoping to (goto statement) next block by priority to check if it is the match.\n\tfor {\n\t\tprefixLen := 0 // Prefix length\n\t\tlcpLen := 0    // LCP (longest common prefix) length\n\n\t\tif currentNode.kind == staticKind {\n\t\t\tsearchLen := len(search)\n\t\t\tprefixLen = len(currentNode.prefix)\n\n\t\t\t// LCP - Longest Common Prefix (https://en.wikipedia.org/wiki/LCP_array)\n\t\t\tmax := prefixLen\n\t\t\tif searchLen \u003c max {\n\t\t\t\tmax = searchLen\n\t\t\t}\n\t\t\tfor ; lcpLen \u003c max \u0026\u0026 search[lcpLen] == currentNode.prefix[lcpLen]; lcpLen++ {\n\t\t\t}\n\t\t}\n\n\t\tif lcpLen != prefixLen {\n\t\t\t// No matching prefix, let's backtrack to the first possible alternative node of the decision path\n\t\t\tnk, ok := backtrackToNextNodeKind(staticKind)\n\t\t\tif !ok {\n\t\t\t\treturn // No other possibilities on the decision path, handler will be whatever context is reset to.\n\t\t\t} else if nk == paramKind {\n\t\t\t\tgoto Param\n\t\t\t\t// NOTE: this case (backtracking from static node to previous any node) can not happen by current any matching logic. Any node is end of search currently\n\t\t\t\t//} else if nk == anyKind {\n\t\t\t\t//\tgoto Any\n\t\t\t} else {\n\t\t\t\t// Not found (this should never be possible for static node we are looking currently)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// The full prefix has matched, remove the prefix from the remaining search\n\t\tsearch = search[lcpLen:]\n\t\tsearchIndex = searchIndex + lcpLen\n\n\t\t// Finish routing if is no request path remaining to search\n\t\tif search == \"\" {\n\t\t\t// in case of node that is handler we have exact method type match or something for 405 to use\n\t\t\tif currentNode.isHandler {\n\t\t\t\t// check if current node has handler registered for http method we are looking for. we store currentNode as\n\t\t\t\t// best matching in case we do no find no more routes matching this path+method\n\t\t\t\tif previousBestMatchNode == nil {\n\t\t\t\t\tpreviousBestMatchNode = currentNode\n\t\t\t\t}\n\t\t\t\tif h := currentNode.findMethod(method); h != nil {\n\t\t\t\t\tmatchedRouteMethod = h\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t} else if currentNode.notFoundHandler != nil {\n\t\t\t\tmatchedRouteMethod = currentNode.notFoundHandler\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Static node\n\t\tif search != \"\" {\n\t\t\tif child := currentNode.findStaticChild(search[0]); child != nil {\n\t\t\t\tcurrentNode = child\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\tParam:\n\t\t// Param node\n\t\tif child := currentNode.paramChild; search != \"\" \u0026\u0026 child != nil {\n\t\t\tcurrentNode = child\n\t\t\ti := 0\n\t\t\tl := len(search)\n\t\t\tif currentNode.isLeaf {\n\t\t\t\t// when param node does not have any children (path param is last piece of route path) then param node should\n\t\t\t\t// act similarly to any node - consider all remaining search as match\n\t\t\t\ti = l\n\t\t\t} else {\n\t\t\t\tfor ; i \u003c l \u0026\u0026 search[i] != '/'; i++ {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparamValues[paramIndex] = search[:i]\n\t\t\tparamIndex++\n\t\t\tsearch = search[i:]\n\t\t\tsearchIndex = searchIndex + i\n\t\t\tcontinue\n\t\t}\n\n\tAny:\n\t\t// Any node\n\t\tif child := currentNode.anyChild; child != nil {\n\t\t\t// If any node is found, use remaining path for paramValues\n\t\t\tcurrentNode = child\n\t\t\tparamValues[currentNode.paramsCount-1] = search\n\n\t\t\t// update indexes/search in case we need to backtrack when no handler match is found\n\t\t\tparamIndex++\n\t\t\tsearchIndex += +len(search)\n\t\t\tsearch = \"\"\n\n\t\t\tif h := currentNode.findMethod(method); h != nil {\n\t\t\t\tmatchedRouteMethod = h\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// we store currentNode as best matching in case we do not find more routes matching this path+method. Needed for 405\n\t\t\tif previousBestMatchNode == nil {\n\t\t\t\tpreviousBestMatchNode = currentNode\n\t\t\t}\n\t\t\tif currentNode.notFoundHandler != nil {\n\t\t\t\tmatchedRouteMethod = currentNode.notFoundHandler\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Let's backtrack to the first possible alternative node of the decision path\n\t\tnk, ok := backtrackToNextNodeKind(anyKind)\n\t\tif !ok {\n\t\t\tbreak // No other possibilities on the decision path\n\t\t} else if nk == paramKind {\n\t\t\tgoto Param\n\t\t} else if nk == anyKind {\n\t\t\tgoto Any\n\t\t} else {\n\t\t\t// Not found\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif currentNode == nil \u0026\u0026 previousBestMatchNode == nil {\n\t\treturn // nothing matched at all\n\t}\n\n\t// matchedHandler could be method+path handler that we matched or notFoundHandler from node with matching path\n\t// user provided not found (404) handler has priority over generic method not found (405) handler or global 404 handler\n\tvar rPath string\n\tvar rPNames []string\n\tif matchedRouteMethod != nil {\n\t\trPath = matchedRouteMethod.ppath\n\t\trPNames = matchedRouteMethod.pnames\n\t\tctx.handler = matchedRouteMethod.handler\n\t} else {\n\t\t// use previous match as basis. although we have no matching handler we have path match.\n\t\t// so we can send http.StatusMethodNotAllowed (405) instead of http.StatusNotFound (404)\n\t\tcurrentNode = previousBestMatchNode\n\n\t\trPath = currentNode.originalPath\n\t\trPNames = nil // no params here\n\t\tctx.handler = NotFoundHandler\n\t\tif currentNode.notFoundHandler != nil {\n\t\t\trPath = currentNode.notFoundHandler.ppath\n\t\t\trPNames = currentNode.notFoundHandler.pnames\n\t\t\tctx.handler = currentNode.notFoundHandler.handler\n\t\t} else if currentNode.isHandler {\n\t\t\tctx.Set(ContextKeyHeaderAllow, currentNode.methods.allowHeader)\n\t\t\tctx.handler = MethodNotAllowedHandler\n\t\t\tif method == http.MethodOptions {\n\t\t\t\tctx.handler = optionsMethodHandler(currentNode.methods.allowHeader)\n\t\t\t}\n\t\t}\n\t}\n\tctx.path = rPath\n\tctx.pnames = rPNames\n}",
      "function_comment": "// Find lookup a handler registered for method and path. It also parses URL for path\n// parameters and load them into context.\n//\n// For performance:\n//\n// - Get context from `Echo#AcquireContext()`\n// - Reset it `Context#Reset()`\n// - Return it `Echo#ReleaseContext()`.",
      "function_statement": "// Find lookup a handler registered for method and path. It also parses URL for path\n// parameters and load them into context.\n//\n// For performance:\n//\n// - Get context from `Echo#AcquireContext()`\n// - Reset it `Context#Reset()`\n// - Return it `Echo#ReleaseContext()`.",
      "start_line": 542,
      "end_line": 760,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethod struct {\n\thandler HandlerFunc\n\tppath   string\n\tpnames  []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "kind uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "anyKind",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "staticKind kind = iota",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "paramKind",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (n *node) findMethod(method string) *routeMethod {\n\tswitch method {\n\tcase http.MethodConnect:\n\t\treturn n.methods.connect\n\tcase http.MethodDelete:\n\t\treturn n.methods.delete\n\tcase http.MethodGet:\n\t\treturn n.methods.get\n\tcase http.MethodHead:\n\t\treturn n.methods.head\n\tcase http.MethodOptions:\n\t\treturn n.methods.options\n\tcase http.MethodPatch:\n\t\treturn n.methods.patch\n\tcase http.MethodPost:\n\t\treturn n.methods.post\n\tcase PROPFIND:\n\t\treturn n.methods.propfind\n\tcase http.MethodPut:\n\t\treturn n.methods.put\n\tcase http.MethodTrace:\n\t\treturn n.methods.trace\n\tcase REPORT:\n\t\treturn n.methods.report\n\tdefault: // RouteNotFound/404 is not considered as a handler\n\t\treturn n.methods.anyOther[method]\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (n *node) findStaticChild(l byte) *node {\n\tfor _, c := range n.staticChildren {\n\t\tif c.label == l {\n\t\t\treturn c\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "NotFoundHandler = func(c Context) error {\n\treturn ErrNotFound\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Set(key string, val any) {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif c.store == nil {\n\t\tc.store = make(Map)\n\t}\n\tc.store[key] = val\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "ContextKeyHeaderAllow = \"echo_header_allow\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MethodNotAllowedHandler = func(c Context) error {\n\t// See RFC 7231 section 7.4.1: An origin server MUST generate an Allow field in a 405 (Method Not Allowed)\n\t// response and MAY do so in any other response. For disabled resources an empty Allow header may be returned\n\trouterAllowMethods, ok := c.Get(ContextKeyHeaderAllow).(string)\n\tif ok \u0026\u0026 routerAllowMethods != \"\" {\n\t\tc.Response().Header().Set(HeaderAllow, routerAllowMethods)\n\t}\n\treturn ErrMethodNotAllowed\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func optionsMethodHandler(allowMethods string) func(c Context) error {\n\treturn func(c Context) error {\n\t\t// Note: we are not handling most of the CORS headers here. CORS is handled by CORS middleware\n\t\t// 'OPTIONS' method RFC: https://httpwg.org/specs/rfc7231.html#OPTIONS\n\t\t// 'Allow' header RFC: https://datatracker.ietf.org/doc/html/rfc7231#section-7.4.1\n\t\tc.Response().Header().Add(HeaderAllow, allowMethods)\n\t\treturn c.NoContent(http.StatusNoContent)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        542,
        543,
        544,
        545,
        546,
        547,
        548,
        549,
        550,
        551,
        552,
        553,
        554,
        555,
        556,
        557,
        558,
        559,
        560,
        561,
        562,
        563,
        564,
        565,
        566,
        567,
        568,
        569,
        570,
        571,
        572,
        574,
        575,
        576,
        577,
        580,
        581,
        582,
        583,
        584,
        585,
        586,
        587,
        588,
        589,
        590,
        600,
        601,
        602,
        603,
        604,
        605,
        606,
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        617,
        618,
        619,
        620,
        621,
        622,
        623,
        634,
        635,
        636,
        637,
        638,
        639,
        640,
        641,
        642,
        643,
        644,
        645,
        646,
        647,
        648,
        650,
        651,
        652,
        657,
        658,
        659,
        660,
        666,
        667,
        668,
        669,
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        679,
        680,
        681,
        682,
        683,
        688,
        689,
        690,
        691,
        692,
        693,
        694,
        695,
        696,
        697,
        698,
        699,
        700,
        703,
        704,
        705,
        706,
        707,
        708,
        713,
        714,
        715,
        716,
        717,
        718,
        719,
        720,
        721,
        722,
        726,
        727,
        728,
        732,
        733,
        734,
        735,
        736,
        737,
        738,
        739,
        740,
        741,
        742,
        743,
        744,
        745,
        746,
        747,
        748,
        749,
        750,
        751,
        752,
        753,
        754,
        755,
        758,
        759
      ],
      "cover_details": {
        "line_cover_rate": 0.7488584474885844
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:Ignore",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        }
      ],
      "name": "Ignore",
      "signature": "(w *ignorableWriter) Ignore (ignore bool)",
      "ground_truth": "func (w *ignorableWriter) Ignore(ignore bool) {\n\tw.lock.Lock()\n\tw.ignoreWrites = ignore\n\tw.lock.Unlock()\n}",
      "function_comment": "// ignorableWriter is ResponseWriter implementations that allows us to mark writer to ignore further write calls. This\n// is handy in cases when you do not have direct control of code being executed (3rd party middleware) but want to make\n// sure that external code will not be able to write response to the client.",
      "function_statement": "// ignorableWriter is ResponseWriter implementations that allows us to mark writer to ignore further write calls. This\n// is handy in cases when you do not have direct control of code being executed (3rd party middleware) but want to make\n// sure that external code will not be able to write response to the client.",
      "start_line": 199,
      "end_line": 203,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "ignorableWriter struct {\n\thttp.ResponseWriter\n\n\tlock         sync.Mutex\n\tignoreWrites bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        199,
        200,
        201,
        202,
        203
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustUint",
      "signature": "(b *ValueBinder) MustUint (sourceParam string, dest *uint) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint(sourceParam string, dest *uint) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 0, true)\n}",
      "function_comment": "// MustUint requires parameter value to exist to bind to uint variable. Returns error when value does not exist",
      "function_statement": "// MustUint requires parameter value to exist to bind to uint variable. Returns error when value does not exist",
      "start_line": 727,
      "end_line": 729,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        727,
        728,
        729
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt32s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustInt32s",
      "signature": "(b *ValueBinder) MustInt32s (sourceParam string, dest *[]int32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt32s(sourceParam string, dest *[]int32) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustInt32s requires parameter value to exist to bind to int32 slice variable. Returns error when value does not exist",
      "function_statement": "// MustInt32s requires parameter value to exist to bind to int32 slice variable. Returns error when value does not exist",
      "start_line": 637,
      "end_line": 639,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        637,
        638,
        639
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetRequest",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Request"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        }
      ],
      "name": "SetRequest",
      "signature": "(c *context) SetRequest (r *http.Request)",
      "ground_truth": "func (c *context) SetRequest(r *http.Request) {\n\tc.request = r\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 254,
      "end_line": 256,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        254,
        255,
        256
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:Add",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "Add",
      "signature": "(r *Router) Add (method, path string, h HandlerFunc)",
      "ground_truth": "func (r *Router) Add(method, path string, h HandlerFunc) {\n\tr.insert(method, normalizePathSlash(path), h)\n}",
      "function_comment": "// Add registers a new route for method and path with matching handler.",
      "function_statement": "// Add registers a new route for method and path with matching handler.",
      "start_line": 210,
      "end_line": 212,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) insert(method, path string, h HandlerFunc) {\n\tpath = normalizePathSlash(path)\n\tpnames := []string{} // Param names\n\tppath := path        // Pristine path\n\n\tif h == nil \u0026\u0026 r.echo.Logger != nil {\n\t\t// FIXME: in future we should return error\n\t\tr.echo.Logger.Errorf(\"Adding route without handler function: %v:%v\", method, path)\n\t}\n\n\tfor i, lcpIndex := 0, len(path); i \u003c lcpIndex; i++ {\n\t\tif path[i] == ':' {\n\t\t\tif i \u003e 0 \u0026\u0026 path[i-1] == '\\\\' {\n\t\t\t\tpath = path[:i-1] + path[i:]\n\t\t\t\ti--\n\t\t\t\tlcpIndex--\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tj := i + 1\n\n\t\t\tr.insertNode(method, path[:i], staticKind, routeMethod{})\n\t\t\tfor ; i \u003c lcpIndex \u0026\u0026 path[i] != '/'; i++ {\n\t\t\t}\n\n\t\t\tpnames = append(pnames, path[j:i])\n\t\t\tpath = path[:j] + path[i:]\n\t\t\ti, lcpIndex = j, len(path)\n\n\t\t\tif i == lcpIndex {\n\t\t\t\t// path node is last fragment of route path. ie. `/users/:id`\n\t\t\t\tr.insertNode(method, path[:i], paramKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n\t\t\t} else {\n\t\t\t\tr.insertNode(method, path[:i], paramKind, routeMethod{})\n\t\t\t}\n\t\t} else if path[i] == '*' {\n\t\t\tr.insertNode(method, path[:i], staticKind, routeMethod{})\n\t\t\tpnames = append(pnames, \"*\")\n\t\t\tr.insertNode(method, path[:i+1], anyKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n\t\t}\n\t}\n\n\tr.insertNode(method, path, staticKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func normalizePathSlash(path string) string {\n\tif path == \"\" {\n\t\tpath = \"/\"\n\t} else if path[0] != '/' {\n\t\tpath = \"/\" + path\n\t}\n\treturn path\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        210,
        211,
        212
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:contentDisposition",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        }
      ],
      "name": "contentDisposition",
      "signature": "(c *context) contentDisposition (file, name, dispositionType string) error",
      "ground_truth": "func (c *context) contentDisposition(file, name, dispositionType string) error {\n\tc.response.Header().Set(HeaderContentDisposition, fmt.Sprintf(`%s; filename=\"%s\"`, dispositionType, quoteEscaper.Replace(name)))\n\treturn c.File(file)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 600,
      "end_line": 603,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentDisposition  = \"Content-Disposition\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "quoteEscaper = strings.NewReplacer(\"\\\\\", \"\\\\\\\\\", `\"`, \"\\\\\\\"\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context_fs.go",
          "code_snippet": "func (c *context) File(file string) error {\n\treturn fsFile(c, file, c.echo.Filesystem)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func (r *Replacer) Replace(s string) string {\n\tr.once.Do(r.buildOnce)\n\treturn r.r.Replace(s)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        600,
        601,
        602,
        603
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Reset",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "Reset",
      "signature": "(c *context) Reset (r *http.Request, w http.ResponseWriter)",
      "ground_truth": "func (c *context) Reset(r *http.Request, w http.ResponseWriter) {\n\tc.request = r\n\tc.response.reset(w)\n\tc.query = nil\n\tc.handler = NotFoundHandler\n\tc.store = nil\n\tc.path = \"\"\n\tc.pnames = nil\n\tc.logger = nil\n\t// NOTE: Don't reset because it has to have length c.echo.maxParam (or bigger) at all times\n\tfor i := 0; i \u003c len(c.pvalues); i++ {\n\t\tc.pvalues[i] = \"\"\n\t}\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 647,
      "end_line": 660,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) reset(w http.ResponseWriter) {\n\tr.beforeFuncs = nil\n\tr.afterFuncs = nil\n\tr.Writer = w\n\tr.Size = 0\n\tr.Status = http.StatusOK\n\tr.Committed = false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "NotFoundHandler = func(c Context) error {\n\treturn ErrNotFound\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        647,
        648,
        649,
        650,
        651,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        659
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:NonWWWRedirectWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestNonWWWRedirectWithConfig"
        }
      ],
      "name": "NonWWWRedirectWithConfig",
      "signature": "NonWWWRedirectWithConfig (config RedirectConfig) echo.MiddlewareFunc",
      "ground_truth": "func NonWWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif strings.HasPrefix(host, www) {\n\t\t\treturn true, scheme + \"://\" + host[4:] + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
      "function_comment": "// NonWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `NonWWWRedirect()`.",
      "function_statement": "// NonWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `NonWWWRedirect()`.",
      "start_line": 123,
      "end_line": 130,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "RedirectConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional. Default value http.StatusMovedPermanently.\n\tCode int `yaml:\"code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func redirect(config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRedirectConfig.Skipper\n\t}\n\tif config.Code == 0 {\n\t\tconfig.Code = DefaultRedirectConfig.Code\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq, scheme := c.Request(), c.Scheme()\n\t\t\thost := req.Host\n\t\t\tif ok, url := cb(scheme, host, req.RequestURI); ok {\n\t\t\t\treturn c.Redirect(config.Code, url)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "www = \"www.\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasPrefix(s, prefix string) bool {\n\treturn stringslite.HasPrefix(s, prefix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        123,
        124,
        125,
        126,
        127,
        128
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:HTTPSWWWRedirectWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSWWWRedirect"
        }
      ],
      "name": "HTTPSWWWRedirectWithConfig",
      "signature": "HTTPSWWWRedirectWithConfig (config RedirectConfig) echo.MiddlewareFunc",
      "ground_truth": "func HTTPSWWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif scheme != \"https\" \u0026\u0026 !strings.HasPrefix(host, www) {\n\t\t\treturn true, \"https://www.\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
      "function_comment": "// HTTPSWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `HTTPSWWWRedirect()`.",
      "function_statement": "// HTTPSWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `HTTPSWWWRedirect()`.",
      "start_line": 65,
      "end_line": 72,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "RedirectConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional. Default value http.StatusMovedPermanently.\n\tCode int `yaml:\"code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func redirect(config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRedirectConfig.Skipper\n\t}\n\tif config.Code == 0 {\n\t\tconfig.Code = DefaultRedirectConfig.Code\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq, scheme := c.Request(), c.Scheme()\n\t\t\thost := req.Host\n\t\t\tif ok, url := cb(scheme, host, req.RequestURI); ok {\n\t\t\t\treturn c.Redirect(config.Code, url)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "www = \"www.\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasPrefix(s, prefix string) bool {\n\treturn stringslite.HasPrefix(s, prefix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        65,
        66,
        67,
        68,
        69,
        70
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int64s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Int64s",
      "signature": "(b *ValueBinder) Int64s (sourceParam string, dest *[]int64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int64s(sourceParam string, dest *[]int64) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Int64s binds parameter to slice of int64",
      "function_statement": "// Int64s binds parameter to slice of int64",
      "start_line": 622,
      "end_line": 624,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        622,
        623,
        624
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/json.go:Serialize",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "Serialize",
      "signature": "(d DefaultJSONSerializer) Serialize (c Context, i interface{}, indent string) error",
      "ground_truth": "func (d DefaultJSONSerializer) Serialize(c Context, i interface{}, indent string) error {\n\tenc := json.NewEncoder(c.Response())\n\tif indent != \"\" {\n\t\tenc.SetIndent(\"\", indent)\n\t}\n\treturn enc.Encode(i)\n}",
      "function_comment": "// Serialize converts an interface into a json and writes it to the response.\n// You can optionally use the indent parameter to produce pretty JSONs.",
      "function_statement": "// Serialize converts an interface into a json and writes it to the response.\n// You can optionally use the indent parameter to produce pretty JSONs.",
      "start_line": 17,
      "end_line": 23,
      "file_path": "./json.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/json.go",
          "code_snippet": "DefaultJSONSerializer struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/stream.go",
          "code_snippet": "func NewEncoder(w io.Writer) *Encoder {\n\treturn \u0026Encoder{w: w, escapeHTML: true}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/stream.go",
          "code_snippet": "func (enc *Encoder) SetIndent(prefix, indent string) {\n\tenc.indentPrefix = prefix\n\tenc.indentValue = indent\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/stream.go",
          "code_snippet": "func (enc *Encoder) Encode(v any) error {\n\tif enc.err != nil {\n\t\treturn enc.err\n\t}\n\n\te := newEncodeState()\n\tdefer encodeStatePool.Put(e)\n\n\terr := e.marshal(v, encOpts{escapeHTML: enc.escapeHTML})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Terminate each value with a newline.\n\t// This makes the output look a little nicer\n\t// when debugging, and some kind of space\n\t// is required if the encoded value was a number,\n\t// so that the reader knows there aren't more\n\t// digits coming.\n\te.WriteByte('\\n')\n\n\tb := e.Bytes()\n\tif enc.indentPrefix != \"\" || enc.indentValue != \"\" {\n\t\tenc.indentBuf, err = appendIndent(enc.indentBuf[:0], b, enc.indentPrefix, enc.indentValue)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tb = enc.indentBuf\n\t}\n\tif _, err = enc.w.Write(b); err != nil {\n\t\tenc.err = err\n\t}\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:FormFile",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        }
      ],
      "name": "FormFile",
      "signature": "(c *context) FormFile (name string) (*multipart.FileHeader, error)",
      "ground_truth": "func (c *context) FormFile(name string) (*multipart.FileHeader, error) {\n\tf, fh, err := c.request.FormFile(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tf.Close()\n\treturn fh, nil\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 407,
      "end_line": 414,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/mime/multipart/formdata.go",
          "code_snippet": "FileHeader struct {\n\tFilename string\n\tHeader   textproto.MIMEHeader\n\tSize     int64\n\n\tcontent   []byte\n\ttmpfile   string\n\ttmpoff    int64\n\ttmpshared bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error) {\n\tif r.MultipartForm == multipartByReader {\n\t\treturn nil, nil, errors.New(\"http: multipart handled by MultipartReader\")\n\t}\n\tif r.MultipartForm == nil {\n\t\terr := r.ParseMultipartForm(defaultMaxMemory)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t}\n\tif r.MultipartForm != nil \u0026\u0026 r.MultipartForm.File != nil {\n\t\tif fhs := r.MultipartForm.File[key]; len(fhs) \u003e 0 {\n\t\t\tf, err := fhs[0].Open()\n\t\t\treturn f, fhs[0], err\n\t\t}\n\t}\n\treturn nil, nil, ErrMissingFile\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        407,
        408,
        409,
        412,
        413
      ],
      "cover_details": {
        "line_cover_rate": 0.625
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:HTTPSRedirectWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSRedirect"
        }
      ],
      "name": "HTTPSRedirectWithConfig",
      "signature": "HTTPSRedirectWithConfig (config RedirectConfig) echo.MiddlewareFunc",
      "ground_truth": "func HTTPSRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif scheme != \"https\" {\n\t\t\treturn true, \"https://\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
      "function_comment": "// HTTPSRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `HTTPSRedirect()`.",
      "function_statement": "// HTTPSRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `HTTPSRedirect()`.",
      "start_line": 46,
      "end_line": 53,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "RedirectConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional. Default value http.StatusMovedPermanently.\n\tCode int `yaml:\"code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func redirect(config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRedirectConfig.Skipper\n\t}\n\tif config.Code == 0 {\n\t\tconfig.Code = DefaultRedirectConfig.Code\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq, scheme := c.Request(), c.Scheme()\n\t\t\thost := req.Host\n\t\t\tif ok, url := cb(scheme, host, req.RequestURI); ok {\n\t\t\t\treturn c.Redirect(config.Code, url)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        46,
        47,
        48,
        49,
        50,
        51
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:HTTPSNonWWWRedirectWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSNonWWWRedirect"
        }
      ],
      "name": "HTTPSNonWWWRedirectWithConfig",
      "signature": "HTTPSNonWWWRedirectWithConfig (config RedirectConfig) echo.MiddlewareFunc",
      "ground_truth": "func HTTPSNonWWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (ok bool, url string) {\n\t\tif scheme != \"https\" {\n\t\t\thost = strings.TrimPrefix(host, www)\n\t\t\treturn true, \"https://\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
      "function_comment": "// HTTPSNonWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `HTTPSNonWWWRedirect()`.",
      "function_statement": "// HTTPSNonWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `HTTPSNonWWWRedirect()`.",
      "start_line": 84,
      "end_line": 92,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "RedirectConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional. Default value http.StatusMovedPermanently.\n\tCode int `yaml:\"code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func redirect(config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRedirectConfig.Skipper\n\t}\n\tif config.Code == 0 {\n\t\tconfig.Code = DefaultRedirectConfig.Code\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq, scheme := c.Request(), c.Scheme()\n\t\t\thost := req.Host\n\t\t\tif ok, url := cb(scheme, host, req.RequestURI); ok {\n\t\t\t\treturn c.Redirect(config.Code, url)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "www = \"www.\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimPrefix(s, prefix string) string {\n\treturn stringslite.TrimPrefix(s, prefix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        84,
        85,
        86,
        87,
        88,
        89,
        90
      ],
      "cover_details": {
        "line_cover_rate": 0.7777777777777778
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:bindData",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_bindDataToMap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindbindData"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        }
      ],
      "name": "bindData",
      "signature": "(b *DefaultBinder) bindData (destination interface{}, data map[string][]string, tag string, dataFiles map[string][]*multipart.FileHeader) error",
      "ground_truth": "func (b *DefaultBinder) bindData(destination interface{}, data map[string][]string, tag string, dataFiles map[string][]*multipart.FileHeader) error {\n\tif destination == nil || (len(data) == 0 \u0026\u0026 len(dataFiles) == 0) {\n\t\treturn nil\n\t}\n\thasFiles := len(dataFiles) \u003e 0\n\ttyp := reflect.TypeOf(destination).Elem()\n\tval := reflect.ValueOf(destination).Elem()\n\n\t// Support binding to limited Map destinations:\n\t// - map[string][]string,\n\t// - map[string]string \u003c-- (binds first value from data slice)\n\t// - map[string]interface{}\n\t// You are better off binding to struct but there are user who want this map feature. Source of data for these cases are:\n\t// params,query,header,form as these sources produce string values, most of the time slice of strings, actually.\n\tif typ.Kind() == reflect.Map \u0026\u0026 typ.Key().Kind() == reflect.String {\n\t\tk := typ.Elem().Kind()\n\t\tisElemInterface := k == reflect.Interface\n\t\tisElemString := k == reflect.String\n\t\tisElemSliceOfStrings := k == reflect.Slice \u0026\u0026 typ.Elem().Elem().Kind() == reflect.String\n\t\tif !(isElemSliceOfStrings || isElemString || isElemInterface) {\n\t\t\treturn nil\n\t\t}\n\t\tif val.IsNil() {\n\t\t\tval.Set(reflect.MakeMap(typ))\n\t\t}\n\t\tfor k, v := range data {\n\t\t\tif isElemString {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else if isElemInterface {\n\t\t\t\t// To maintain backward compatibility, we always bind to the first string value\n\t\t\t\t// and not the slice of strings when dealing with map[string]interface{}{}\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v))\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\t// !struct\n\tif typ.Kind() != reflect.Struct {\n\t\tif tag == \"param\" || tag == \"query\" || tag == \"header\" {\n\t\t\t// incompatible type, data is probably to be found in the body\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"binding element must be a struct\")\n\t}\n\n\tfor i := 0; i \u003c typ.NumField(); i++ { // iterate over all destination fields\n\t\ttypeField := typ.Field(i)\n\t\tstructField := val.Field(i)\n\t\tif typeField.Anonymous {\n\t\t\tif structField.Kind() == reflect.Ptr {\n\t\t\t\tstructField = structField.Elem()\n\t\t\t}\n\t\t}\n\t\tif !structField.CanSet() {\n\t\t\tcontinue\n\t\t}\n\t\tstructFieldKind := structField.Kind()\n\t\tinputFieldName := typeField.Tag.Get(tag)\n\t\tif typeField.Anonymous \u0026\u0026 structFieldKind == reflect.Struct \u0026\u0026 inputFieldName != \"\" {\n\t\t\t// if anonymous struct with query/param/form tags, report an error\n\t\t\treturn errors.New(\"query/param/form tags are not allowed with anonymous struct field\")\n\t\t}\n\n\t\tif inputFieldName == \"\" {\n\t\t\t// If tag is nil, we inspect if the field is a not BindUnmarshaler struct and try to bind data into it (might contain fields with tags).\n\t\t\t// structs that implement BindUnmarshaler are bound only when they have explicit tag\n\t\t\tif _, ok := structField.Addr().Interface().(BindUnmarshaler); !ok \u0026\u0026 structFieldKind == reflect.Struct {\n\t\t\t\tif err := b.bindData(structField.Addr().Interface(), data, tag, dataFiles); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\t// does not have explicit tag and is not an ordinary struct - so move to next field\n\t\t\tcontinue\n\t\t}\n\n\t\tif hasFiles {\n\t\t\tif ok, err := isFieldMultipartFile(structField.Type()); err != nil {\n\t\t\t\treturn err\n\t\t\t} else if ok {\n\t\t\t\tif ok := setMultipartFileHeaderTypes(structField, inputFieldName, dataFiles); ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinputValue, exists := data[inputFieldName]\n\t\tif !exists {\n\t\t\t// Go json.Unmarshal supports case-insensitive binding.  However the\n\t\t\t// url params are bound case-sensitive which is inconsistent.  To\n\t\t\t// fix this we must check all of the map values in a\n\t\t\t// case-insensitive search.\n\t\t\tfor k, v := range data {\n\t\t\t\tif strings.EqualFold(k, inputFieldName) {\n\t\t\t\t\tinputValue = v\n\t\t\t\t\texists = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\n\t\t// NOTE: algorithm here is not particularly sophisticated. It probably does not work with absurd types like `**[]*int`\n\t\t// but it is smart enough to handle niche cases like `*int`,`*[]string`,`[]*int` .\n\n\t\t// try unmarshalling first, in case we're dealing with an alias to an array type\n\t\tif ok, err := unmarshalInputsToField(typeField.Type.Kind(), inputValue, structField); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tformatTag := typeField.Tag.Get(\"format\")\n\t\tif ok, err := unmarshalInputToField(typeField.Type.Kind(), inputValue[0], structField, formatTag); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// we could be dealing with pointer to slice `*[]string` so dereference it. There are weird OpenAPI generators\n\t\t// that could create struct fields like that.\n\t\tif structFieldKind == reflect.Pointer {\n\t\t\tstructFieldKind = structField.Elem().Kind()\n\t\t\tstructField = structField.Elem()\n\t\t}\n\n\t\tif structFieldKind == reflect.Slice {\n\t\t\tsliceOf := structField.Type().Elem().Kind()\n\t\t\tnumElems := len(inputValue)\n\t\t\tslice := reflect.MakeSlice(structField.Type(), numElems, numElems)\n\t\t\tfor j := 0; j \u003c numElems; j++ {\n\t\t\t\tif err := setWithProperType(sliceOf, inputValue[j], slice.Index(j)); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tstructField.Set(slice)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := setWithProperType(structFieldKind, inputValue[0], structField); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// bindData will bind data ONLY fields in destination struct that have EXPLICIT tag",
      "function_statement": "// bindData will bind data ONLY fields in destination struct that have EXPLICIT tag",
      "start_line": 155,
      "end_line": 306,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "BindUnmarshaler interface {\n\t// UnmarshalParam decodes and assigns a value from an form or query param.\n\tUnmarshalParam(param string) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func isFieldMultipartFile(field reflect.Type) (bool, error) {\n\tswitch field {\n\tcase multipartFileHeaderPointerType,\n\t\tmultipartFileHeaderSliceType,\n\t\tmultipartFileHeaderPointerSliceType:\n\t\treturn true, nil\n\tcase multipartFileHeaderType:\n\t\treturn true, errors.New(\"binding to multipart.FileHeader struct is not supported, use pointer to struct\")\n\tdefault:\n\t\treturn false, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func setMultipartFileHeaderTypes(structField reflect.Value, inputFieldName string, files map[string][]*multipart.FileHeader) bool {\n\tfileHeaders := files[inputFieldName]\n\tif len(fileHeaders) == 0 {\n\t\treturn false\n\t}\n\n\tresult := true\n\tswitch structField.Type() {\n\tcase multipartFileHeaderPointerSliceType:\n\t\tstructField.Set(reflect.ValueOf(fileHeaders))\n\tcase multipartFileHeaderSliceType:\n\t\theaders := make([]multipart.FileHeader, len(fileHeaders))\n\t\tfor i, fileHeader := range fileHeaders {\n\t\t\theaders[i] = *fileHeader\n\t\t}\n\t\tstructField.Set(reflect.ValueOf(headers))\n\tcase multipartFileHeaderPointerType:\n\t\tstructField.Set(reflect.ValueOf(fileHeaders[0]))\n\tdefault:\n\t\tresult = false\n\t}\n\n\treturn result\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func unmarshalInputsToField(valueKind reflect.Kind, values []string, field reflect.Value) (bool, error) {\n\tif valueKind == reflect.Ptr {\n\t\tif field.IsNil() {\n\t\t\tfield.Set(reflect.New(field.Type().Elem()))\n\t\t}\n\t\tfield = field.Elem()\n\t}\n\n\tfieldIValue := field.Addr().Interface()\n\tunmarshaler, ok := fieldIValue.(bindMultipleUnmarshaler)\n\tif !ok {\n\t\treturn false, nil\n\t}\n\treturn true, unmarshaler.UnmarshalParams(values)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func unmarshalInputToField(valueKind reflect.Kind, val string, field reflect.Value, formatTag string) (bool, error) {\n\tif valueKind == reflect.Ptr {\n\t\tif field.IsNil() {\n\t\t\tfield.Set(reflect.New(field.Type().Elem()))\n\t\t}\n\t\tfield = field.Elem()\n\t}\n\n\tfieldIValue := field.Addr().Interface()\n\n\t// Handle time.Time with custom format tag\n\tif formatTag != \"\" {\n\t\tif _, isTime := fieldIValue.(*time.Time); isTime {\n\t\t\tt, err := time.Parse(formatTag, val)\n\t\t\tif err != nil {\n\t\t\t\treturn true, err\n\t\t\t}\n\t\t\tfield.Set(reflect.ValueOf(t))\n\t\t\treturn true, nil\n\t\t}\n\t}\n\n\tswitch unmarshaler := fieldIValue.(type) {\n\tcase BindUnmarshaler:\n\t\treturn true, unmarshaler.UnmarshalParam(val)\n\tcase encoding.TextUnmarshaler:\n\t\treturn true, unmarshaler.UnmarshalText([]byte(val))\n\t}\n\n\treturn false, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func setWithProperType(valueKind reflect.Kind, val string, structField reflect.Value) error {\n\t// But also call it here, in case we're dealing with an array of BindUnmarshalers\n\t// Note: format tag not available in this context, so empty string is passed\n\tif ok, err := unmarshalInputToField(valueKind, val, structField, \"\"); ok {\n\t\treturn err\n\t}\n\n\tswitch valueKind {\n\tcase reflect.Ptr:\n\t\treturn setWithProperType(structField.Elem().Kind(), val, structField.Elem())\n\tcase reflect.Int:\n\t\treturn setIntField(val, 0, structField)\n\tcase reflect.Int8:\n\t\treturn setIntField(val, 8, structField)\n\tcase reflect.Int16:\n\t\treturn setIntField(val, 16, structField)\n\tcase reflect.Int32:\n\t\treturn setIntField(val, 32, structField)\n\tcase reflect.Int64:\n\t\treturn setIntField(val, 64, structField)\n\tcase reflect.Uint:\n\t\treturn setUintField(val, 0, structField)\n\tcase reflect.Uint8:\n\t\treturn setUintField(val, 8, structField)\n\tcase reflect.Uint16:\n\t\treturn setUintField(val, 16, structField)\n\tcase reflect.Uint32:\n\t\treturn setUintField(val, 32, structField)\n\tcase reflect.Uint64:\n\t\treturn setUintField(val, 64, structField)\n\tcase reflect.Bool:\n\t\treturn setBoolField(val, structField)\n\tcase reflect.Float32:\n\t\treturn setFloatField(val, 32, structField)\n\tcase reflect.Float64:\n\t\treturn setFloatField(val, 64, structField)\n\tcase reflect.String:\n\t\tstructField.SetString(val)\n\tdefault:\n\t\treturn errors.New(\"unknown type\")\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/mime/multipart/formdata.go",
          "code_snippet": "FileHeader struct {\n\tFilename string\n\tHeader   textproto.MIMEHeader\n\tSize     int64\n\n\tcontent   []byte\n\ttmpfile   string\n\ttmpoff    int64\n\ttmpshared bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Elem() Value {\n\tk := v.kind()\n\tswitch k {\n\tcase Interface:\n\t\tvar eface any\n\t\tif v.typ().NumMethod() == 0 {\n\t\t\teface = *(*any)(v.ptr)\n\t\t} else {\n\t\t\teface = (any)(*(*interface {\n\t\t\t\tM()\n\t\t\t})(v.ptr))\n\t\t}\n\t\tx := unpackEface(eface)\n\t\tif x.flag != 0 {\n\t\t\tx.flag |= v.flag.ro()\n\t\t}\n\t\treturn x\n\tcase Pointer:\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tif v.typ().IfaceIndir() {\n\t\t\t\t// This is a pointer to a not-in-heap object. ptr points to a uintptr\n\t\t\t\t// in the heap. That uintptr is the address of a not-in-heap object.\n\t\t\t\t// In general, pointers to not-in-heap objects can be total junk.\n\t\t\t\t// But Elem() is asking to dereference it, so the user has asserted\n\t\t\t\t// that at least it is a valid pointer (not just an integer stored in\n\t\t\t\t// a pointer slot). So let's check, to make sure that it isn't a pointer\n\t\t\t\t// that the runtime will crash on if it sees it during GC or write barriers.\n\t\t\t\t// Since it is a not-in-heap pointer, all pointers to the heap are\n\t\t\t\t// forbidden! That makes the test pretty easy.\n\t\t\t\t// See issue 48399.\n\t\t\t\tif !verifyNotInHeapPtr(*(*uintptr)(ptr)) {\n\t\t\t\t\tpanic(\"reflect: reflect.Value.Elem on an invalid notinheap pointer\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\t// The returned value's address is v's value.\n\t\tif ptr == nil {\n\t\t\treturn Value{}\n\t\t}\n\t\ttt := (*ptrType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tfl := v.flag\u0026flagRO | flagIndir | flagAddr\n\t\tfl |= flag(typ.Kind())\n\t\treturn Value{typ, ptr, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Elem\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "String",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) IsNil() bool {\n\tk := v.kind()\n\tswitch k {\n\tcase Chan, Func, Map, Pointer, UnsafePointer:\n\t\tif v.flag\u0026flagMethod != 0 {\n\t\t\treturn false\n\t\t}\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\treturn ptr == nil\n\tcase Interface, Slice:\n\t\t// Both interface and slice are nil if first word is 0.\n\t\t// Both are always bigger than a word; assume flagIndir.\n\t\treturn *(*unsafe.Pointer)(v.ptr) == nil\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.IsNil\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Set(x Value) {\n\tv.mustBeAssignable()\n\tx.mustBeExported() // do not let unexported x leak\n\tvar target unsafe.Pointer\n\tif v.kind() == Interface {\n\t\ttarget = v.ptr\n\t}\n\tx = x.assignTo(\"reflect.Set\", v.typ(), target)\n\tif x.flag\u0026flagIndir != 0 {\n\t\tif x.ptr == unsafe.Pointer(\u0026zeroVal[0]) {\n\t\t\ttypedmemclr(v.typ(), v.ptr)\n\t\t} else {\n\t\t\ttypedmemmove(v.typ(), v.ptr, x.ptr)\n\t\t}\n\t} else {\n\t\t*(*unsafe.Pointer)(v.ptr) = x.ptr\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func MakeMap(typ Type) Value {\n\treturn MakeMapWithSize(typ, 0)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) SetMapIndex(key, elem Value) {\n\tv.mustBe(Map)\n\tv.mustBeExported()\n\tkey.mustBeExported()\n\ttt := (*mapType)(unsafe.Pointer(v.typ()))\n\n\tif (tt.Key == stringType || key.kind() == String) \u0026\u0026 tt.Key == key.typ() \u0026\u0026 tt.Elem.Size() \u003c= abi.MapMaxElemBytes {\n\t\tk := *(*string)(key.ptr)\n\t\tif elem.typ() == nil {\n\t\t\tmapdelete_faststr(v.typ(), v.pointer(), k)\n\t\t\treturn\n\t\t}\n\t\telem.mustBeExported()\n\t\telem = elem.assignTo(\"reflect.Value.SetMapIndex\", tt.Elem, nil)\n\t\tvar e unsafe.Pointer\n\t\tif elem.flag\u0026flagIndir != 0 {\n\t\t\te = elem.ptr\n\t\t} else {\n\t\t\te = unsafe.Pointer(\u0026elem.ptr)\n\t\t}\n\t\tmapassign_faststr(v.typ(), v.pointer(), k, e)\n\t\treturn\n\t}\n\n\tkey = key.assignTo(\"reflect.Value.SetMapIndex\", tt.Key, nil)\n\tvar k unsafe.Pointer\n\tif key.flag\u0026flagIndir != 0 {\n\t\tk = key.ptr\n\t} else {\n\t\tk = unsafe.Pointer(\u0026key.ptr)\n\t}\n\tif elem.typ() == nil {\n\t\tmapdelete(v.typ(), v.pointer(), k)\n\t\treturn\n\t}\n\telem.mustBeExported()\n\telem = elem.assignTo(\"reflect.Value.SetMapIndex\", tt.Elem, nil)\n\tvar e unsafe.Pointer\n\tif elem.flag\u0026flagIndir != 0 {\n\t\te = elem.ptr\n\t} else {\n\t\te = unsafe.Pointer(\u0026elem.ptr)\n\t}\n\tmapassign(v.typ(), v.pointer(), k, e)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Field(i int) Value {\n\tif v.kind() != Struct {\n\t\tpanic(\u0026ValueError{\"reflect.Value.Field\", v.kind()})\n\t}\n\ttt := (*structType)(unsafe.Pointer(v.typ()))\n\tif uint(i) \u003e= uint(len(tt.Fields)) {\n\t\tpanic(\"reflect: Field index out of range\")\n\t}\n\tfield := \u0026tt.Fields[i]\n\ttyp := field.Typ\n\n\t// Inherit permission bits from v, but clear flagEmbedRO.\n\tfl := v.flag\u0026(flagStickyRO|flagIndir|flagAddr) | flag(typ.Kind())\n\t// Using an unexported field forces flagRO.\n\tif !field.Name.IsExported() {\n\t\tif field.Embedded() {\n\t\t\tfl |= flagEmbedRO\n\t\t} else {\n\t\t\tfl |= flagStickyRO\n\t\t}\n\t}\n\t// Either flagIndir is set and v.ptr points at struct,\n\t// or flagIndir is not set and v.ptr is the actual struct data.\n\t// In the former case, we want v.ptr + offset.\n\t// In the latter case, we must have field.offset = 0,\n\t// so v.ptr + field.offset is still the correct address.\n\tptr := add(v.ptr, field.Offset, \"same as non-reflect \u0026v.field\")\n\treturn Value{typ, ptr, fl}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "StructField struct {\n\t// Name is the field name.\n\tName string\n\n\t// PkgPath is the package path that qualifies a lower case (unexported)\n\t// field name. It is empty for upper case (exported) field names.\n\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers\n\tPkgPath string\n\n\tType      Type      // field type\n\tTag       StructTag // field tag string\n\tOffset    uintptr   // offset within struct, in bytes\n\tIndex     []int     // index sequence for Type.FieldByIndex\n\tAnonymous bool      // is an embedded field\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Kind() Kind {\n\treturn v.kind()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) CanSet() bool {\n\treturn v.flag\u0026(flagAddr|flagRO) == flagAddr\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func (tag StructTag) Get(key string) string {\n\tv, _ := tag.Lookup(key)\n\treturn v\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Addr() Value {\n\tif v.flag\u0026flagAddr == 0 {\n\t\tpanic(\"reflect.Value.Addr of unaddressable value\")\n\t}\n\t// Preserve flagRO instead of using v.flag.ro() so that\n\t// v.Addr().Elem() is equivalent to v (#32772)\n\tfl := v.flag \u0026 flagRO\n\treturn Value{ptrTo(v.typ()), v.ptr, fl | flag(Pointer)}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Type() Type {\n\tif v.flag != 0 \u0026\u0026 v.flag\u0026flagMethod == 0 {\n\t\treturn (*rtype)(noescape(unsafe.Pointer(v.typ_))) // inline of toRType(v.typ()), for own inlining in inline test\n\t}\n\treturn v.typeSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func EqualFold(s, t string) bool {\n\t// ASCII fast path\n\ti := 0\n\tfor ; i \u003c len(s) \u0026\u0026 i \u003c len(t); i++ {\n\t\tsr := s[i]\n\t\ttr := t[i]\n\t\tif sr|tr \u003e= utf8.RuneSelf {\n\t\t\tgoto hasUnicode\n\t\t}\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// ASCII only, sr/tr must be upper/lower case\n\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\t// Check if we've exhausted both strings.\n\treturn len(s) == len(t)\n\nhasUnicode:\n\ts = s[i:]\n\tt = t[i:]\n\tfor _, sr := range s {\n\t\t// If t is exhausted the strings are not equal.\n\t\tif len(t) == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\t// Extract first rune from second string.\n\t\tvar tr rune\n\t\tif t[0] \u003c utf8.RuneSelf {\n\t\t\ttr, t = rune(t[0]), t[1:]\n\t\t} else {\n\t\t\tr, size := utf8.DecodeRuneInString(t)\n\t\t\ttr, t = r, t[size:]\n\t\t}\n\n\t\t// If they match, keep going; if not, return false.\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// Fast check for ASCII.\n\t\tif tr \u003c utf8.RuneSelf {\n\t\t\t// ASCII only, sr/tr must be upper/lower case\n\t\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\n\t\t// General case. SimpleFold(x) returns the next equivalent rune \u003e x\n\t\t// or wraps around to smaller values.\n\t\tr := unicode.SimpleFold(sr)\n\t\tfor r != sr \u0026\u0026 r \u003c tr {\n\t\t\tr = unicode.SimpleFold(r)\n\t\t}\n\t\tif r == tr {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\n\t// First string is empty, so check if the second one is also empty.\n\treturn len(t) == 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func MakeSlice(typ Type, len, cap int) Value {\n\tif typ.Kind() != Slice {\n\t\tpanic(\"reflect.MakeSlice of non-slice type\")\n\t}\n\tif len \u003c 0 {\n\t\tpanic(\"reflect.MakeSlice: negative len\")\n\t}\n\tif cap \u003c 0 {\n\t\tpanic(\"reflect.MakeSlice: negative cap\")\n\t}\n\tif len \u003e cap {\n\t\tpanic(\"reflect.MakeSlice: len \u003e cap\")\n\t}\n\n\ts := unsafeheader.Slice{Data: unsafe_NewArray(\u0026(typ.Elem().(*rtype).t), cap), Len: len, Cap: cap}\n\treturn Value{\u0026typ.(*rtype).t, unsafe.Pointer(\u0026s), flagIndir | flag(Slice)}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Index(i int) Value {\n\tswitch v.kind() {\n\tcase Array:\n\t\ttt := (*arrayType)(unsafe.Pointer(v.typ()))\n\t\tif uint(i) \u003e= uint(tt.Len) {\n\t\t\tpanic(\"reflect: array index out of range\")\n\t\t}\n\t\ttyp := tt.Elem\n\t\toffset := uintptr(i) * typ.Size()\n\n\t\t// Either flagIndir is set and v.ptr points at array,\n\t\t// or flagIndir is not set and v.ptr is the actual array data.\n\t\t// In the former case, we want v.ptr + offset.\n\t\t// In the latter case, we must be doing Index(0), so offset = 0,\n\t\t// so v.ptr + offset is still the correct address.\n\t\tval := add(v.ptr, offset, \"same as \u0026v[i], i \u003c tt.len\")\n\t\tfl := v.flag\u0026(flagIndir|flagAddr) | v.flag.ro() | flag(typ.Kind()) // bits same as overall array\n\t\treturn Value{typ, val, fl}\n\n\tcase Slice:\n\t\t// Element flag same as Elem of Pointer.\n\t\t// Addressable, indirect, possibly read-only.\n\t\ts := (*unsafeheader.Slice)(v.ptr)\n\t\tif uint(i) \u003e= uint(s.Len) {\n\t\t\tpanic(\"reflect: slice index out of range\")\n\t\t}\n\t\ttt := (*sliceType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tval := arrayAt(s.Data, i, typ.Size(), \"i \u003c s.Len\")\n\t\tfl := flagAddr | flagIndir | v.flag.ro() | flag(typ.Kind())\n\t\treturn Value{typ, val, fl}\n\n\tcase String:\n\t\ts := (*unsafeheader.String)(v.ptr)\n\t\tif uint(i) \u003e= uint(s.Len) {\n\t\t\tpanic(\"reflect: string index out of range\")\n\t\t}\n\t\tp := arrayAt(s.Data, i, 1, \"i \u003c s.Len\")\n\t\tfl := v.flag.ro() | flag(Uint8) | flagIndir\n\t\treturn Value{uint8Type, p, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Index\", v.kind()})\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        191,
        195,
        196,
        197,
        198,
        199,
        200,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        221,
        222,
        223,
        224,
        225,
        230,
        233,
        234,
        235,
        236,
        237,
        238,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        258,
        259,
        266,
        267,
        268,
        269,
        270,
        273,
        274,
        275,
        276,
        277,
        278,
        283,
        284,
        285,
        286,
        288,
        289,
        290,
        291,
        292,
        293,
        297,
        298,
        301,
        302,
        303,
        305
      ],
      "cover_details": {
        "line_cover_rate": 0.7171052631578947
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Start",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        }
      ],
      "name": "Start",
      "signature": "(e *Echo) Start (address string) error",
      "ground_truth": "func (e *Echo) Start(address string) error {\n\te.startupMutex.Lock()\n\te.Server.Addr = address\n\tif err := e.configureServer(e.Server); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn err\n\t}\n\te.startupMutex.Unlock()\n\treturn e.Server.Serve(e.Listener)\n}",
      "function_comment": "// Start starts an HTTP server.",
      "function_statement": "// Start starts an HTTP server.",
      "start_line": 677,
      "end_line": 686,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) configureServer(s *http.Server) error {\n\t// Setup\n\te.colorer.SetOutput(e.Logger.Output())\n\ts.ErrorLog = e.StdLogger\n\ts.Handler = e\n\tif e.Debug {\n\t\te.Logger.SetLevel(log.DEBUG)\n\t}\n\n\tif !e.HideBanner {\n\t\te.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n\t}\n\n\tif s.TLSConfig == nil {\n\t\tif e.Listener == nil {\n\t\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\te.Listener = l\n\t\t}\n\t\tif !e.HidePort {\n\t\t\te.colorer.Printf(\"⇨ http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n\t\t}\n\t\treturn nil\n\t}\n\tif e.TLSListener == nil {\n\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.TLSListener = tls.NewListener(l, s.TLSConfig)\n\t}\n\tif !e.HidePort {\n\t\te.colorer.Printf(\"⇨ https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Serve(l net.Listener) error {\n\tif fn := testHookServerServe; fn != nil {\n\t\tfn(srv, l) // call hook with unwrapped listener\n\t}\n\n\torigListener := l\n\tl = \u0026onceCloseListener{Listener: l}\n\tdefer l.Close()\n\n\tif err := srv.setupHTTP2_Serve(); err != nil {\n\t\treturn err\n\t}\n\n\tif !srv.trackListener(\u0026l, true) {\n\t\treturn ErrServerClosed\n\t}\n\tdefer srv.trackListener(\u0026l, false)\n\n\tbaseCtx := context.Background()\n\tif srv.BaseContext != nil {\n\t\tbaseCtx = srv.BaseContext(origListener)\n\t\tif baseCtx == nil {\n\t\t\tpanic(\"BaseContext returned a nil context\")\n\t\t}\n\t}\n\n\tvar tempDelay time.Duration // how long to sleep on accept failure\n\n\tctx := context.WithValue(baseCtx, ServerContextKey, srv)\n\tfor {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif srv.shuttingDown() {\n\t\t\t\treturn ErrServerClosed\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok \u0026\u0026 ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay \u003e max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\tsrv.logf(\"http: Accept error: %v; retrying in %v\", err, tempDelay)\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tconnCtx := ctx\n\t\tif cc := srv.ConnContext; cc != nil {\n\t\t\tconnCtx = cc(connCtx, rw)\n\t\t\tif connCtx == nil {\n\t\t\t\tpanic(\"ConnContext returned nil\")\n\t\t\t}\n\t\t}\n\t\ttempDelay = 0\n\t\tc := srv.newConn(rw)\n\t\tc.setState(c.rwc, StateNew, runHooks) // before Serve can return\n\t\tgo c.serve(connCtx)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        677,
        678,
        679,
        680,
        681,
        682,
        683,
        684,
        685
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group_fs.go:Static",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "Static",
      "signature": "(g *Group) Static (pathPrefix, fsRoot string)",
      "ground_truth": "func (g *Group) Static(pathPrefix, fsRoot string) {\n\tsubFs := MustSubFS(g.echo.Filesystem, fsRoot)\n\tg.StaticFS(pathPrefix, subFs)\n}",
      "function_comment": "// Static implements `Echo#Static()` for sub-routes within the Group.",
      "function_statement": "// Static implements `Echo#Static()` for sub-routes within the Group.",
      "start_line": 12,
      "end_line": 15,
      "file_path": "./group_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func MustSubFS(currentFs fs.FS, fsRoot string) fs.FS {\n\tsubFs, err := subFS(currentFs, fsRoot)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"can not create sub FS, invalid root given, err: %w\", err))\n\t}\n\treturn subFs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "filesystem struct {\n\t// Filesystem is file system used by Static and File handlers to access files.\n\t// Defaults to os.DirFS(\".\")\n\t//\n\t// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n\t// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n\t// including `assets/images` as their prefix.\n\tFilesystem fs.FS\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group_fs.go",
          "code_snippet": "func (g *Group) StaticFS(pathPrefix string, filesystem fs.FS) {\n\tg.Add(\n\t\thttp.MethodGet,\n\t\tpathPrefix+\"*\",\n\t\tStaticDirectoryHandler(filesystem, false),\n\t)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        12,
        13,
        14,
        15
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/recover.go:RecoverWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverErrAbortHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecover"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithConfig_LogErrorFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithConfig_LogLevel"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithDisabled_ErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "RecoverWithConfig",
      "signature": "RecoverWithConfig (config RecoverConfig) echo.MiddlewareFunc",
      "ground_truth": "func RecoverWithConfig(config RecoverConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRecoverConfig.Skipper\n\t}\n\tif config.StackSize == 0 {\n\t\tconfig.StackSize = DefaultRecoverConfig.StackSize\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (returnErr error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tif r == http.ErrAbortHandler {\n\t\t\t\t\t\tpanic(r)\n\t\t\t\t\t}\n\t\t\t\t\terr, ok := r.(error)\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\terr = fmt.Errorf(\"%v\", r)\n\t\t\t\t\t}\n\t\t\t\t\tvar stack []byte\n\t\t\t\t\tvar length int\n\n\t\t\t\t\tif !config.DisablePrintStack {\n\t\t\t\t\t\tstack = make([]byte, config.StackSize)\n\t\t\t\t\t\tlength = runtime.Stack(stack, !config.DisableStackAll)\n\t\t\t\t\t\tstack = stack[:length]\n\t\t\t\t\t}\n\n\t\t\t\t\tif config.LogErrorFunc != nil {\n\t\t\t\t\t\terr = config.LogErrorFunc(c, err, stack)\n\t\t\t\t\t} else if !config.DisablePrintStack {\n\t\t\t\t\t\tmsg := fmt.Sprintf(\"[PANIC RECOVER] %v %s\\n\", err, stack[:length])\n\t\t\t\t\t\tswitch config.LogLevel {\n\t\t\t\t\t\tcase log.DEBUG:\n\t\t\t\t\t\t\tc.Logger().Debug(msg)\n\t\t\t\t\t\tcase log.INFO:\n\t\t\t\t\t\t\tc.Logger().Info(msg)\n\t\t\t\t\t\tcase log.WARN:\n\t\t\t\t\t\t\tc.Logger().Warn(msg)\n\t\t\t\t\t\tcase log.ERROR:\n\t\t\t\t\t\t\tc.Logger().Error(msg)\n\t\t\t\t\t\tcase log.OFF:\n\t\t\t\t\t\t\t// None.\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tc.Logger().Print(msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif err != nil \u0026\u0026 !config.DisableErrorHandler {\n\t\t\t\t\t\tc.Error(err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturnErr = err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// RecoverWithConfig returns a Recover middleware with config.\n// See: `Recover()`.",
      "function_statement": "// RecoverWithConfig returns a Recover middleware with config.\n// See: `Recover()`.",
      "start_line": 70,
      "end_line": 133,
      "file_path": "./middleware/recover.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/recover.go",
          "code_snippet": "RecoverConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Size of the stack to be printed.\n\t// Optional. Default value 4KB.\n\tStackSize int `yaml:\"stack_size\"`\n\n\t// DisableStackAll disables formatting stack traces of all other goroutines\n\t// into buffer after the trace for the current goroutine.\n\t// Optional. Default value false.\n\tDisableStackAll bool `yaml:\"disable_stack_all\"`\n\n\t// DisablePrintStack disables printing stack trace.\n\t// Optional. Default value as false.\n\tDisablePrintStack bool `yaml:\"disable_print_stack\"`\n\n\t// LogLevel is log level to printing stack trace.\n\t// Optional. Default value 0 (Print).\n\tLogLevel log.Lvl\n\n\t// LogErrorFunc defines a function for custom logging in the middleware.\n\t// If it's set you don't need to provide LogLevel for config.\n\t// If this function returns nil, the centralized HTTPErrorHandler will not be called.\n\tLogErrorFunc LogErrorFunc\n\n\t// DisableErrorHandler disables the call to centralized HTTPErrorHandler.\n\t// The recovered error is then passed back to upstream middleware, instead of swallowing the error.\n\t// Optional. Default value false.\n\tDisableErrorHandler bool `yaml:\"disable_error_handler\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/recover.go",
          "code_snippet": "DefaultRecoverConfig = RecoverConfig{\n\tSkipper:             DefaultSkipper,\n\tStackSize:           4 \u003c\u003c 10, // 4 KB\n\tDisableStackAll:     false,\n\tDisablePrintStack:   false,\n\tLogLevel:            0,\n\tLogErrorFunc:        nil,\n\tDisableErrorHandler: false,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": "v4"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "DEBUG Lvl = iota + 1",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "INFO",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "WARN",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "ERROR",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "OFF",
          "ref_module": "log"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func recover() any",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ErrAbortHandler = errors.New(\"net/http: abort Handler\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/runtime/mprof.go",
          "code_snippet": "func Stack(buf []byte, all bool) int {\n\tvar stw worldStop\n\tif all {\n\t\tstw = stopTheWorld(stwAllGoroutinesStack)\n\t}\n\n\tn := 0\n\tif len(buf) \u003e 0 {\n\t\tgp := getg()\n\t\tsp := getcallersp()\n\t\tpc := getcallerpc()\n\t\tsystemstack(func() {\n\t\t\tg0 := getg()\n\t\t\t// Force traceback=1 to override GOTRACEBACK setting,\n\t\t\t// so that Stack's results are consistent.\n\t\t\t// GOTRACEBACK is only about crash dumps.\n\t\t\tg0.m.traceback = 1\n\t\t\tg0.writebuf = buf[0:0:len(buf)]\n\t\t\tgoroutineheader(gp)\n\t\t\ttraceback(pc, sp, 0, gp)\n\t\t\tif all {\n\t\t\t\ttracebackothers(gp)\n\t\t\t}\n\t\t\tg0.m.traceback = 0\n\t\t\tn = len(g0.writebuf)\n\t\t\tg0.writebuf = nil\n\t\t})\n\t}\n\n\tif all {\n\t\tstartTheWorld(stw)\n\t}\n\treturn n\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        70,
        71,
        72,
        75,
        79,
        80,
        81,
        85,
        86,
        87,
        88,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        118,
        119,
        123,
        124,
        125,
        126,
        127,
        130
      ],
      "cover_details": {
        "line_cover_rate": 0.703125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:findChildWithLabel",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "findChildWithLabel",
      "signature": "(n *node) findChildWithLabel (l byte) *node",
      "ground_truth": "func (n *node) findChildWithLabel(l byte) *node {\n\tif c := n.findStaticChild(l); c != nil {\n\t\treturn c\n\t}\n\tif l == paramLabel {\n\t\treturn n.paramChild\n\t}\n\tif l == anyLabel {\n\t\treturn n.anyChild\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 440,
      "end_line": 451,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (n *node) findStaticChild(l byte) *node {\n\tfor _, c := range n.staticChildren {\n\t\tif c.label == l {\n\t\t\treturn c\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "paramLabel = byte(':')",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "anyLabel   = byte('*')",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449,
        450
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/util.go:matchScheme",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginSubdomain"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCorsHeaders"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "Test_matchScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "Test_matchSubdomain"
        }
      ],
      "name": "matchScheme",
      "signature": "matchScheme (domain, pattern string) bool",
      "ground_truth": "func matchScheme(domain, pattern string) bool {\n\tdidx := strings.Index(domain, \":\")\n\tpidx := strings.Index(pattern, \":\")\n\treturn didx != -1 \u0026\u0026 pidx != -1 \u0026\u0026 domain[:didx] == pattern[:pidx]\n}",
      "function_comment": "// SPDX-License-Identifier: MIT",
      "function_statement": "// SPDX-License-Identifier: MIT",
      "start_line": 14,
      "end_line": 18,
      "file_path": "./middleware/util.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Index(s, substr string) int {\n\treturn stringslite.Index(s, substr)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        14,
        15,
        16,
        17,
        18
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:NewResponse",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "NewResponse",
      "signature": "NewResponse (w http.ResponseWriter, e *Echo) (r *Response)",
      "ground_truth": "func NewResponse(w http.ResponseWriter, e *Echo) (r *Response) {\n\treturn \u0026Response{Writer: w, echo: e}\n}",
      "function_comment": "// NewResponse creates a new instance of Response.",
      "function_statement": "// NewResponse creates a new instance of Response.",
      "start_line": 28,
      "end_line": 30,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        28,
        29,
        30
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:NewBindingError",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindingError_ErrorJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindingError_Error"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        }
      ],
      "name": "NewBindingError",
      "signature": "NewBindingError (sourceParam string, values []string, message interface{}, internalError error) error",
      "ground_truth": "func NewBindingError(sourceParam string, values []string, message interface{}, internalError error) error {\n\treturn \u0026BindingError{\n\t\tField:  sourceParam,\n\t\tValues: values,\n\t\tHTTPError: \u0026HTTPError{\n\t\t\tCode:     http.StatusBadRequest,\n\t\t\tMessage:  message,\n\t\t\tInternal: internalError,\n\t\t},\n\t}\n}",
      "function_comment": "// NewBindingError creates new instance of binding error",
      "function_statement": "// NewBindingError creates new instance of binding error",
      "start_line": 78,
      "end_line": 88,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "BindingError struct {\n\t// Field is the field name where value binding failed\n\tField string `json:\"field\"`\n\t*HTTPError\n\t// Values of parameter that failed to bind.\n\tValues []string `json:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Times",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        }
      ],
      "name": "Times",
      "signature": "(b *ValueBinder) Times (sourceParam string, dest *[]time.Time, layout string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Times(sourceParam string, dest *[]time.Time, layout string) *ValueBinder {\n\treturn b.times(sourceParam, dest, layout, false)\n}",
      "function_comment": "// Times binds parameter values to slice of time.Time variables",
      "function_statement": "// Times binds parameter values to slice of time.Time variables",
      "start_line": 1121,
      "end_line": 1123,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) times(sourceParam string, dest *[]time.Time, layout string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\ttmp := make([]time.Time, len(values))\n\tfor i, v := range values {\n\t\tt, err := time.Parse(layout, v)\n\t\tif err != nil {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{v}, \"failed to bind field value to Time\", err))\n\t\t\tif b.failFast {\n\t\t\t\treturn b\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ttmp[i] = t\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1121,
        1122,
        1123
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:writeContentType",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "writeContentType",
      "signature": "(c *context) writeContentType (value string)",
      "ground_truth": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 243,
      "end_line": 248,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Response() *Response {\n\treturn c.response\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentType         = \"Content-Type\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        243,
        244,
        245,
        246,
        247
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Error",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindingError_Error"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        }
      ],
      "name": "Error",
      "signature": "(he *HTTPError) Error () string",
      "ground_truth": "func (he *HTTPError) Error() string {\n\tif he.Internal == nil {\n\t\treturn fmt.Sprintf(\"code=%d, message=%v\", he.Code, he.Message)\n\t}\n\treturn fmt.Sprintf(\"code=%d, message=%v, internal=%v\", he.Code, he.Message, he.Internal)\n}",
      "function_comment": "// Error makes it compatible with `error` interface.",
      "function_statement": "// Error makes it compatible with `error` interface.",
      "start_line": 896,
      "end_line": 901,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        896,
        897,
        898,
        899,
        900
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:CustomFunc",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        }
      ],
      "name": "CustomFunc",
      "signature": "(b *ValueBinder) CustomFunc (sourceParam string, customFunc func(values []string) []error) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) CustomFunc(sourceParam string, customFunc func(values []string) []error) *ValueBinder {\n\treturn b.customFunc(sourceParam, customFunc, false)\n}",
      "function_comment": "// CustomFunc binds parameter values with Func. Func is called only when parameter values exist.",
      "function_statement": "// CustomFunc binds parameter values with Func. Func is called only when parameter values exist.",
      "start_line": 210,
      "end_line": 212,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) customFunc(sourceParam string, customFunc func(values []string) []error, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tif errs := customFunc(values); errs != nil {\n\t\tb.errors = append(b.errors, errs...)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        210,
        211,
        212
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUnixTimeNano",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        }
      ],
      "name": "MustUnixTimeNano",
      "signature": "(b *ValueBinder) MustUnixTimeNano (sourceParam string, dest *time.Time) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUnixTimeNano(sourceParam string, dest *time.Time) *ValueBinder {\n\treturn b.unixTime(sourceParam, dest, true, time.Nanosecond)\n}",
      "function_comment": "// MustUnixTimeNano requires parameter value to exist to bind to time.Duration variable  (in local Time corresponding\n// to the given Unix time value in nano second precision). Returns error when value does not exist.\n//\n// Example: 1609180603123456789 binds to 2020-12-28T18:36:43.123456789+00:00\n// Example:          1000000000 binds to 1970-01-01T00:00:01.000000000+00:00\n// Example:           999999999 binds to 1970-01-01T00:00:00.999999999+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal\n//   - Javascript's Number type only has about 53 bits of precision (Number.MAX_SAFE_INTEGER = 9007199254740991). Compare it to 1609180603123456789 in example.",
      "function_statement": "// MustUnixTimeNano requires parameter value to exist to bind to time.Duration variable  (in local Time corresponding\n// to the given Unix time value in nano second precision). Returns error when value does not exist.\n//\n// Example: 1609180603123456789 binds to 2020-12-28T18:36:43.123456789+00:00\n// Example:          1000000000 binds to 1970-01-01T00:00:01.000000000+00:00\n// Example:           999999999 binds to 1970-01-01T00:00:00.999999999+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal\n//   - Javascript's Number type only has about 53 bits of precision (Number.MAX_SAFE_INTEGER = 9007199254740991). Compare it to 1609180603123456789 in example.",
      "start_line": 1301,
      "end_line": 1303,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Nanosecond  Duration = 1",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1301,
        1302,
        1303
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:proxyHTTP",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestTargetProvider"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestModifyResponseUseContext"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        }
      ],
      "name": "proxyHTTP",
      "signature": "proxyHTTP (tgt *ProxyTarget, c echo.Context, config ProxyConfig) http.Handler",
      "ground_truth": "func proxyHTTP(tgt *ProxyTarget, c echo.Context, config ProxyConfig) http.Handler {\n\tproxy := httputil.NewSingleHostReverseProxy(tgt.URL)\n\tproxy.ErrorHandler = func(resp http.ResponseWriter, req *http.Request, err error) {\n\t\tdesc := tgt.URL.String()\n\t\tif tgt.Name != \"\" {\n\t\t\tdesc = fmt.Sprintf(\"%s(%s)\", tgt.Name, tgt.URL.String())\n\t\t}\n\t\t// If the client canceled the request (usually by closing the connection), we can report a\n\t\t// client error (4xx) instead of a server error (5xx) to correctly identify the situation.\n\t\t// The Go standard library (at of late 2020) wraps the exported, standard\n\t\t// context.Canceled error with unexported garbage value requiring a substring check, see\n\t\t// https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/net/net.go#L416-L430\n\t\tif err == context.Canceled || strings.Contains(err.Error(), \"operation was canceled\") {\n\t\t\thttpError := echo.NewHTTPError(StatusCodeContextCanceled, fmt.Sprintf(\"client closed connection: %v\", err))\n\t\t\thttpError.Internal = err\n\t\t\tc.Set(\"_error\", httpError)\n\t\t} else {\n\t\t\thttpError := echo.NewHTTPError(http.StatusBadGateway, fmt.Sprintf(\"remote %s unreachable, could not forward: %v\", desc, err))\n\t\t\thttpError.Internal = err\n\t\t\tc.Set(\"_error\", httpError)\n\t\t}\n\t}\n\tproxy.Transport = config.Transport\n\tproxy.ModifyResponse = config.ModifyResponse\n\treturn proxy\n}",
      "function_comment": "// StatusCodeContextCanceled is a custom HTTP status code for situations\n// where a client unexpectedly closed the connection to the server.\n// As there is no standard error code for \"client closed connection\", but\n// various well-known HTTP clients and server implement this HTTP code we use",
      "function_statement": "// StatusCodeContextCanceled is a custom HTTP status code for situations\n// where a client unexpectedly closed the connection to the server.\n// As there is no standard error code for \"client closed connection\", but\n// various well-known HTTP clients and server implement this HTTP code we use",
      "start_line": 409,
      "end_line": 434,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Balancer defines a load balancing technique.\n\t// Required.\n\tBalancer ProxyBalancer\n\n\t// RetryCount defines the number of times a failed proxied request should be retried\n\t// using the next available ProxyTarget. Defaults to 0, meaning requests are never retried.\n\tRetryCount int\n\n\t// RetryFilter defines a function used to determine if a failed request to a\n\t// ProxyTarget should be retried. The RetryFilter will only be called when the number\n\t// of previous retries is less than RetryCount. If the function returns true, the\n\t// request will be retried. The provided error indicates the reason for the request\n\t// failure. When the ProxyTarget is unavailable, the error will be an instance of\n\t// echo.HTTPError with a Code of http.StatusBadGateway. In all other cases, the error\n\t// will indicate an internal error in the Proxy middleware. When a RetryFilter is not\n\t// specified, all requests that fail with http.StatusBadGateway will be retried. A custom\n\t// RetryFilter can be provided to only retry specific requests. Note that RetryFilter is\n\t// only called when the request to the target fails, or an internal error in the Proxy\n\t// middleware has occurred. Successful requests that return a non-200 response code cannot\n\t// be retried.\n\tRetryFilter func(c echo.Context, e error) bool\n\n\t// ErrorHandler defines a function which can be used to return custom errors from\n\t// the Proxy middleware. ErrorHandler is only invoked when there has been\n\t// either an internal error in the Proxy middleware or the ProxyTarget is\n\t// unavailable. Due to the way requests are proxied, ErrorHandler is not invoked\n\t// when a ProxyTarget returns a non-200 response. In these cases, the response\n\t// is already written so errors cannot be modified. ErrorHandler is only\n\t// invoked after all retry attempts have been exhausted.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n\t// retrieved by index e.g. $1, $2 and so on.\n\t// Examples:\n\t// \"/old\":              \"/new\",\n\t// \"/api/*\":            \"/$1\",\n\t// \"/js/*\":             \"/public/javascripts/$1\",\n\t// \"/users/*/orders/*\": \"/user/$1/order/$2\",\n\tRewrite map[string]string\n\n\t// RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n\t// Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"^/old/[0.9]+/\":     \"/new\",\n\t// \"^/api/.+?/(.*)\":    \"/v2/$1\",\n\tRegexRewrite map[*regexp.Regexp]string\n\n\t// Context key to store selected ProxyTarget into context.\n\t// Optional. Default value \"target\".\n\tContextKey string\n\n\t// To customize the transport to remote.\n\t// Examples: If custom TLS certificates are required.\n\tTransport http.RoundTripper\n\n\t// ModifyResponse defines function to modify response from ProxyTarget.\n\tModifyResponse func(*http.Response) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "StatusCodeContextCanceled = 499",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/httputil/reverseproxy.go",
          "code_snippet": "func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy {\n\tdirector := func(req *http.Request) {\n\t\trewriteRequestURL(req, target)\n\t}\n\treturn \u0026ReverseProxy{Director: director}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/httputil/reverseproxy.go",
          "code_snippet": "ReverseProxy struct {\n\t// Rewrite must be a function which modifies\n\t// the request into a new request to be sent\n\t// using Transport. Its response is then copied\n\t// back to the original client unmodified.\n\t// Rewrite must not access the provided ProxyRequest\n\t// or its contents after returning.\n\t//\n\t// The Forwarded, X-Forwarded, X-Forwarded-Host,\n\t// and X-Forwarded-Proto headers are removed from the\n\t// outbound request before Rewrite is called. See also\n\t// the ProxyRequest.SetXForwarded method.\n\t//\n\t// Unparsable query parameters are removed from the\n\t// outbound request before Rewrite is called.\n\t// The Rewrite function may copy the inbound URL's\n\t// RawQuery to the outbound URL to preserve the original\n\t// parameter string. Note that this can lead to security\n\t// issues if the proxy's interpretation of query parameters\n\t// does not match that of the downstream server.\n\t//\n\t// At most one of Rewrite or Director may be set.\n\tRewrite func(*ProxyRequest)\n\n\t// Director is a function which modifies\n\t// the request into a new request to be sent\n\t// using Transport. Its response is then copied\n\t// back to the original client unmodified.\n\t// Director must not access the provided Request\n\t// after returning.\n\t//\n\t// By default, the X-Forwarded-For header is set to the\n\t// value of the client IP address. If an X-Forwarded-For\n\t// header already exists, the client IP is appended to the\n\t// existing values. As a special case, if the header\n\t// exists in the Request.Header map but has a nil value\n\t// (such as when set by the Director func), the X-Forwarded-For\n\t// header is not modified.\n\t//\n\t// To prevent IP spoofing, be sure to delete any pre-existing\n\t// X-Forwarded-For header coming from the client or\n\t// an untrusted proxy.\n\t//\n\t// Hop-by-hop headers are removed from the request after\n\t// Director returns, which can remove headers added by\n\t// Director. Use a Rewrite function instead to ensure\n\t// modifications to the request are preserved.\n\t//\n\t// Unparsable query parameters are removed from the outbound\n\t// request if Request.Form is set after Director returns.\n\t//\n\t// At most one of Rewrite or Director may be set.\n\tDirector func(*http.Request)\n\n\t// The transport used to perform proxy requests.\n\t// If nil, http.DefaultTransport is used.\n\tTransport http.RoundTripper\n\n\t// FlushInterval specifies the flush interval\n\t// to flush to the client while copying the\n\t// response body.\n\t// If zero, no periodic flushing is done.\n\t// A negative value means to flush immediately\n\t// after each write to the client.\n\t// The FlushInterval is ignored when ReverseProxy\n\t// recognizes a response as a streaming response, or\n\t// if its ContentLength is -1; for such responses, writes\n\t// are flushed to the client immediately.\n\tFlushInterval time.Duration\n\n\t// ErrorLog specifies an optional logger for errors\n\t// that occur when attempting to proxy the request.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BufferPool optionally specifies a buffer pool to\n\t// get byte slices for use by io.CopyBuffer when\n\t// copying HTTP response bodies.\n\tBufferPool BufferPool\n\n\t// ModifyResponse is an optional function that modifies the\n\t// Response from the backend. It is called if the backend\n\t// returns a response at all, with any HTTP status code.\n\t// If the backend is unreachable, the optional ErrorHandler is\n\t// called without any call to ModifyResponse.\n\t//\n\t// If ModifyResponse returns an error, ErrorHandler is called\n\t// with its error value. If ErrorHandler is nil, its default\n\t// implementation is used.\n\tModifyResponse func(*http.Response) error\n\n\t// ErrorHandler is an optional function that handles errors\n\t// reaching the backend or errors from ModifyResponse.\n\t//\n\t// If nil, the default is to log the provided error and return\n\t// a 502 Status Bad Gateway response.\n\tErrorHandler func(http.ResponseWriter, *http.Request, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func (u *URL) String() string {\n\tvar buf strings.Builder\n\n\tn := len(u.Scheme)\n\tif u.Opaque != \"\" {\n\t\tn += len(u.Opaque)\n\t} else {\n\t\tif !u.OmitHost \u0026\u0026 (u.Scheme != \"\" || u.Host != \"\" || u.User != nil) {\n\t\t\tusername := u.User.Username()\n\t\t\tpassword, _ := u.User.Password()\n\t\t\tn += len(username) + len(password) + len(u.Host)\n\t\t}\n\t\tn += len(u.Path)\n\t}\n\tn += len(u.RawQuery) + len(u.RawFragment)\n\tn += len(\":\" + \"//\" + \"//\" + \":\" + \"@\" + \"/\" + \"./\" + \"?\" + \"#\")\n\tbuf.Grow(n)\n\n\tif u.Scheme != \"\" {\n\t\tbuf.WriteString(u.Scheme)\n\t\tbuf.WriteByte(':')\n\t}\n\tif u.Opaque != \"\" {\n\t\tbuf.WriteString(u.Opaque)\n\t} else {\n\t\tif u.Scheme != \"\" || u.Host != \"\" || u.User != nil {\n\t\t\tif u.OmitHost \u0026\u0026 u.Host == \"\" \u0026\u0026 u.User == nil {\n\t\t\t\t// omit empty host\n\t\t\t} else {\n\t\t\t\tif u.Host != \"\" || u.Path != \"\" || u.User != nil {\n\t\t\t\t\tbuf.WriteString(\"//\")\n\t\t\t\t}\n\t\t\t\tif ui := u.User; ui != nil {\n\t\t\t\t\tbuf.WriteString(ui.String())\n\t\t\t\t\tbuf.WriteByte('@')\n\t\t\t\t}\n\t\t\t\tif h := u.Host; h != \"\" {\n\t\t\t\t\tbuf.WriteString(escape(h, encodeHost))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpath := u.EscapedPath()\n\t\tif path != \"\" \u0026\u0026 path[0] != '/' \u0026\u0026 u.Host != \"\" {\n\t\t\tbuf.WriteByte('/')\n\t\t}\n\t\tif buf.Len() == 0 {\n\t\t\t// RFC 3986 §4.2\n\t\t\t// A path segment that contains a colon character (e.g., \"this:that\")\n\t\t\t// cannot be used as the first segment of a relative-path reference, as\n\t\t\t// it would be mistaken for a scheme name. Such a segment must be\n\t\t\t// preceded by a dot-segment (e.g., \"./this:that\") to make a relative-\n\t\t\t// path reference.\n\t\t\tif segment, _, _ := strings.Cut(path, \"/\"); strings.Contains(segment, \":\") {\n\t\t\t\tbuf.WriteString(\"./\")\n\t\t\t}\n\t\t}\n\t\tbuf.WriteString(path)\n\t}\n\tif u.ForceQuery || u.RawQuery != \"\" {\n\t\tbuf.WriteByte('?')\n\t\tbuf.WriteString(u.RawQuery)\n\t}\n\tif u.Fragment != \"\" {\n\t\tbuf.WriteByte('#')\n\t\tbuf.WriteString(u.EscapedFragment())\n\t}\n\treturn buf.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Canceled = errors.New(\"context canceled\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Contains(s, substr string) bool {\n\treturn Index(s, substr) \u003e= 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadGateway                    = 502",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        431,
        432,
        433
      ],
      "cover_details": {
        "line_cover_rate": 0.7307692307692307
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:BindErrors",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        }
      ],
      "name": "BindErrors",
      "signature": "(b *ValueBinder) BindErrors () []error",
      "ground_truth": "func (b *ValueBinder) BindErrors() []error {\n\tif b.errors == nil {\n\t\treturn nil\n\t}\n\terrors := b.errors\n\tb.errors = nil // reset errors so next chain will start from zero\n\treturn errors\n}",
      "function_comment": "// BindErrors returns all bind errors and resets/empties binder errors for further calls",
      "function_statement": "// BindErrors returns all bind errors and resets/empties binder errors for further calls",
      "start_line": 200,
      "end_line": 207,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        200,
        201,
        202,
        203,
        204,
        205,
        206
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint64",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustUint64",
      "signature": "(b *ValueBinder) MustUint64 (sourceParam string, dest *uint64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint64(sourceParam string, dest *uint64) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 64, true)\n}",
      "function_comment": "// MustUint64 requires parameter value to exist to bind to uint64 variable. Returns error when value does not exist",
      "function_statement": "// MustUint64 requires parameter value to exist to bind to uint64 variable. Returns error when value does not exist",
      "start_line": 677,
      "end_line": 679,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        677,
        678,
        679
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:RealIP",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_RealIP"
        }
      ],
      "name": "RealIP",
      "signature": "(c *context) RealIP () string",
      "ground_truth": "func (c *context) RealIP() string {\n\tif c.echo != nil \u0026\u0026 c.echo.IPExtractor != nil {\n\t\treturn c.echo.IPExtractor(c.request)\n\t}\n\t// Fall back to legacy behavior\n\tif ip := c.request.Header.Get(HeaderXForwardedFor); ip != \"\" {\n\t\ti := strings.IndexAny(ip, \",\")\n\t\tif i \u003e 0 {\n\t\t\txffip := strings.TrimSpace(ip[:i])\n\t\t\txffip = strings.TrimPrefix(xffip, \"[\")\n\t\t\txffip = strings.TrimSuffix(xffip, \"]\")\n\t\t\treturn xffip\n\t\t}\n\t\treturn ip\n\t}\n\tif ip := c.request.Header.Get(HeaderXRealIP); ip != \"\" {\n\t\tip = strings.TrimPrefix(ip, \"[\")\n\t\tip = strings.TrimSuffix(ip, \"]\")\n\t\treturn ip\n\t}\n\tra, _, _ := net.SplitHostPort(c.request.RemoteAddr)\n\treturn ra\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 296,
      "end_line": 318,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedFor       = \"X-Forwarded-For\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXRealIP             = \"X-Real-Ip\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func IndexAny(s, chars string) int {\n\tif chars == \"\" {\n\t\t// Avoid scanning all of s.\n\t\treturn -1\n\t}\n\tif len(chars) == 1 {\n\t\t// Avoid scanning all of s.\n\t\tr := rune(chars[0])\n\t\tif r \u003e= utf8.RuneSelf {\n\t\t\tr = utf8.RuneError\n\t\t}\n\t\treturn IndexRune(s, r)\n\t}\n\tif len(s) \u003e 8 {\n\t\tif as, isASCII := makeASCIISet(chars); isASCII {\n\t\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\t\tif as.contains(s[i]) {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1\n\t\t}\n\t}\n\tfor i, c := range s {\n\t\tif IndexRune(chars, c) \u003e= 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimSpace(s string) string {\n\t// Fast path for ASCII: look for the first ASCII non-space byte\n\tstart := 0\n\tfor ; start \u003c len(s); start++ {\n\t\tc := s[start]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// If we run into a non-ASCII byte, fall back to the\n\t\t\t// slower unicode-aware method on the remaining bytes\n\t\t\treturn TrimFunc(s[start:], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Now look for the first ASCII non-space byte from the end\n\tstop := len(s)\n\tfor ; stop \u003e start; stop-- {\n\t\tc := s[stop-1]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// start has been already trimmed above, should trim end only\n\t\t\treturn TrimRightFunc(s[start:stop], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// At this point s[start:stop] starts and ends with an ASCII\n\t// non-space bytes, so we're done. Non-ASCII cases have already\n\t// been handled above.\n\treturn s[start:stop]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimPrefix(s, prefix string) string {\n\treturn stringslite.TrimPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimSuffix(s, suffix string) string {\n\treturn stringslite.TrimSuffix(s, suffix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ipsock.go",
          "code_snippet": "func SplitHostPort(hostport string) (host, port string, err error) {\n\tconst (\n\t\tmissingPort   = \"missing port in address\"\n\t\ttooManyColons = \"too many colons in address\"\n\t)\n\taddrErr := func(addr, why string) (host, port string, err error) {\n\t\treturn \"\", \"\", \u0026AddrError{Err: why, Addr: addr}\n\t}\n\tj, k := 0, 0\n\n\t// The port starts after the last colon.\n\ti := bytealg.LastIndexByteString(hostport, ':')\n\tif i \u003c 0 {\n\t\treturn addrErr(hostport, missingPort)\n\t}\n\n\tif hostport[0] == '[' {\n\t\t// Expect the first ']' just before the last ':'.\n\t\tend := bytealg.IndexByteString(hostport, ']')\n\t\tif end \u003c 0 {\n\t\t\treturn addrErr(hostport, \"missing ']' in address\")\n\t\t}\n\t\tswitch end + 1 {\n\t\tcase len(hostport):\n\t\t\t// There can't be a ':' behind the ']' now.\n\t\t\treturn addrErr(hostport, missingPort)\n\t\tcase i:\n\t\t\t// The expected result.\n\t\tdefault:\n\t\t\t// Either ']' isn't followed by a colon, or it is\n\t\t\t// followed by a colon that is not the last one.\n\t\t\tif hostport[end+1] == ':' {\n\t\t\t\treturn addrErr(hostport, tooManyColons)\n\t\t\t}\n\t\t\treturn addrErr(hostport, missingPort)\n\t\t}\n\t\thost = hostport[1:end]\n\t\tj, k = 1, end+1 // there can't be a '[' resp. ']' before these positions\n\t} else {\n\t\thost = hostport[:i]\n\t\tif bytealg.IndexByteString(host, ':') \u003e= 0 {\n\t\t\treturn addrErr(hostport, tooManyColons)\n\t\t}\n\t}\n\tif bytealg.IndexByteString(hostport[j:], '[') \u003e= 0 {\n\t\treturn addrErr(hostport, \"unexpected '[' in address\")\n\t}\n\tif bytealg.IndexByteString(hostport[k:], ']') \u003e= 0 {\n\t\treturn addrErr(hostport, \"unexpected ']' in address\")\n\t}\n\n\tport = hostport[i+1:]\n\treturn host, port, nil\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        296,
        297,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        311,
        312,
        313,
        314,
        315,
        316,
        317
      ],
      "cover_details": {
        "line_cover_rate": 0.782608695652174
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:ExtractIPDirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPDirect"
        }
      ],
      "name": "ExtractIPDirect",
      "signature": "ExtractIPDirect () IPExtractor",
      "ground_truth": "func ExtractIPDirect() IPExtractor {\n\treturn extractIP\n}",
      "function_comment": "// ExtractIPDirect extracts IP address using actual IP address.\n// Use this if your server faces to internet directory (i.e.: uses no proxy).",
      "function_statement": "// ExtractIPDirect extracts IP address using actual IP address.\n// Use this if your server faces to internet directory (i.e.: uses no proxy).",
      "start_line": 217,
      "end_line": 219,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "IPExtractor func(*http.Request) string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func extractIP(req *http.Request) string {\n\thost, _, err := net.SplitHostPort(req.RemoteAddr)\n\tif err != nil {\n\t\tif net.ParseIP(req.RemoteAddr) != nil {\n\t\t\treturn req.RemoteAddr\n\t\t}\n\t\treturn \"\"\n\t}\n\treturn host\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        217,
        218,
        219
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustBools",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        }
      ],
      "name": "MustBools",
      "signature": "(b *ValueBinder) MustBools (sourceParam string, dest *[]bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustBools(sourceParam string, dest *[]bool) *ValueBinder {\n\treturn b.boolsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustBools requires parameter values to exist to bind to slice of bool variables. Returns error when values does not exist",
      "function_statement": "// MustBools requires parameter values to exist to bind to slice of bool variables. Returns error when values does not exist",
      "start_line": 970,
      "end_line": 972,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) boolsValue(sourceParam string, dest *[]bool, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.bools(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        970,
        971,
        972
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Durations",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        }
      ],
      "name": "Durations",
      "signature": "(b *ValueBinder) Durations (sourceParam string, dest *[]time.Duration) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Durations(sourceParam string, dest *[]time.Duration) *ValueBinder {\n\treturn b.durationsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Durations binds parameter values to slice of time.Duration variables",
      "function_statement": "// Durations binds parameter values to slice of time.Duration variables",
      "start_line": 1193,
      "end_line": 1195,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) durationsValue(sourceParam string, dest *[]time.Duration, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.durations(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1193,
        1194,
        1195
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:trust",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLinkLocal"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLoopback"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        }
      ],
      "name": "trust",
      "signature": "(c *ipChecker) trust (ip net.IP) bool",
      "ground_truth": "func (c *ipChecker) trust(ip net.IP) bool {\n\tif c.trustLoopback \u0026\u0026 ip.IsLoopback() {\n\t\treturn true\n\t}\n\tif c.trustLinkLocal \u0026\u0026 ip.IsLinkLocalUnicast() {\n\t\treturn true\n\t}\n\tif c.trustPrivateNet \u0026\u0026 isPrivateIPRange(ip) {\n\t\treturn true\n\t}\n\tfor _, trustedRange := range c.trustExtraRanges {\n\t\tif trustedRange.Contains(ip) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 192,
      "end_line": 208,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "ipChecker struct {\n\ttrustExtraRanges []*net.IPNet\n\ttrustLoopback    bool\n\ttrustLinkLocal   bool\n\ttrustPrivateNet  bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func isPrivateIPRange(ip net.IP) bool {\n\tif ip4 := ip.To4(); ip4 != nil {\n\t\treturn ip4[0] == 10 ||\n\t\t\tip4[0] == 172 \u0026\u0026 ip4[1]\u00260xf0 == 16 ||\n\t\t\tip4[0] == 192 \u0026\u0026 ip4[1] == 168\n\t}\n\treturn len(ip) == net.IPv6len \u0026\u0026 ip[0]\u00260xfe == 0xfc\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "IP []byte",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func (ip IP) IsLoopback() bool {\n\tif ip4 := ip.To4(); ip4 != nil {\n\t\treturn ip4[0] == 127\n\t}\n\treturn ip.Equal(IPv6loopback)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func (ip IP) IsLinkLocalUnicast() bool {\n\tif ip4 := ip.To4(); ip4 != nil {\n\t\treturn ip4[0] == 169 \u0026\u0026 ip4[1] == 254\n\t}\n\treturn len(ip) == IPv6len \u0026\u0026 ip[0] == 0xfe \u0026\u0026 ip[1]\u00260xc0 == 0x80\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func (n *IPNet) Contains(ip IP) bool {\n\tnn, m := networkNumberAndMask(n)\n\tif x := ip.To4(); x != nil {\n\t\tip = x\n\t}\n\tl := len(ip)\n\tif l != len(nn) {\n\t\treturn false\n\t}\n\tfor i := 0; i \u003c l; i++ {\n\t\tif nn[i]\u0026m[i] != ip[i]\u0026m[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        207
      ],
      "cover_details": {
        "line_cover_rate": 0.8823529411764706
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/method_override.go:MethodFromQuery",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/method_override_test.go",
          "func_name": "TestMethodOverride"
        }
      ],
      "name": "MethodFromQuery",
      "signature": "MethodFromQuery (param string) MethodOverrideGetter",
      "ground_truth": "func MethodFromQuery(param string) MethodOverrideGetter {\n\treturn func(c echo.Context) string {\n\t\treturn c.QueryParam(param)\n\t}\n}",
      "function_comment": "// MethodFromQuery is a `MethodOverrideGetter` that gets overridden method from\n// the query parameter.",
      "function_statement": "// MethodFromQuery is a `MethodOverrideGetter` that gets overridden method from\n// the query parameter.",
      "start_line": 87,
      "end_line": 91,
      "file_path": "./middleware/method_override.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "MethodOverrideGetter func(echo.Context) string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        87,
        88,
        89,
        90
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/request_logger.go:RequestLoggerWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig_missingOnLogValuesPanics"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_beforeNextFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_LogValuesFuncError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_ID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_logError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_headerIsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_HandleError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_allFields"
        }
      ],
      "name": "RequestLoggerWithConfig",
      "signature": "RequestLoggerWithConfig (config RequestLoggerConfig) echo.MiddlewareFunc",
      "ground_truth": "func RequestLoggerWithConfig(config RequestLoggerConfig) echo.MiddlewareFunc {\n\tmw, err := config.ToMiddleware()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn mw\n}",
      "function_comment": "// RequestLoggerWithConfig returns a RequestLogger middleware with config.",
      "function_statement": "// RequestLoggerWithConfig returns a RequestLogger middleware with config.",
      "start_line": 242,
      "end_line": 248,
      "file_path": "./middleware/request_logger.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_logger.go",
          "code_snippet": "RequestLoggerConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// BeforeNextFunc defines a function that is called before next middleware or handler is called in chain.\n\tBeforeNextFunc func(c echo.Context)\n\t// LogValuesFunc defines a function that is called with values extracted by logger from request/response.\n\t// Mandatory.\n\tLogValuesFunc func(c echo.Context, v RequestLoggerValues) error\n\n\t// HandleError instructs logger to call global error handler when next middleware/handler returns an error.\n\t// This is useful when you have custom error handler that can decide to use different status codes.\n\t//\n\t// A side-effect of calling global error handler is that now Response has been committed and sent to the client\n\t// and middlewares up in chain can not change Response status code or response body.\n\tHandleError bool\n\n\t// LogLatency instructs logger to record duration it took to execute rest of the handler chain (next(c) call).\n\tLogLatency bool\n\t// LogProtocol instructs logger to extract request protocol (i.e. `HTTP/1.1` or `HTTP/2`)\n\tLogProtocol bool\n\t// LogRemoteIP instructs logger to extract request remote IP. See `echo.Context.RealIP()` for implementation details.\n\tLogRemoteIP bool\n\t// LogHost instructs logger to extract request host value (i.e. `example.com`)\n\tLogHost bool\n\t// LogMethod instructs logger to extract request method value (i.e. `GET` etc)\n\tLogMethod bool\n\t// LogURI instructs logger to extract request URI (i.e. `/list?lang=en\u0026page=1`)\n\tLogURI bool\n\t// LogURIPath instructs logger to extract request URI path part (i.e. `/list`)\n\tLogURIPath bool\n\t// LogRoutePath instructs logger to extract route path part to which request was matched to (i.e. `/user/:id`)\n\tLogRoutePath bool\n\t// LogRequestID instructs logger to extract request ID from request `X-Request-ID` header or response if request did not have value.\n\tLogRequestID bool\n\t// LogReferer instructs logger to extract request referer values.\n\tLogReferer bool\n\t// LogUserAgent instructs logger to extract request user agent values.\n\tLogUserAgent bool\n\t// LogStatus instructs logger to extract response status code. If handler chain returns an echo.HTTPError,\n\t// the status code is extracted from the echo.HTTPError returned\n\tLogStatus bool\n\t// LogError instructs logger to extract error returned from executed handler chain.\n\tLogError bool\n\t// LogContentLength instructs logger to extract content length header value. Note: this value could be different from\n\t// actual request body size as it could be spoofed etc.\n\tLogContentLength bool\n\t// LogResponseSize instructs logger to extract response content length value. Note: when used with Gzip middleware\n\t// this value may not be always correct.\n\tLogResponseSize bool\n\t// LogHeaders instructs logger to extract given list of headers from request. Note: request can contain more than\n\t// one header with same value so slice of values is been logger for each given header.\n\t//\n\t// Note: header values are converted to canonical form with http.CanonicalHeaderKey as this how request parser converts header\n\t// names to. For example, the canonical key for \"accept-encoding\" is \"Accept-Encoding\".\n\tLogHeaders []string\n\t// LogQueryParams instructs logger to extract given list of query parameters from request URI. Note: request can\n\t// contain more than one query parameter with same name so slice of values is been logger for each given query param name.\n\tLogQueryParams []string\n\t// LogFormValues instructs logger to extract given list of form values from request body+URI. Note: request can\n\t// contain more than one form value with same name so slice of values is been logger for each given form value name.\n\tLogFormValues []string\n\n\ttimeNow func() time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_logger.go",
          "code_snippet": "func (config RequestLoggerConfig) ToMiddleware() (echo.MiddlewareFunc, error) {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultSkipper\n\t}\n\tnow := time.Now\n\tif config.timeNow != nil {\n\t\tnow = config.timeNow\n\t}\n\n\tif config.LogValuesFunc == nil {\n\t\treturn nil, errors.New(\"missing LogValuesFunc callback function for request logger middleware\")\n\t}\n\n\tlogHeaders := len(config.LogHeaders) \u003e 0\n\theaders := append([]string(nil), config.LogHeaders...)\n\tfor i, v := range headers {\n\t\theaders[i] = http.CanonicalHeaderKey(v)\n\t}\n\n\tlogQueryParams := len(config.LogQueryParams) \u003e 0\n\tlogFormValues := len(config.LogFormValues) \u003e 0\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\tstart := now()\n\n\t\t\tif config.BeforeNextFunc != nil {\n\t\t\t\tconfig.BeforeNextFunc(c)\n\t\t\t}\n\t\t\terr := next(c)\n\t\t\tif err != nil \u0026\u0026 config.HandleError {\n\t\t\t\tc.Error(err)\n\t\t\t}\n\n\t\t\tv := RequestLoggerValues{\n\t\t\t\tStartTime: start,\n\t\t\t}\n\t\t\tif config.LogLatency {\n\t\t\t\tv.Latency = now().Sub(start)\n\t\t\t}\n\t\t\tif config.LogProtocol {\n\t\t\t\tv.Protocol = req.Proto\n\t\t\t}\n\t\t\tif config.LogRemoteIP {\n\t\t\t\tv.RemoteIP = c.RealIP()\n\t\t\t}\n\t\t\tif config.LogHost {\n\t\t\t\tv.Host = req.Host\n\t\t\t}\n\t\t\tif config.LogMethod {\n\t\t\t\tv.Method = req.Method\n\t\t\t}\n\t\t\tif config.LogURI {\n\t\t\t\tv.URI = req.RequestURI\n\t\t\t}\n\t\t\tif config.LogURIPath {\n\t\t\t\tp := req.URL.Path\n\t\t\t\tif p == \"\" {\n\t\t\t\t\tp = \"/\"\n\t\t\t\t}\n\t\t\t\tv.URIPath = p\n\t\t\t}\n\t\t\tif config.LogRoutePath {\n\t\t\t\tv.RoutePath = c.Path()\n\t\t\t}\n\t\t\tif config.LogRequestID {\n\t\t\t\tid := req.Header.Get(echo.HeaderXRequestID)\n\t\t\t\tif id == \"\" {\n\t\t\t\t\tid = res.Header().Get(echo.HeaderXRequestID)\n\t\t\t\t}\n\t\t\t\tv.RequestID = id\n\t\t\t}\n\t\t\tif config.LogReferer {\n\t\t\t\tv.Referer = req.Referer()\n\t\t\t}\n\t\t\tif config.LogUserAgent {\n\t\t\t\tv.UserAgent = req.UserAgent()\n\t\t\t}\n\t\t\tif config.LogStatus {\n\t\t\t\tv.Status = res.Status\n\t\t\t\tif err != nil \u0026\u0026 !config.HandleError {\n\t\t\t\t\t//  this block should not be executed in case of HandleError=true as the global error handler will decide\n\t\t\t\t\t//  the status code. In that case status code could be different from what err contains.\n\t\t\t\t\tvar httpErr *echo.HTTPError\n\t\t\t\t\tif errors.As(err, \u0026httpErr) {\n\t\t\t\t\t\tv.Status = httpErr.Code\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif config.LogError \u0026\u0026 err != nil {\n\t\t\t\tv.Error = err\n\t\t\t}\n\t\t\tif config.LogContentLength {\n\t\t\t\tv.ContentLength = req.Header.Get(echo.HeaderContentLength)\n\t\t\t}\n\t\t\tif config.LogResponseSize {\n\t\t\t\tv.ResponseSize = res.Size\n\t\t\t}\n\t\t\tif logHeaders {\n\t\t\t\tv.Headers = map[string][]string{}\n\t\t\t\tfor _, header := range headers {\n\t\t\t\t\tif values, ok := req.Header[header]; ok {\n\t\t\t\t\t\tv.Headers[header] = values\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif logQueryParams {\n\t\t\t\tqueryParams := c.QueryParams()\n\t\t\t\tv.QueryParams = map[string][]string{}\n\t\t\t\tfor _, param := range config.LogQueryParams {\n\t\t\t\t\tif values, ok := queryParams[param]; ok {\n\t\t\t\t\t\tv.QueryParams[param] = values\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif logFormValues {\n\t\t\t\tv.FormValues = map[string][]string{}\n\t\t\t\tfor _, formValue := range config.LogFormValues {\n\t\t\t\t\tif values, ok := req.Form[formValue]; ok {\n\t\t\t\t\t\tv.FormValues[formValue] = values\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif errOnLog := config.LogValuesFunc(c, v); errOnLog != nil {\n\t\t\t\treturn errOnLog\n\t\t\t}\n\n\t\t\t// in case of HandleError=true we are returning the error that we already have handled with global error handler\n\t\t\t// this is deliberate as this error could be useful for upstream middlewares and default global error handler\n\t\t\t// will ignore that error when it bubbles up in middleware chain.\n\t\t\treturn err\n\t\t}\n\t}, nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        242,
        243,
        244,
        245,
        247
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:newIPChecker",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLinkLocal"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLoopback"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        }
      ],
      "name": "newIPChecker",
      "signature": "newIPChecker (configs []TrustOption) *ipChecker",
      "ground_truth": "func newIPChecker(configs []TrustOption) *ipChecker {\n\tchecker := \u0026ipChecker{trustLoopback: true, trustLinkLocal: true, trustPrivateNet: true}\n\tfor _, configure := range configs {\n\t\tconfigure(checker)\n\t}\n\treturn checker\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 174,
      "end_line": 180,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "ipChecker struct {\n\ttrustExtraRanges []*net.IPNet\n\ttrustLoopback    bool\n\ttrustLinkLocal   bool\n\ttrustPrivateNet  bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        174,
        175,
        176,
        177,
        178,
        179
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:Any",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "Any",
      "signature": "(g *Group) Any (path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route",
      "ground_truth": "func (g *Group) Any(path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route {\n\troutes := make([]*Route, len(methods))\n\tfor i, m := range methods {\n\t\troutes[i] = g.Add(m, path, handler, middleware...)\n\t}\n\treturn routes\n}",
      "function_comment": "// Any implements `Echo#Any()` for sub-routes within the Group.",
      "function_statement": "// Any implements `Echo#Any()` for sub-routes within the Group.",
      "start_line": 81,
      "end_line": 87,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "methods = [...]string{\n\thttp.MethodConnect,\n\thttp.MethodDelete,\n\thttp.MethodGet,\n\thttp.MethodHead,\n\thttp.MethodOptions,\n\thttp.MethodPatch,\n\thttp.MethodPost,\n\tPROPFIND,\n\thttp.MethodPut,\n\thttp.MethodTrace,\n\tREPORT,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:NewHTTPError",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_bindDataToMap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindbindData"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindingError_ErrorJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindingError_Error"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_SetHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStore"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Path"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Request"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_IsWebSocket"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Scheme"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_RealIP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLinkLocal"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPDirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLoopback"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_FlushPanics"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "NewHTTPError",
      "signature": "NewHTTPError (code int, message ...interface{}) *HTTPError",
      "ground_truth": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
      "function_comment": "// NewHTTPError creates a new HTTPError instance.",
      "function_statement": "// NewHTTPError creates a new HTTPError instance.",
      "start_line": 887,
      "end_line": 893,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "func StatusText(code int) string {\n\tswitch code {\n\tcase StatusContinue:\n\t\treturn \"Continue\"\n\tcase StatusSwitchingProtocols:\n\t\treturn \"Switching Protocols\"\n\tcase StatusProcessing:\n\t\treturn \"Processing\"\n\tcase StatusEarlyHints:\n\t\treturn \"Early Hints\"\n\tcase StatusOK:\n\t\treturn \"OK\"\n\tcase StatusCreated:\n\t\treturn \"Created\"\n\tcase StatusAccepted:\n\t\treturn \"Accepted\"\n\tcase StatusNonAuthoritativeInfo:\n\t\treturn \"Non-Authoritative Information\"\n\tcase StatusNoContent:\n\t\treturn \"No Content\"\n\tcase StatusResetContent:\n\t\treturn \"Reset Content\"\n\tcase StatusPartialContent:\n\t\treturn \"Partial Content\"\n\tcase StatusMultiStatus:\n\t\treturn \"Multi-Status\"\n\tcase StatusAlreadyReported:\n\t\treturn \"Already Reported\"\n\tcase StatusIMUsed:\n\t\treturn \"IM Used\"\n\tcase StatusMultipleChoices:\n\t\treturn \"Multiple Choices\"\n\tcase StatusMovedPermanently:\n\t\treturn \"Moved Permanently\"\n\tcase StatusFound:\n\t\treturn \"Found\"\n\tcase StatusSeeOther:\n\t\treturn \"See Other\"\n\tcase StatusNotModified:\n\t\treturn \"Not Modified\"\n\tcase StatusUseProxy:\n\t\treturn \"Use Proxy\"\n\tcase StatusTemporaryRedirect:\n\t\treturn \"Temporary Redirect\"\n\tcase StatusPermanentRedirect:\n\t\treturn \"Permanent Redirect\"\n\tcase StatusBadRequest:\n\t\treturn \"Bad Request\"\n\tcase StatusUnauthorized:\n\t\treturn \"Unauthorized\"\n\tcase StatusPaymentRequired:\n\t\treturn \"Payment Required\"\n\tcase StatusForbidden:\n\t\treturn \"Forbidden\"\n\tcase StatusNotFound:\n\t\treturn \"Not Found\"\n\tcase StatusMethodNotAllowed:\n\t\treturn \"Method Not Allowed\"\n\tcase StatusNotAcceptable:\n\t\treturn \"Not Acceptable\"\n\tcase StatusProxyAuthRequired:\n\t\treturn \"Proxy Authentication Required\"\n\tcase StatusRequestTimeout:\n\t\treturn \"Request Timeout\"\n\tcase StatusConflict:\n\t\treturn \"Conflict\"\n\tcase StatusGone:\n\t\treturn \"Gone\"\n\tcase StatusLengthRequired:\n\t\treturn \"Length Required\"\n\tcase StatusPreconditionFailed:\n\t\treturn \"Precondition Failed\"\n\tcase StatusRequestEntityTooLarge:\n\t\treturn \"Request Entity Too Large\"\n\tcase StatusRequestURITooLong:\n\t\treturn \"Request URI Too Long\"\n\tcase StatusUnsupportedMediaType:\n\t\treturn \"Unsupported Media Type\"\n\tcase StatusRequestedRangeNotSatisfiable:\n\t\treturn \"Requested Range Not Satisfiable\"\n\tcase StatusExpectationFailed:\n\t\treturn \"Expectation Failed\"\n\tcase StatusTeapot:\n\t\treturn \"I'm a teapot\"\n\tcase StatusMisdirectedRequest:\n\t\treturn \"Misdirected Request\"\n\tcase StatusUnprocessableEntity:\n\t\treturn \"Unprocessable Entity\"\n\tcase StatusLocked:\n\t\treturn \"Locked\"\n\tcase StatusFailedDependency:\n\t\treturn \"Failed Dependency\"\n\tcase StatusTooEarly:\n\t\treturn \"Too Early\"\n\tcase StatusUpgradeRequired:\n\t\treturn \"Upgrade Required\"\n\tcase StatusPreconditionRequired:\n\t\treturn \"Precondition Required\"\n\tcase StatusTooManyRequests:\n\t\treturn \"Too Many Requests\"\n\tcase StatusRequestHeaderFieldsTooLarge:\n\t\treturn \"Request Header Fields Too Large\"\n\tcase StatusUnavailableForLegalReasons:\n\t\treturn \"Unavailable For Legal Reasons\"\n\tcase StatusInternalServerError:\n\t\treturn \"Internal Server Error\"\n\tcase StatusNotImplemented:\n\t\treturn \"Not Implemented\"\n\tcase StatusBadGateway:\n\t\treturn \"Bad Gateway\"\n\tcase StatusServiceUnavailable:\n\t\treturn \"Service Unavailable\"\n\tcase StatusGatewayTimeout:\n\t\treturn \"Gateway Timeout\"\n\tcase StatusHTTPVersionNotSupported:\n\t\treturn \"HTTP Version Not Supported\"\n\tcase StatusVariantAlsoNegotiates:\n\t\treturn \"Variant Also Negotiates\"\n\tcase StatusInsufficientStorage:\n\t\treturn \"Insufficient Storage\"\n\tcase StatusLoopDetected:\n\t\treturn \"Loop Detected\"\n\tcase StatusNotExtended:\n\t\treturn \"Not Extended\"\n\tcase StatusNetworkAuthenticationRequired:\n\t\treturn \"Network Authentication Required\"\n\tdefault:\n\t\treturn \"\"\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        887,
        888,
        889,
        890,
        891,
        892
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:FileFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        }
      ],
      "name": "FileFS",
      "signature": "(e *Echo) FileFS (path, file string, filesystem fs.FS, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) FileFS(path, file string, filesystem fs.FS, m ...MiddlewareFunc) *Route {\n\treturn e.GET(path, StaticFileHandler(file, filesystem), m...)\n}",
      "function_comment": "// FileFS registers a new route with path to serve file from the provided file system.",
      "function_statement": "// FileFS registers a new route with path to serve file from the provided file system.",
      "start_line": 86,
      "end_line": 88,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) GET(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodGet, path, h, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func StaticFileHandler(file string, filesystem fs.FS) HandlerFunc {\n\treturn func(c Context) error {\n\t\treturn fsFile(c, file, filesystem)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        86,
        87,
        88
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:StaticFileHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        }
      ],
      "name": "StaticFileHandler",
      "signature": "StaticFileHandler (file string, filesystem fs.FS) HandlerFunc",
      "ground_truth": "func StaticFileHandler(file string, filesystem fs.FS) HandlerFunc {\n\treturn func(c Context) error {\n\t\treturn fsFile(c, file, filesystem)\n\t}\n}",
      "function_comment": "// StaticFileHandler creates handler function to serve file from provided file system",
      "function_statement": "// StaticFileHandler creates handler function to serve file from provided file system",
      "start_line": 91,
      "end_line": 95,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context_fs.go",
          "code_snippet": "func fsFile(c Context, file string, filesystem fs.FS) error {\n\tf, err := filesystem.Open(file)\n\tif err != nil {\n\t\treturn ErrNotFound\n\t}\n\tdefer f.Close()\n\n\tfi, _ := f.Stat()\n\tif fi.IsDir() {\n\t\tfile = filepath.ToSlash(filepath.Join(file, indexPage)) // ToSlash is necessary for Windows. fs.Open and os.Open are different in that aspect.\n\t\tf, err = filesystem.Open(file)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\t\tdefer f.Close()\n\t\tif fi, err = f.Stat(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tff, ok := f.(io.ReadSeeker)\n\tif !ok {\n\t\treturn errors.New(\"file does not implement io.ReadSeeker\")\n\t}\n\thttp.ServeContent(c.Response(), c.Request(), fi.Name(), fi.ModTime(), ff)\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        91,
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:newListener",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        }
      ],
      "name": "newListener",
      "signature": "newListener (address, network string) (*tcpKeepAliveListener, error)",
      "ground_truth": "func newListener(address, network string) (*tcpKeepAliveListener, error) {\n\tif network != \"tcp\" \u0026\u0026 network != \"tcp4\" \u0026\u0026 network != \"tcp6\" {\n\t\treturn nil, ErrInvalidListenerNetwork\n\t}\n\tl, err := net.Listen(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026tcpKeepAliveListener{l.(*net.TCPListener)}, nil\n}",
      "function_comment": "// // PathUnescape is wraps `url.PathUnescape`\n// func PathUnescape(s string) (string, error) {\n// \treturn url.PathUnescape(s)\n// }\n// tcpKeepAliveListener sets TCP keep-alive timeouts on accepted\n// connections. It's used by ListenAndServe and ListenAndServeTLS so\n// dead TCP connections (e.g. closing laptop mid-download) eventually",
      "function_statement": "// // PathUnescape is wraps `url.PathUnescape`\n// func PathUnescape(s string) (string, error) {\n// \treturn url.PathUnescape(s)\n// }\n// tcpKeepAliveListener sets TCP keep-alive timeouts on accepted\n// connections. It's used by ListenAndServe and ListenAndServeTLS so\n// dead TCP connections (e.g. closing laptop mid-download) eventually",
      "start_line": 999,
      "end_line": 1008,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "tcpKeepAliveListener struct {\n\t*net.TCPListener\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrInvalidListenerNetwork = errors.New(\"invalid listener network\")",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/dial.go",
          "code_snippet": "func Listen(network, address string) (Listener, error) {\n\tvar lc ListenConfig\n\treturn lc.Listen(context.Background(), network, address)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/tcpsock.go",
          "code_snippet": "TCPListener struct {\n\tfd *netFD\n\tlc ListenConfig\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        999,
        1000,
        1001,
        1002,
        1003,
        1004,
        1005,
        1006,
        1007
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:XML",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        }
      ],
      "name": "XML",
      "signature": "(c *context) XML (code int, i any) (err error)",
      "ground_truth": "func (c *context) XML(code int, i any) (err error) {\n\tindent := \"\"\n\tif _, pretty := c.QueryParams()[\"pretty\"]; c.echo.Debug || pretty {\n\t\tindent = defaultIndent\n\t}\n\treturn c.xml(code, i, indent)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 554,
      "end_line": 560,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) QueryParams() url.Values {\n\tif c.query == nil {\n\t\tc.query = c.request.URL.Query()\n\t}\n\treturn c.query\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "defaultIndent = \"  \"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) xml(code int, i any, indent string) (err error) {\n\tc.writeContentType(MIMEApplicationXMLCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tenc := xml.NewEncoder(c.response)\n\tif indent != \"\" {\n\t\tenc.Indent(\"\", indent)\n\t}\n\tif _, err = c.response.Write([]byte(xml.Header)); err != nil {\n\t\treturn\n\t}\n\treturn enc.Encode(i)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        554,
        555,
        556,
        557,
        558,
        559
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:Static",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        }
      ],
      "name": "Static",
      "signature": "(e *Echo) Static (pathPrefix, fsRoot string) *Route",
      "ground_truth": "func (e *Echo) Static(pathPrefix, fsRoot string) *Route {\n\tsubFs := MustSubFS(e.Filesystem, fsRoot)\n\treturn e.Add(\n\t\thttp.MethodGet,\n\t\tpathPrefix+\"*\",\n\t\tStaticDirectoryHandler(subFs, false),\n\t)\n}",
      "function_comment": "// Static registers a new route with path prefix to serve static files from the provided root directory.",
      "function_statement": "// Static registers a new route with path prefix to serve static files from the provided root directory.",
      "start_line": 33,
      "end_line": 40,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func MustSubFS(currentFs fs.FS, fsRoot string) fs.FS {\n\tsubFs, err := subFS(currentFs, fsRoot)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"can not create sub FS, invalid root given, err: %w\", err))\n\t}\n\treturn subFs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "filesystem struct {\n\t// Filesystem is file system used by Static and File handlers to access files.\n\t// Defaults to os.DirFS(\".\")\n\t//\n\t// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n\t// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n\t// including `assets/images` as their prefix.\n\tFilesystem fs.FS\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func StaticDirectoryHandler(fileSystem fs.FS, disablePathUnescaping bool) HandlerFunc {\n\treturn func(c Context) error {\n\t\tp := c.Param(\"*\")\n\t\tif !disablePathUnescaping { // when router is already unescaping we do not want to do is twice\n\t\t\ttmpPath, err := url.PathUnescape(p)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to unescape path variable: %w\", err)\n\t\t\t}\n\t\t\tp = tmpPath\n\t\t}\n\n\t\t// fs.FS.Open() already assumes that file names are relative to FS root path and considers name with prefix `/` as invalid\n\t\tname := filepath.ToSlash(filepath.Clean(strings.TrimPrefix(p, \"/\")))\n\t\tfi, err := fs.Stat(fileSystem, name)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\n\t\t// If the request is for a directory and does not end with \"/\"\n\t\tp = c.Request().URL.Path // path must not be empty.\n\t\tif fi.IsDir() \u0026\u0026 len(p) \u003e 0 \u0026\u0026 p[len(p)-1] != '/' {\n\t\t\t// Redirect to ends with \"/\"\n\t\t\treturn c.Redirect(http.StatusMovedPermanently, sanitizeURI(p+\"/\"))\n\t\t}\n\t\treturn fsFile(c, name, fileSystem)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:valuesFromHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuth"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_ContinueOnIgnoredError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "valuesFromHeader",
      "signature": "valuesFromHeader (header string, valuePrefix string) ValuesExtractor",
      "ground_truth": "func valuesFromHeader(header string, valuePrefix string) ValuesExtractor {\n\tprefixLen := len(valuePrefix)\n\t// standard library parses http.Request header keys in canonical form but we may provide something else so fix this\n\theader = textproto.CanonicalMIMEHeaderKey(header)\n\treturn func(c echo.Context) ([]string, error) {\n\t\tvalues := c.Request().Header.Values(header)\n\t\tif len(values) == 0 {\n\t\t\treturn nil, errHeaderExtractorValueMissing\n\t\t}\n\n\t\tresult := make([]string, 0)\n\t\tfor i, value := range values {\n\t\t\tif prefixLen == 0 {\n\t\t\t\tresult = append(result, value)\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif len(value) \u003e prefixLen \u0026\u0026 strings.EqualFold(value[:prefixLen], valuePrefix) {\n\t\t\t\tresult = append(result, value[prefixLen:])\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif len(result) == 0 {\n\t\t\tif prefixLen \u003e 0 {\n\t\t\t\treturn nil, errHeaderExtractorValueInvalid\n\t\t\t}\n\t\t\treturn nil, errHeaderExtractorValueMissing\n\t\t}\n\t\treturn result, nil\n\t}\n}",
      "function_comment": "// valuesFromHeader returns a functions that extracts values from the request header.\n// valuePrefix is parameter to remove first part (prefix) of the extracted value. This is useful if header value has static\n// prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we want to remove is `\u003cauth-scheme\u003e `\n// note the space at the end. In case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove\n// is `Basic `. In case of JWT tokens `Authorization: Bearer \u003ctoken\u003e` prefix is `Bearer `.\n// If prefix is left empty the whole value is returned.",
      "function_statement": "// valuesFromHeader returns a functions that extracts values from the request header.\n// valuePrefix is parameter to remove first part (prefix) of the extracted value. This is useful if header value has static\n// prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we want to remove is `\u003cauth-scheme\u003e `\n// note the space at the end. In case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove\n// is `Basic `. In case of JWT tokens `Authorization: Bearer \u003ctoken\u003e` prefix is `Bearer `.\n// If prefix is left empty the whole value is returned.",
      "start_line": 97,
      "end_line": 132,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errHeaderExtractorValueMissing = errors.New(\"missing value in request header\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "extractorLimit = 20",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errHeaderExtractorValueInvalid = errors.New(\"invalid value in request header\")",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/textproto/reader.go",
          "code_snippet": "func CanonicalMIMEHeaderKey(s string) string {\n\t// Quick check for canonical encoding.\n\tupper := true\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif !validHeaderFieldByte(c) {\n\t\t\treturn s\n\t\t}\n\t\tif upper \u0026\u0026 'a' \u003c= c \u0026\u0026 c \u003c= 'z' {\n\t\t\ts, _ = canonicalMIMEHeaderKey([]byte(s))\n\t\t\treturn s\n\t\t}\n\t\tif !upper \u0026\u0026 'A' \u003c= c \u0026\u0026 c \u003c= 'Z' {\n\t\t\ts, _ = canonicalMIMEHeaderKey([]byte(s))\n\t\t\treturn s\n\t\t}\n\t\tupper = c == '-'\n\t}\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Values(key string) []string {\n\treturn textproto.MIMEHeader(h).Values(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func EqualFold(s, t string) bool {\n\t// ASCII fast path\n\ti := 0\n\tfor ; i \u003c len(s) \u0026\u0026 i \u003c len(t); i++ {\n\t\tsr := s[i]\n\t\ttr := t[i]\n\t\tif sr|tr \u003e= utf8.RuneSelf {\n\t\t\tgoto hasUnicode\n\t\t}\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// ASCII only, sr/tr must be upper/lower case\n\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\t// Check if we've exhausted both strings.\n\treturn len(s) == len(t)\n\nhasUnicode:\n\ts = s[i:]\n\tt = t[i:]\n\tfor _, sr := range s {\n\t\t// If t is exhausted the strings are not equal.\n\t\tif len(t) == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\t// Extract first rune from second string.\n\t\tvar tr rune\n\t\tif t[0] \u003c utf8.RuneSelf {\n\t\t\ttr, t = rune(t[0]), t[1:]\n\t\t} else {\n\t\t\tr, size := utf8.DecodeRuneInString(t)\n\t\t\ttr, t = r, t[size:]\n\t\t}\n\n\t\t// If they match, keep going; if not, return false.\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// Fast check for ASCII.\n\t\tif tr \u003c utf8.RuneSelf {\n\t\t\t// ASCII only, sr/tr must be upper/lower case\n\t\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\n\t\t// General case. SimpleFold(x) returns the next equivalent rune \u003e x\n\t\t// or wraps around to smaller values.\n\t\tr := unicode.SimpleFold(sr)\n\t\tfor r != sr \u0026\u0026 r \u003c tr {\n\t\t\tr = unicode.SimpleFold(r)\n\t\t}\n\t\tif r == tr {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\n\t// First string is empty, so check if the second one is also empty.\n\treturn len(t) == 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        108,
        109,
        110,
        111,
        112,
        114,
        116,
        117,
        118,
        119,
        124,
        125,
        126,
        127,
        130
      ],
      "cover_details": {
        "line_cover_rate": 0.6944444444444444
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rate_limiter.go:Allow",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipperNoSkip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultDenyHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_Allow"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_cleanupStaleVisitors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_beforeFunc"
        }
      ],
      "name": "Allow",
      "signature": "(store *RateLimiterMemoryStore) Allow (identifier string) (bool, error)",
      "ground_truth": "func (store *RateLimiterMemoryStore) Allow(identifier string) (bool, error) {\n\tstore.mutex.Lock()\n\tlimiter, exists := store.visitors[identifier]\n\tif !exists {\n\t\tlimiter = new(Visitor)\n\t\tlimiter.Limiter = rate.NewLimiter(store.rate, store.burst)\n\t\tstore.visitors[identifier] = limiter\n\t}\n\tnow := store.timeNow()\n\tlimiter.lastSeen = now\n\tif now.Sub(store.lastCleanup) \u003e store.expiresIn {\n\t\tstore.cleanupStaleVisitors()\n\t}\n\tstore.mutex.Unlock()\n\treturn limiter.AllowN(store.timeNow(), 1), nil\n}",
      "function_comment": "// Allow implements RateLimiterStore.Allow",
      "function_statement": "// Allow implements RateLimiterStore.Allow",
      "start_line": 239,
      "end_line": 254,
      "file_path": "./middleware/rate_limiter.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterMemoryStore struct {\n\tvisitors map[string]*Visitor\n\tmutex    sync.Mutex\n\trate     rate.Limit // for more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\n\tburst       int\n\texpiresIn   time.Duration\n\tlastCleanup time.Time\n\n\ttimeNow func() time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "Visitor struct {\n\t*rate.Limiter\n\tlastSeen time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "func (store *RateLimiterMemoryStore) cleanupStaleVisitors() {\n\tfor id, visitor := range store.visitors {\n\t\tif store.timeNow().Sub(visitor.lastSeen) \u003e store.expiresIn {\n\t\t\tdelete(store.visitors, id)\n\t\t}\n\t}\n\tstore.lastCleanup = store.timeNow()\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/time@v0.12.0/rate/rate.go",
          "code_snippet": "func NewLimiter(r Limit, b int) *Limiter {\n\treturn \u0026Limiter{\n\t\tlimit:  r,\n\t\tburst:  b,\n\t\ttokens: float64(b),\n\t}\n}",
          "ref_module": "rate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Sub(u Time) Duration {\n\tif t.wall\u0026u.wall\u0026hasMonotonic != 0 {\n\t\treturn subMono(t.ext, u.ext)\n\t}\n\td := Duration(t.sec()-u.sec())*Second + Duration(t.nsec()-u.nsec())\n\t// Check for overflow or underflow.\n\tswitch {\n\tcase u.Add(d).Equal(t):\n\t\treturn d // d is correct\n\tcase t.Before(u):\n\t\treturn minDuration // t - u is negative out of range\n\tdefault:\n\t\treturn maxDuration // t - u is positive out of range\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/time@v0.12.0/rate/rate.go",
          "code_snippet": "func (lim *Limiter) AllowN(t time.Time, n int) bool {\n\treturn lim.reserveN(t, n, 0).ok\n}",
          "ref_module": "rate"
        }
      ],
      "covered_lines": [
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        252,
        253
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:findMethod",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "findMethod",
      "signature": "(n *node) findMethod (method string) *routeMethod",
      "ground_truth": "func (n *node) findMethod(method string) *routeMethod {\n\tswitch method {\n\tcase http.MethodConnect:\n\t\treturn n.methods.connect\n\tcase http.MethodDelete:\n\t\treturn n.methods.delete\n\tcase http.MethodGet:\n\t\treturn n.methods.get\n\tcase http.MethodHead:\n\t\treturn n.methods.head\n\tcase http.MethodOptions:\n\t\treturn n.methods.options\n\tcase http.MethodPatch:\n\t\treturn n.methods.patch\n\tcase http.MethodPost:\n\t\treturn n.methods.post\n\tcase PROPFIND:\n\t\treturn n.methods.propfind\n\tcase http.MethodPut:\n\t\treturn n.methods.put\n\tcase http.MethodTrace:\n\t\treturn n.methods.trace\n\tcase REPORT:\n\t\treturn n.methods.report\n\tdefault: // RouteNotFound/404 is not considered as a handler\n\t\treturn n.methods.anyOther[method]\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 495,
      "end_line": 522,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethod struct {\n\thandler HandlerFunc\n\tppath   string\n\tpnames  []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "PROPFIND = \"PROPFIND\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "REPORT = \"REPORT\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodConnect = \"CONNECT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodDelete  = \"DELETE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPatch   = \"PATCH\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPut     = \"PUT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodTrace   = \"TRACE\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        495,
        496,
        497,
        498,
        499,
        500,
        501,
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509,
        510,
        511,
        512,
        513,
        514,
        515,
        516,
        517,
        518,
        519,
        520
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:HEAD",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "HEAD",
      "signature": "(g *Group) HEAD (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) HEAD(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodHead, path, h, m...)\n}",
      "function_comment": "// HEAD implements `Echo#HEAD()` for sub-routes within the Group.",
      "function_statement": "// HEAD implements `Echo#HEAD()` for sub-routes within the Group.",
      "start_line": 51,
      "end_line": 53,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        51,
        52,
        53
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:uints",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "uints",
      "signature": "(b *ValueBinder) uints (sourceParam string, values []string, dest interface{}) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) uints(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]uint64:\n\t\ttmp := make([]uint64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint32:\n\t\ttmp := make([]uint32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint16:\n\t\ttmp := make([]uint16, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 16)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint8: // byte is alias to uint8\n\t\ttmp := make([]uint8, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 8)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]uint:\n\t\ttmp := make([]uint, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.uint(sourceParam, v, \u0026tmp[i], 0)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 788,
      "end_line": 847,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uint(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseUint(value, 10, bitSize)\n\tif err != nil {\n\t\tif bitSize == 0 {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to uint\", err))\n\t\t} else {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to uint%v\", bitSize), err))\n\t\t}\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *uint64:\n\t\t*d = n\n\tcase *uint32:\n\t\t*d = uint32(n)\n\tcase *uint16:\n\t\t*d = uint16(n)\n\tcase *uint8: // byte is alias to uint8\n\t\t*d = uint8(n)\n\tcase *uint:\n\t\t*d = uint(n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        788,
        789,
        790,
        791,
        792,
        793,
        794,
        795,
        796,
        798,
        799,
        800,
        801,
        802,
        803,
        804,
        805,
        806,
        807,
        809,
        810,
        811,
        812,
        813,
        814,
        815,
        816,
        817,
        818,
        820,
        821,
        822,
        823,
        824,
        825,
        826,
        827,
        828,
        829,
        831,
        832,
        833,
        834,
        835,
        836,
        837,
        838,
        839,
        840,
        842,
        843,
        844,
        846
      ],
      "cover_details": {
        "line_cover_rate": 0.8833333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Float32",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        }
      ],
      "name": "Float32",
      "signature": "(b *ValueBinder) Float32 (sourceParam string, dest *float32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Float32(sourceParam string, dest *float32) *ValueBinder {\n\treturn b.floatValue(sourceParam, dest, 32, false)\n}",
      "function_comment": "// Float32 binds parameter to float32 variable",
      "function_statement": "// Float32 binds parameter to float32 variable",
      "start_line": 985,
      "end_line": 987,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.float(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        985,
        986,
        987
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:WriteHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "WriteHeader",
      "signature": "(r *Response) WriteHeader (code int)",
      "ground_truth": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
      "function_comment": "// WriteHeader sends an HTTP response header with status code. If WriteHeader is\n// not called explicitly, the first call to Write will trigger an implicit\n// WriteHeader(http.StatusOK). Thus explicit calls to WriteHeader are mainly\n// used to send error codes.",
      "function_statement": "// WriteHeader sends an HTTP response header with status code. If WriteHeader is\n// not called explicitly, the first call to Write will trigger an implicit\n// WriteHeader(http.StatusOK). Thus explicit calls to WriteHeader are mainly\n// used to send error codes.",
      "start_line": 57,
      "end_line": 68,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        67
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:XMLPretty",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        }
      ],
      "name": "XMLPretty",
      "signature": "(c *context) XMLPretty (code int, i any, indent string) (err error)",
      "ground_truth": "func (c *context) XMLPretty(code int, i any, indent string) (err error) {\n\treturn c.xml(code, i, indent)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 562,
      "end_line": 564,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) xml(code int, i any, indent string) (err error) {\n\tc.writeContentType(MIMEApplicationXMLCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tenc := xml.NewEncoder(c.response)\n\tif indent != \"\" {\n\t\tenc.Indent(\"\", indent)\n\t}\n\tif _, err = c.response.Write([]byte(xml.Header)); err != nil {\n\t\treturn\n\t}\n\treturn enc.Encode(i)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        562,
        563,
        564
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rewrite.go:Rewrite",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        }
      ],
      "name": "Rewrite",
      "signature": "Rewrite (rules map[string]string) echo.MiddlewareFunc",
      "ground_truth": "func Rewrite(rules map[string]string) echo.MiddlewareFunc {\n\tc := DefaultRewriteConfig\n\tc.Rules = rules\n\treturn RewriteWithConfig(c)\n}",
      "function_comment": "// Rewrite returns a Rewrite middleware.\n//\n// Rewrite middleware rewrites the URL path based on the provided rules.",
      "function_statement": "// Rewrite returns a Rewrite middleware.\n//\n// Rewrite middleware rewrites the URL path based on the provided rules.",
      "start_line": 43,
      "end_line": 47,
      "file_path": "./middleware/rewrite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rewrite.go",
          "code_snippet": "DefaultRewriteConfig = RewriteConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rewrite.go",
          "code_snippet": "RewriteConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Rules defines the URL path rewrite rules. The values captured in asterisk can be\n\t// retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"/old\":              \"/new\",\n\t// \"/api/*\":            \"/$1\",\n\t// \"/js/*\":             \"/public/javascripts/$1\",\n\t// \"/users/*/orders/*\": \"/user/$1/order/$2\",\n\t// Required.\n\tRules map[string]string `yaml:\"rules\"`\n\n\t// RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n\t// Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"^/old/[0.9]+/\":     \"/new\",\n\t// \"^/api/.+?/(.*)\":     \"/v2/$1\",\n\tRegexRules map[*regexp.Regexp]string `yaml:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rewrite.go",
          "code_snippet": "func RewriteWithConfig(config RewriteConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Rules == nil \u0026\u0026 config.RegexRules == nil {\n\t\tpanic(\"echo: rewrite middleware requires url path rewrite rules or regex rules\")\n\t}\n\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBodyDumpConfig.Skipper\n\t}\n\n\tif config.RegexRules == nil {\n\t\tconfig.RegexRules = make(map[*regexp.Regexp]string)\n\t}\n\tfor k, v := range rewriteRulesRegex(config.Rules) {\n\t\tconfig.RegexRules[k] = v\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tif err := rewriteURL(config.RegexRules, c.Request()); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:WithInternal",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError_Unwrap"
        }
      ],
      "name": "WithInternal",
      "signature": "(he *HTTPError) WithInternal (err error) *HTTPError",
      "ground_truth": "func (he *HTTPError) WithInternal(err error) *HTTPError {\n\treturn \u0026HTTPError{\n\t\tCode:     he.Code,\n\t\tMessage:  he.Message,\n\t\tInternal: err,\n\t}\n}",
      "function_comment": "// WithInternal returns clone of HTTPError with err set to HTTPError.Internal field",
      "function_statement": "// WithInternal returns clone of HTTPError with err set to HTTPError.Internal field",
      "start_line": 910,
      "end_line": 916,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        910,
        911,
        912,
        913,
        914,
        915,
        916
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:unmarshalInputsToField",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        }
      ],
      "name": "unmarshalInputsToField",
      "signature": "unmarshalInputsToField (valueKind reflect.Kind, values []string, field reflect.Value) (bool, error)",
      "ground_truth": "func unmarshalInputsToField(valueKind reflect.Kind, values []string, field reflect.Value) (bool, error) {\n\tif valueKind == reflect.Ptr {\n\t\tif field.IsNil() {\n\t\t\tfield.Set(reflect.New(field.Type().Elem()))\n\t\t}\n\t\tfield = field.Elem()\n\t}\n\n\tfieldIValue := field.Addr().Interface()\n\tunmarshaler, ok := fieldIValue.(bindMultipleUnmarshaler)\n\tif !ok {\n\t\treturn false, nil\n\t}\n\treturn true, unmarshaler.UnmarshalParams(values)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 352,
      "end_line": 366,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "bindMultipleUnmarshaler interface {\n\tUnmarshalParams(params []string) error\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Kind uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) IsNil() bool {\n\tk := v.kind()\n\tswitch k {\n\tcase Chan, Func, Map, Pointer, UnsafePointer:\n\t\tif v.flag\u0026flagMethod != 0 {\n\t\t\treturn false\n\t\t}\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\treturn ptr == nil\n\tcase Interface, Slice:\n\t\t// Both interface and slice are nil if first word is 0.\n\t\t// Both are always bigger than a word; assume flagIndir.\n\t\treturn *(*unsafe.Pointer)(v.ptr) == nil\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.IsNil\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Set(x Value) {\n\tv.mustBeAssignable()\n\tx.mustBeExported() // do not let unexported x leak\n\tvar target unsafe.Pointer\n\tif v.kind() == Interface {\n\t\ttarget = v.ptr\n\t}\n\tx = x.assignTo(\"reflect.Set\", v.typ(), target)\n\tif x.flag\u0026flagIndir != 0 {\n\t\tif x.ptr == unsafe.Pointer(\u0026zeroVal[0]) {\n\t\t\ttypedmemclr(v.typ(), v.ptr)\n\t\t} else {\n\t\t\ttypedmemmove(v.typ(), v.ptr, x.ptr)\n\t\t}\n\t} else {\n\t\t*(*unsafe.Pointer)(v.ptr) = x.ptr\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func New(typ Type) Value {\n\tif typ == nil {\n\t\tpanic(\"reflect: New(nil)\")\n\t}\n\tt := \u0026typ.(*rtype).t\n\tpt := ptrTo(t)\n\tif pt.IfaceIndir() {\n\t\t// This is a pointer to a not-in-heap type.\n\t\tpanic(\"reflect: New of type that may not be allocated in heap (possibly undefined cgo C type)\")\n\t}\n\tptr := unsafe_New(t)\n\tfl := flag(Pointer)\n\treturn Value{pt, ptr, fl}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Type() Type {\n\tif v.flag != 0 \u0026\u0026 v.flag\u0026flagMethod == 0 {\n\t\treturn (*rtype)(noescape(unsafe.Pointer(v.typ_))) // inline of toRType(v.typ()), for own inlining in inline test\n\t}\n\treturn v.typeSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Elem() Value {\n\tk := v.kind()\n\tswitch k {\n\tcase Interface:\n\t\tvar eface any\n\t\tif v.typ().NumMethod() == 0 {\n\t\t\teface = *(*any)(v.ptr)\n\t\t} else {\n\t\t\teface = (any)(*(*interface {\n\t\t\t\tM()\n\t\t\t})(v.ptr))\n\t\t}\n\t\tx := unpackEface(eface)\n\t\tif x.flag != 0 {\n\t\t\tx.flag |= v.flag.ro()\n\t\t}\n\t\treturn x\n\tcase Pointer:\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tif v.typ().IfaceIndir() {\n\t\t\t\t// This is a pointer to a not-in-heap object. ptr points to a uintptr\n\t\t\t\t// in the heap. That uintptr is the address of a not-in-heap object.\n\t\t\t\t// In general, pointers to not-in-heap objects can be total junk.\n\t\t\t\t// But Elem() is asking to dereference it, so the user has asserted\n\t\t\t\t// that at least it is a valid pointer (not just an integer stored in\n\t\t\t\t// a pointer slot). So let's check, to make sure that it isn't a pointer\n\t\t\t\t// that the runtime will crash on if it sees it during GC or write barriers.\n\t\t\t\t// Since it is a not-in-heap pointer, all pointers to the heap are\n\t\t\t\t// forbidden! That makes the test pretty easy.\n\t\t\t\t// See issue 48399.\n\t\t\t\tif !verifyNotInHeapPtr(*(*uintptr)(ptr)) {\n\t\t\t\t\tpanic(\"reflect: reflect.Value.Elem on an invalid notinheap pointer\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\t// The returned value's address is v's value.\n\t\tif ptr == nil {\n\t\t\treturn Value{}\n\t\t}\n\t\ttt := (*ptrType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tfl := v.flag\u0026flagRO | flagIndir | flagAddr\n\t\tfl |= flag(typ.Kind())\n\t\treturn Value{typ, ptr, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Elem\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Addr() Value {\n\tif v.flag\u0026flagAddr == 0 {\n\t\tpanic(\"reflect.Value.Addr of unaddressable value\")\n\t}\n\t// Preserve flagRO instead of using v.flag.ro() so that\n\t// v.Addr().Elem() is equivalent to v (#32772)\n\tfl := v.flag \u0026 flagRO\n\treturn Value{ptrTo(v.typ()), v.ptr, fl | flag(Pointer)}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        352,
        353,
        354,
        355,
        356,
        357,
        360,
        361,
        362,
        363,
        364,
        365
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:intsValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "intsValue",
      "signature": "(b *ValueBinder) intsValue (sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 545,
      "end_line": 558,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) ints(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]int64:\n\t\ttmp := make([]int64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int32:\n\t\ttmp := make([]int32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int16:\n\t\ttmp := make([]int16, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 16)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int8:\n\t\ttmp := make([]int8, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 8)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]int:\n\t\ttmp := make([]int, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.int(sourceParam, v, \u0026tmp[i], 0)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        545,
        546,
        547,
        548,
        550,
        551,
        552,
        553,
        554,
        555,
        557
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:setError",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        }
      ],
      "name": "setError",
      "signature": "(b *ValueBinder) setError (err error)",
      "ground_truth": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
      "function_comment": "// FailFast set internal flag to indicate if binding methods will return early (without binding) when previous bind failed",
      "function_statement": "// FailFast set internal flag to indicate if binding methods will return early (without binding) when previous bind failed",
      "start_line": 181,
      "end_line": 187,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        181,
        182,
        183,
        184,
        185,
        186
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:findRouter",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "findRouter",
      "signature": "(e *Echo) findRouter (host string) *Router",
      "ground_truth": "func (e *Echo) findRouter(host string) *Router {\n\tif len(e.routers) \u003e 0 {\n\t\tif r, ok := e.routers[host]; ok {\n\t\t\treturn r\n\t\t}\n\t}\n\treturn e.router\n}",
      "function_comment": "// GetPath returns RawPath, if it's empty returns Path from URL\n// Difference between RawPath and Path is:\n//   - Path is where request path is stored. Value is stored in decoded form: /%47%6f%2f becomes /Go/.",
      "function_statement": "// GetPath returns RawPath, if it's empty returns Path from URL\n// Difference between RawPath and Path is:\n//   - Path is where request path is stored. Value is stored in decoded form: /%47%6f%2f becomes /Go/.",
      "start_line": 957,
      "end_line": 964,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        957,
        958,
        959,
        960,
        961,
        963
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint64",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Uint64",
      "signature": "(b *ValueBinder) Uint64 (sourceParam string, dest *uint64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint64(sourceParam string, dest *uint64) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 64, false)\n}",
      "function_comment": "// Uint64 binds parameter to uint64 variable",
      "function_statement": "// Uint64 binds parameter to uint64 variable",
      "start_line": 672,
      "end_line": 674,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        672,
        673,
        674
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:floatsValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        }
      ],
      "name": "floatsValue",
      "signature": "(b *ValueBinder) floatsValue (sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) floatsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.floats(sourceParam, values, dest)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1026,
      "end_line": 1039,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floats(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]float64:\n\t\ttmp := make([]float64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.float(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]float32:\n\t\ttmp := make([]float32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.float(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1026,
        1027,
        1028,
        1029,
        1031,
        1032,
        1033,
        1034,
        1035,
        1036,
        1038
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:NonWWWRedirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectNonWWWRedirect"
        }
      ],
      "name": "NonWWWRedirect",
      "signature": "NonWWWRedirect () echo.MiddlewareFunc",
      "ground_truth": "func NonWWWRedirect() echo.MiddlewareFunc {\n\treturn NonWWWRedirectWithConfig(DefaultRedirectConfig)\n}",
      "function_comment": "// NonWWWRedirect redirects www requests to non www.\n// For example, http://www.labstack.com will be redirect to http://labstack.com.\n//\n// Usage `Echo#Pre(NonWWWRedirect())`",
      "function_statement": "// NonWWWRedirect redirects www requests to non www.\n// For example, http://www.labstack.com will be redirect to http://labstack.com.\n//\n// Usage `Echo#Pre(NonWWWRedirect())`",
      "start_line": 117,
      "end_line": 119,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func NonWWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif strings.HasPrefix(host, www) {\n\t\t\treturn true, scheme + \"://\" + host[4:] + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "DefaultRedirectConfig = RedirectConfig{\n\tSkipper: DefaultSkipper,\n\tCode:    http.StatusMovedPermanently,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        117,
        118,
        119
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:FailFast",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        }
      ],
      "name": "FailFast",
      "signature": "(b *ValueBinder) FailFast (value bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) FailFast(value bool) *ValueBinder {\n\tb.failFast = value\n\treturn b\n}",
      "function_comment": "// FailFast set internal flag to indicate if binding methods will return early (without binding) when previous bind failed\n// NB: call this method before any other binding methods as it modifies binding methods behaviour",
      "function_statement": "// FailFast set internal flag to indicate if binding methods will return early (without binding) when previous bind failed\n// NB: call this method before any other binding methods as it modifies binding methods behaviour",
      "start_line": 176,
      "end_line": 179,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        176,
        177,
        178,
        179
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Render",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        }
      ],
      "name": "Render",
      "signature": "(c *context) Render (code int, name string, data any) (err error)",
      "ground_truth": "func (c *context) Render(code int, name string, data any) (err error) {\n\tif c.echo.Renderer == nil {\n\t\treturn ErrRendererNotRegistered\n\t}\n\tbuf := new(bytes.Buffer)\n\tif err = c.echo.Renderer.Render(buf, name, data, c); err != nil {\n\t\treturn\n\t}\n\treturn c.HTMLBlob(code, buf.Bytes())\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 460,
      "end_line": 469,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrRendererNotRegistered  = errors.New(\"renderer not registered\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/renderer.go",
          "code_snippet": "Renderer interface {\n\tRender(io.Writer, string, interface{}, Context) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) HTMLBlob(code int, b []byte) (err error) {\n\treturn c.Blob(code, MIMETextHTMLCharsetUTF8, b)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        460,
        461,
        462,
        463,
        464,
        465,
        468
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Group",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "Group",
      "signature": "(e *Echo) Group (prefix string, m ...MiddlewareFunc) (g *Group)",
      "ground_truth": "func (e *Echo) Group(prefix string, m ...MiddlewareFunc) (g *Group) {\n\tg = \u0026Group{prefix: prefix, echo: e}\n\tg.Use(m...)\n\treturn\n}",
      "function_comment": "// Group creates a new router group with prefix and optional group-level middleware.",
      "function_statement": "// Group creates a new router group with prefix and optional group-level middleware.",
      "start_line": 606,
      "end_line": 610,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Use(middleware ...MiddlewareFunc) {\n\tg.middleware = append(g.middleware, middleware...)\n\tif len(g.middleware) == 0 {\n\t\treturn\n\t}\n\t// group level middlewares are different from Echo `Pre` and `Use` middlewares (those are global). Group level middlewares\n\t// are only executed if they are added to the Router with route.\n\t// So we register catch all route (404 is a safe way to emulate route match) for this group and now during routing the\n\t// Router would find route to match our request path and therefore guarantee the middleware(s) will get executed.\n\tg.RouteNotFound(\"\", NotFoundHandler)\n\tg.RouteNotFound(\"/*\", NotFoundHandler)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        606,
        607,
        608,
        609,
        610
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Set",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStore"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "Set",
      "signature": "(c *context) Set (key string, val any)",
      "ground_truth": "func (c *context) Set(key string, val any) {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif c.store == nil {\n\t\tc.store = make(Map)\n\t}\n\tc.store[key] = val\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 439,
      "end_line": 447,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Map map[string]interface{}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:AcquireContext",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        }
      ],
      "name": "AcquireContext",
      "signature": "(e *Echo) AcquireContext () Context",
      "ground_truth": "func (e *Echo) AcquireContext() Context {\n\treturn e.pool.Get().(Context)\n}",
      "function_comment": "// AcquireContext returns an empty `Context` instance from the pool.\n// You must return the context by calling `ReleaseContext()`.",
      "function_statement": "// AcquireContext returns an empty `Context` instance from the pool.\n// You must return the context by calling `ReleaseContext()`.",
      "start_line": 636,
      "end_line": 638,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        636,
        637,
        638
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/middleware.go:rewriteRulesRegex",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteAfterRouting"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithCaret"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteWithConfigPreMiddleware_Issue1143"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithRegexRules"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteReplacementEscaping"
        }
      ],
      "name": "rewriteRulesRegex",
      "signature": "rewriteRulesRegex (rewrite map[string]string) map[*regexp.Regexp]string",
      "ground_truth": "func rewriteRulesRegex(rewrite map[string]string) map[*regexp.Regexp]string {\n\t// Initialize\n\trulesRegex := map[*regexp.Regexp]string{}\n\tfor k, v := range rewrite {\n\t\tk = regexp.QuoteMeta(k)\n\t\tk = strings.ReplaceAll(k, `\\*`, \"(.*?)\")\n\t\tif strings.HasPrefix(k, `\\^`) {\n\t\t\tk = strings.ReplaceAll(k, `\\^`, \"^\")\n\t\t}\n\t\tk = k + \"$\"\n\t\trulesRegex[regexp.MustCompile(k)] = v\n\t}\n\treturn rulesRegex\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 37,
      "end_line": 50,
      "file_path": "./middleware/middleware.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "Regexp struct {\n\texpr           string       // as passed to Compile\n\tprog           *syntax.Prog // compiled program\n\tonepass        *onePassProg // onepass program or nil\n\tnumSubexp      int\n\tmaxBitStateLen int\n\tsubexpNames    []string\n\tprefix         string         // required prefix in unanchored matches\n\tprefixBytes    []byte         // prefix, as a []byte\n\tprefixRune     rune           // first rune in prefix\n\tprefixEnd      uint32         // pc for last rune in prefix\n\tmpool          int            // pool for machines\n\tmatchcap       int            // size of recorded match lengths\n\tprefixComplete bool           // prefix is the entire regexp\n\tcond           syntax.EmptyOp // empty-width conditions required at start of match\n\tminInputLen    int            // minimum length of the input in bytes\n\n\t// This field can be modified by the Longest method,\n\t// but it is otherwise read-only.\n\tlongest bool // whether regexp prefers leftmost-longest match\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "func QuoteMeta(s string) string {\n\t// A byte loop is correct because all metacharacters are ASCII.\n\tvar i int\n\tfor i = 0; i \u003c len(s); i++ {\n\t\tif special(s[i]) {\n\t\t\tbreak\n\t\t}\n\t}\n\t// No meta characters found, so return original string.\n\tif i \u003e= len(s) {\n\t\treturn s\n\t}\n\n\tb := make([]byte, 2*len(s)-i)\n\tcopy(b, s[:i])\n\tj := i\n\tfor ; i \u003c len(s); i++ {\n\t\tif special(s[i]) {\n\t\t\tb[j] = '\\\\'\n\t\t\tj++\n\t\t}\n\t\tb[j] = s[i]\n\t\tj++\n\t}\n\treturn string(b[:j])\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ReplaceAll(s, old, new string) string {\n\treturn Replace(s, old, new, -1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasPrefix(s, prefix string) bool {\n\treturn stringslite.HasPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "func MustCompile(str string) *Regexp {\n\tregexp, err := Compile(str)\n\tif err != nil {\n\t\tpanic(`regexp: Compile(` + quote(str) + `): ` + err.Error())\n\t}\n\treturn regexp\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        49
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint16",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustUint16",
      "signature": "(b *ValueBinder) MustUint16 (sourceParam string, dest *uint16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint16(sourceParam string, dest *uint16) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 16, true)\n}",
      "function_comment": "// MustUint16 requires parameter value to exist to bind to uint16 variable. Returns error when value does not exist",
      "function_statement": "// MustUint16 requires parameter value to exist to bind to uint16 variable. Returns error when value does not exist",
      "start_line": 697,
      "end_line": 699,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        697,
        698,
        699
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustTextUnmarshaler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        }
      ],
      "name": "MustTextUnmarshaler",
      "signature": "(b *ValueBinder) MustTextUnmarshaler (sourceParam string, dest encoding.TextUnmarshaler) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustTextUnmarshaler(sourceParam string, dest encoding.TextUnmarshaler) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\ttmp := b.ValueFunc(sourceParam)\n\tif tmp == \"\" {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"required field value is empty\", nil))\n\t\treturn b\n\t}\n\n\tif err := dest.UnmarshalText([]byte(tmp)); err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"failed to bind field value to encoding.TextUnmarshaler interface\", err))\n\t}\n\treturn b\n}",
      "function_comment": "// MustTextUnmarshaler requires parameter value to exist to bind to destination implementing encoding.TextUnmarshaler interface.\n// Returns error when value does not exist",
      "function_statement": "// MustTextUnmarshaler requires parameter value to exist to bind to destination implementing encoding.TextUnmarshaler interface.\n// Returns error when value does not exist",
      "start_line": 386,
      "end_line": 401,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/encoding.go",
          "code_snippet": "TextUnmarshaler interface {\n\tUnmarshalText(text []byte) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        386,
        387,
        388,
        389,
        391,
        392,
        393,
        394,
        395,
        397,
        398,
        399,
        400
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Add",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        }
      ],
      "name": "Add",
      "signature": "(e *Echo) Add (method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
      "function_comment": "// Add registers a new route for an HTTP method and path with matching handler\n// in the router with optional route-level middleware.",
      "function_statement": "// Add registers a new route for an HTTP method and path with matching handler\n// in the router with optional route-level middleware.",
      "start_line": 593,
      "end_line": 595,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) add(host, method, path string, handler HandlerFunc, middlewares ...MiddlewareFunc) *Route {\n\trouter := e.findRouter(host)\n\t//FIXME: when handler+middleware are both nil ... make it behave like handler removal\n\tname := handlerName(handler)\n\troute := router.add(method, path, name, func(c Context) error {\n\t\th := applyMiddleware(handler, middlewares...)\n\t\treturn h(c)\n\t})\n\n\tif e.OnAddRouteHandler != nil {\n\t\te.OnAddRouteHandler(host, *route, handler, middlewares)\n\t}\n\n\treturn route\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        593,
        594,
        595
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/key_auth.go:KeyAuthWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_panicsOnEmptyValidator"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_panicsOnInvalidLookup"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuth"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_ContinueOnIgnoredError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "KeyAuthWithConfig",
      "signature": "KeyAuthWithConfig (config KeyAuthConfig) echo.MiddlewareFunc",
      "ground_truth": "func KeyAuthWithConfig(config KeyAuthConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultKeyAuthConfig.Skipper\n\t}\n\t// Defaults\n\tif config.AuthScheme == \"\" {\n\t\tconfig.AuthScheme = DefaultKeyAuthConfig.AuthScheme\n\t}\n\tif config.KeyLookup == \"\" {\n\t\tconfig.KeyLookup = DefaultKeyAuthConfig.KeyLookup\n\t}\n\tif config.Validator == nil {\n\t\tpanic(\"echo: key-auth middleware requires a validator function\")\n\t}\n\n\textractors, cErr := createExtractors(config.KeyLookup, config.AuthScheme)\n\tif cErr != nil {\n\t\tpanic(cErr)\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tvar lastExtractorErr error\n\t\t\tvar lastValidatorErr error\n\t\t\tfor _, extractor := range extractors {\n\t\t\t\tkeys, err := extractor(c)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlastExtractorErr = err\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfor _, key := range keys {\n\t\t\t\t\tvalid, err := config.Validator(key, c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlastValidatorErr = err\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif valid {\n\t\t\t\t\t\treturn next(c)\n\t\t\t\t\t}\n\t\t\t\t\tlastValidatorErr = errors.New(\"invalid key\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// we are here only when we did not successfully extract and validate any of keys\n\t\t\terr := lastValidatorErr\n\t\t\tif err == nil { // prioritize validator errors over extracting errors\n\t\t\t\t// ugly part to preserve backwards compatible errors. someone could rely on them\n\t\t\t\tif lastExtractorErr == errQueryExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in the query string\")\n\t\t\t\t} else if lastExtractorErr == errCookieExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in cookies\")\n\t\t\t\t} else if lastExtractorErr == errFormExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in the form\")\n\t\t\t\t} else if lastExtractorErr == errHeaderExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in request header\")\n\t\t\t\t} else if lastExtractorErr == errHeaderExtractorValueInvalid {\n\t\t\t\t\terr = errors.New(\"invalid key in the request header\")\n\t\t\t\t} else {\n\t\t\t\t\terr = lastExtractorErr\n\t\t\t\t}\n\t\t\t\terr = \u0026ErrKeyAuthMissing{Err: err}\n\t\t\t}\n\n\t\t\tif config.ErrorHandler != nil {\n\t\t\t\ttmpErr := config.ErrorHandler(err, c)\n\t\t\t\tif config.ContinueOnIgnoredError \u0026\u0026 tmpErr == nil {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn tmpErr\n\t\t\t}\n\t\t\tif lastValidatorErr != nil { // prioritize validator errors over extracting errors\n\t\t\t\treturn \u0026echo.HTTPError{\n\t\t\t\t\tCode:     http.StatusUnauthorized,\n\t\t\t\t\tMessage:  \"Unauthorized\",\n\t\t\t\t\tInternal: lastValidatorErr,\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn echo.NewHTTPError(http.StatusBadRequest, err.Error())\n\t\t}\n\t}\n}",
      "function_comment": "// KeyAuthWithConfig returns an KeyAuth middleware with config.\n// See `KeyAuth()`.",
      "function_statement": "// KeyAuthWithConfig returns an KeyAuth middleware with config.\n// See `KeyAuth()`.",
      "start_line": 94,
      "end_line": 179,
      "file_path": "./middleware/key_auth.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "KeyAuthConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// KeyLookup is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n\t// to extract key from the request.\n\t// Optional. Default value \"header:Authorization\".\n\t// Possible values:\n\t// - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n\t// \t\t\t`\u003ccut-prefix\u003e` is argument value to cut/trim prefix of the extracted value. This is useful if header\n\t//\t\t\tvalue has static prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we\n\t//\t\t\twant to cut is `\u003cauth-scheme\u003e ` note the space at the end.\n\t//\t\t\tIn case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove is `Basic `.\n\t// - \"query:\u003cname\u003e\"\n\t// - \"form:\u003cname\u003e\"\n\t// - \"cookie:\u003cname\u003e\"\n\t// Multiple sources example:\n\t// - \"header:Authorization,header:X-Api-Key\"\n\tKeyLookup string\n\n\t// AuthScheme to be used in the Authorization header.\n\t// Optional. Default value \"Bearer\".\n\tAuthScheme string\n\n\t// Validator is a function to validate key.\n\t// Required.\n\tValidator KeyAuthValidator\n\n\t// ErrorHandler defines a function which is executed for an invalid key.\n\t// It may be used to define a custom error.\n\tErrorHandler KeyAuthErrorHandler\n\n\t// ContinueOnIgnoredError allows the next middleware/handler to be called when ErrorHandler decides to\n\t// ignore the error (by returning `nil`).\n\t// This is useful when parts of your site/api allow public access and some authorized routes provide extra functionality.\n\t// In that case you can use ErrorHandler to set a default public key auth value in the request context\n\t// and continue. Some logic down the remaining execution chain needs to check that (public) key auth value then.\n\tContinueOnIgnoredError bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "DefaultKeyAuthConfig = KeyAuthConfig{\n\tSkipper:    DefaultSkipper,\n\tKeyLookup:  \"header:\" + echo.HeaderAuthorization,\n\tAuthScheme: \"Bearer\",\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func createExtractors(lookups string, authScheme string) ([]ValuesExtractor, error) {\n\tif lookups == \"\" {\n\t\treturn nil, nil\n\t}\n\tsources := strings.Split(lookups, \",\")\n\tvar extractors = make([]ValuesExtractor, 0)\n\tfor _, source := range sources {\n\t\tparts := strings.Split(source, \":\")\n\t\tif len(parts) \u003c 2 {\n\t\t\treturn nil, fmt.Errorf(\"extractor source for lookup could not be split into needed parts: %v\", source)\n\t\t}\n\n\t\tswitch parts[0] {\n\t\tcase \"query\":\n\t\t\textractors = append(extractors, valuesFromQuery(parts[1]))\n\t\tcase \"param\":\n\t\t\textractors = append(extractors, valuesFromParam(parts[1]))\n\t\tcase \"cookie\":\n\t\t\textractors = append(extractors, valuesFromCookie(parts[1]))\n\t\tcase \"form\":\n\t\t\textractors = append(extractors, valuesFromForm(parts[1]))\n\t\tcase \"header\":\n\t\t\tprefix := \"\"\n\t\t\tif len(parts) \u003e 2 {\n\t\t\t\tprefix = parts[2]\n\t\t\t} else if authScheme != \"\" \u0026\u0026 parts[1] == echo.HeaderAuthorization {\n\t\t\t\t// backwards compatibility for JWT and KeyAuth:\n\t\t\t\t// * we only apply this fix to Authorization as header we use and uses prefixes like \"Bearer \u003ctoken-value\u003e\" etc\n\t\t\t\t// * previously header extractor assumed that auth-scheme/prefix had a space as suffix we need to retain that\n\t\t\t\t//   behaviour for default values and Authorization header.\n\t\t\t\tprefix = authScheme\n\t\t\t\tif !strings.HasSuffix(prefix, \" \") {\n\t\t\t\t\tprefix += \" \"\n\t\t\t\t}\n\t\t\t}\n\t\t\textractors = append(extractors, valuesFromHeader(parts[1], prefix))\n\t\t}\n\t}\n\treturn extractors, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errQueryExtractorValueMissing = errors.New(\"missing value in the query string\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errCookieExtractorValueMissing = errors.New(\"missing value in cookies\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errFormExtractorValueMissing = errors.New(\"missing value in the form\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errHeaderExtractorValueMissing = errors.New(\"missing value in request header\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errHeaderExtractorValueInvalid = errors.New(\"invalid value in request header\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "ErrKeyAuthMissing struct {\n\tErr error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusUnauthorized                 = 401",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        94,
        95,
        96,
        97,
        98,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        110,
        111,
        112,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        129,
        130,
        131,
        132,
        133,
        135,
        136,
        137,
        138,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        159,
        162,
        163,
        164,
        165,
        166,
        167,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176
      ],
      "cover_details": {
        "line_cover_rate": 0.7674418604651163
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:valuesFromQuery",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromQuery"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "valuesFromQuery",
      "signature": "valuesFromQuery (param string) ValuesExtractor",
      "ground_truth": "func valuesFromQuery(param string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tresult := c.QueryParams()[param]\n\t\tif len(result) == 0 {\n\t\t\treturn nil, errQueryExtractorValueMissing\n\t\t} else if len(result) \u003e extractorLimit-1 {\n\t\t\tresult = result[:extractorLimit]\n\t\t}\n\t\treturn result, nil\n\t}\n}",
      "function_comment": "// valuesFromQuery returns a function that extracts values from the query string.",
      "function_statement": "// valuesFromQuery returns a function that extracts values from the query string.",
      "start_line": 135,
      "end_line": 145,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errQueryExtractorValueMissing = errors.New(\"missing value in the query string\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "extractorLimit = 20",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:HTTPSRedirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSRedirect"
        }
      ],
      "name": "HTTPSRedirect",
      "signature": "HTTPSRedirect () echo.MiddlewareFunc",
      "ground_truth": "func HTTPSRedirect() echo.MiddlewareFunc {\n\treturn HTTPSRedirectWithConfig(DefaultRedirectConfig)\n}",
      "function_comment": "// HTTPSRedirect redirects http requests to https.\n// For example, http://labstack.com will be redirect to https://labstack.com.\n//\n// Usage `Echo#Pre(HTTPSRedirect())`",
      "function_statement": "// HTTPSRedirect redirects http requests to https.\n// For example, http://labstack.com will be redirect to https://labstack.com.\n//\n// Usage `Echo#Pre(HTTPSRedirect())`",
      "start_line": 40,
      "end_line": 42,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func HTTPSRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif scheme != \"https\" {\n\t\t\treturn true, \"https://\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "DefaultRedirectConfig = RedirectConfig{\n\tSkipper: DefaultSkipper,\n\tCode:    http.StatusMovedPermanently,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        40,
        41,
        42
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:QueryParam",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        }
      ],
      "name": "QueryParam",
      "signature": "(c *context) QueryParam (name string) string",
      "ground_truth": "func (c *context) QueryParam(name string) string {\n\tif c.query == nil {\n\t\tc.query = c.request.URL.Query()\n\t}\n\treturn c.query.Get(name)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 372,
      "end_line": 377,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func (u *URL) Query() Values {\n\tv, _ := ParseQuery(u.RawQuery)\n\treturn v\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func (v Values) Get(key string) string {\n\tvs := v[key]\n\tif len(vs) == 0 {\n\t\treturn \"\"\n\t}\n\treturn vs[0]\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        372,
        373,
        374,
        375,
        376
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context_fs.go:File",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        }
      ],
      "name": "File",
      "signature": "(c *context) File (file string) error",
      "ground_truth": "func (c *context) File(file string) error {\n\treturn fsFile(c, file, c.echo.Filesystem)\n}",
      "function_comment": "// SPDX-License-Identifier: MIT",
      "function_statement": "// SPDX-License-Identifier: MIT",
      "start_line": 14,
      "end_line": 16,
      "file_path": "./context_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context_fs.go",
          "code_snippet": "func fsFile(c Context, file string, filesystem fs.FS) error {\n\tf, err := filesystem.Open(file)\n\tif err != nil {\n\t\treturn ErrNotFound\n\t}\n\tdefer f.Close()\n\n\tfi, _ := f.Stat()\n\tif fi.IsDir() {\n\t\tfile = filepath.ToSlash(filepath.Join(file, indexPage)) // ToSlash is necessary for Windows. fs.Open and os.Open are different in that aspect.\n\t\tf, err = filesystem.Open(file)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\t\tdefer f.Close()\n\t\tif fi, err = f.Stat(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tff, ok := f.(io.ReadSeeker)\n\tif !ok {\n\t\treturn errors.New(\"file does not implement io.ReadSeeker\")\n\t}\n\thttp.ServeContent(c.Response(), c.Request(), fi.Name(), fi.ModTime(), ff)\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "filesystem struct {\n\t// Filesystem is file system used by Static and File handlers to access files.\n\t// Defaults to os.DirFS(\".\")\n\t//\n\t// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n\t// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n\t// including `assets/images` as their prefix.\n\tFilesystem fs.FS\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        14,
        15,
        16
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int8s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Int8s",
      "signature": "(b *ValueBinder) Int8s (sourceParam string, dest *[]int8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int8s(sourceParam string, dest *[]int8) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Int8s binds parameter to slice of int8",
      "function_statement": "// Int8s binds parameter to slice of int8",
      "start_line": 652,
      "end_line": 654,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        652,
        653,
        654
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUints",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustUints",
      "signature": "(b *ValueBinder) MustUints (sourceParam string, dest *[]uint) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUints(sourceParam string, dest *[]uint) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustUints requires parameter value to exist to bind to uint slice variable. Returns error when value does not exist",
      "function_statement": "// MustUints requires parameter value to exist to bind to uint slice variable. Returns error when value does not exist",
      "start_line": 895,
      "end_line": 897,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        895,
        896,
        897
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustTimes",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        }
      ],
      "name": "MustTimes",
      "signature": "(b *ValueBinder) MustTimes (sourceParam string, dest *[]time.Time, layout string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustTimes(sourceParam string, dest *[]time.Time, layout string) *ValueBinder {\n\treturn b.times(sourceParam, dest, layout, true)\n}",
      "function_comment": "// MustTimes requires parameter values to exist to bind to slice of time.Time variables. Returns error when values does not exist",
      "function_statement": "// MustTimes requires parameter values to exist to bind to slice of time.Time variables. Returns error when values does not exist",
      "start_line": 1126,
      "end_line": 1128,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) times(sourceParam string, dest *[]time.Time, layout string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\ttmp := make([]time.Time, len(values))\n\tfor i, v := range values {\n\t\tt, err := time.Parse(layout, v)\n\t\tif err != nil {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{v}, \"failed to bind field value to Time\", err))\n\t\t\tif b.failFast {\n\t\t\t\treturn b\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ttmp[i] = t\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1126,
        1127,
        1128
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:durations",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "durations",
      "signature": "(b *ValueBinder) durations (sourceParam string, values []string, dest *[]time.Duration) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) durations(sourceParam string, values []string, dest *[]time.Duration) *ValueBinder {\n\ttmp := make([]time.Duration, len(values))\n\tfor i, v := range values {\n\t\tt, err := time.ParseDuration(v)\n\t\tif err != nil {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{v}, \"failed to bind field value to Duration\", err))\n\t\t\tif b.failFast {\n\t\t\t\treturn b\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ttmp[i] = t\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1217,
      "end_line": 1234,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "func ParseDuration(s string) (Duration, error) {\n\t// [-+]?([0-9]*(\\.[0-9]*)?[a-z]+)+\n\torig := s\n\tvar d uint64\n\tneg := false\n\n\t// Consume [-+]?\n\tif s != \"\" {\n\t\tc := s[0]\n\t\tif c == '-' || c == '+' {\n\t\t\tneg = c == '-'\n\t\t\ts = s[1:]\n\t\t}\n\t}\n\t// Special case: if all that is left is \"0\", this is zero.\n\tif s == \"0\" {\n\t\treturn 0, nil\n\t}\n\tif s == \"\" {\n\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t}\n\tfor s != \"\" {\n\t\tvar (\n\t\t\tv, f  uint64      // integers before, after decimal point\n\t\t\tscale float64 = 1 // value = v + f/scale\n\t\t)\n\n\t\tvar err error\n\n\t\t// The next character must be [0-9.]\n\t\tif !(s[0] == '.' || '0' \u003c= s[0] \u0026\u0026 s[0] \u003c= '9') {\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t\t// Consume [0-9]*\n\t\tpl := len(s)\n\t\tv, s, err = leadingInt(s)\n\t\tif err != nil {\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t\tpre := pl != len(s) // whether we consumed anything before a period\n\n\t\t// Consume (\\.[0-9]*)?\n\t\tpost := false\n\t\tif s != \"\" \u0026\u0026 s[0] == '.' {\n\t\t\ts = s[1:]\n\t\t\tpl := len(s)\n\t\t\tf, scale, s = leadingFraction(s)\n\t\t\tpost = pl != len(s)\n\t\t}\n\t\tif !pre \u0026\u0026 !post {\n\t\t\t// no digits (e.g. \".s\" or \"-.s\")\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\n\t\t// Consume unit.\n\t\ti := 0\n\t\tfor ; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif c == '.' || '0' \u003c= c \u0026\u0026 c \u003c= '9' {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif i == 0 {\n\t\t\treturn 0, errors.New(\"time: missing unit in duration \" + quote(orig))\n\t\t}\n\t\tu := s[:i]\n\t\ts = s[i:]\n\t\tunit, ok := unitMap[u]\n\t\tif !ok {\n\t\t\treturn 0, errors.New(\"time: unknown unit \" + quote(u) + \" in duration \" + quote(orig))\n\t\t}\n\t\tif v \u003e 1\u003c\u003c63/unit {\n\t\t\t// overflow\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t\tv *= unit\n\t\tif f \u003e 0 {\n\t\t\t// float64 is needed to be nanosecond accurate for fractions of hours.\n\t\t\t// v \u003e= 0 \u0026\u0026 (f*unit/scale) \u003c= 3.6e+12 (ns/h, h is the largest unit)\n\t\t\tv += uint64(float64(f) * (float64(unit) / scale))\n\t\t\tif v \u003e 1\u003c\u003c63 {\n\t\t\t\t// overflow\n\t\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t\t}\n\t\t}\n\t\td += v\n\t\tif d \u003e 1\u003c\u003c63 {\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t}\n\tif neg {\n\t\treturn -Duration(d), nil\n\t}\n\tif d \u003e 1\u003c\u003c63-1 {\n\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t}\n\treturn Duration(d), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1217,
        1218,
        1219,
        1220,
        1221,
        1222,
        1223,
        1224,
        1225,
        1226,
        1228,
        1230,
        1231,
        1232,
        1233
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:URI",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        }
      ],
      "name": "URI",
      "signature": "(e *Echo) URI (handler HandlerFunc, params ...interface{}) string",
      "ground_truth": "func (e *Echo) URI(handler HandlerFunc, params ...interface{}) string {\n\tname := handlerName(handler)\n\treturn e.Reverse(name, params...)\n}",
      "function_comment": "// URI generates an URI from handler.",
      "function_statement": "// URI generates an URI from handler.",
      "start_line": 613,
      "end_line": 616,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func handlerName(h HandlerFunc) string {\n\tt := reflect.ValueOf(h).Type()\n\tif t.Kind() == reflect.Func {\n\t\treturn runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name()\n\t}\n\treturn t.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Reverse(name string, params ...interface{}) string {\n\treturn e.router.Reverse(name, params...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        613,
        614,
        615,
        616
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:NewRoundRobinBalancer",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyBalancerWithNoTargets"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        }
      ],
      "name": "NewRoundRobinBalancer",
      "signature": "NewRoundRobinBalancer (targets []*ProxyTarget) ProxyBalancer",
      "ground_truth": "func NewRoundRobinBalancer(targets []*ProxyTarget) ProxyBalancer {\n\tb := roundRobinBalancer{}\n\tb.targets = targets\n\treturn \u0026b\n}",
      "function_comment": "// NewRoundRobinBalancer returns a round-robin proxy balancer.",
      "function_statement": "// NewRoundRobinBalancer returns a round-robin proxy balancer.",
      "start_line": 193,
      "end_line": 197,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyBalancer interface {\n\tAddTarget(*ProxyTarget) bool\n\tRemoveTarget(string) bool\n\tNext(echo.Context) *ProxyTarget\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "roundRobinBalancer struct {\n\tcommonBalancer\n\t// tracking the index on `targets` slice for the next `*ProxyTarget` to be used\n\ti int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "commonBalancer struct {\n\ttargets []*ProxyTarget\n\tmutex   sync.Mutex\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        193,
        194,
        195,
        196,
        197
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:FormParams",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        }
      ],
      "name": "FormParams",
      "signature": "(c *context) FormParams () (url.Values, error)",
      "ground_truth": "func (c *context) FormParams() (url.Values, error) {\n\tif strings.HasPrefix(c.request.Header.Get(HeaderContentType), MIMEMultipartForm) {\n\t\tif err := c.request.ParseMultipartForm(defaultMemory); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tif err := c.request.ParseForm(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn c.request.Form, nil\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 394,
      "end_line": 405,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentType         = \"Content-Type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEMultipartForm                    = \"multipart/form-data\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "defaultMemory = 32 \u003c\u003c 20",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "Values map[string][]string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasPrefix(s, prefix string) bool {\n\treturn stringslite.HasPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) ParseMultipartForm(maxMemory int64) error {\n\tif r.MultipartForm == multipartByReader {\n\t\treturn errors.New(\"http: multipart handled by MultipartReader\")\n\t}\n\tvar parseFormErr error\n\tif r.Form == nil {\n\t\t// Let errors in ParseForm fall through, and just\n\t\t// return it at the end.\n\t\tparseFormErr = r.ParseForm()\n\t}\n\tif r.MultipartForm != nil {\n\t\treturn nil\n\t}\n\n\tmr, err := r.multipartReader(false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tf, err := mr.ReadForm(maxMemory)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif r.PostForm == nil {\n\t\tr.PostForm = make(url.Values)\n\t}\n\tfor k, v := range f.Value {\n\t\tr.Form[k] = append(r.Form[k], v...)\n\t\t// r.PostForm should also be populated. See Issue 9305.\n\t\tr.PostForm[k] = append(r.PostForm[k], v...)\n\t}\n\n\tr.MultipartForm = f\n\n\treturn parseFormErr\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) ParseForm() error {\n\tvar err error\n\tif r.PostForm == nil {\n\t\tif r.Method == \"POST\" || r.Method == \"PUT\" || r.Method == \"PATCH\" {\n\t\t\tr.PostForm, err = parsePostForm(r)\n\t\t}\n\t\tif r.PostForm == nil {\n\t\t\tr.PostForm = make(url.Values)\n\t\t}\n\t}\n\tif r.Form == nil {\n\t\tif len(r.PostForm) \u003e 0 {\n\t\t\tr.Form = make(url.Values)\n\t\t\tcopyValues(r.Form, r.PostForm)\n\t\t}\n\t\tvar newValues url.Values\n\t\tif r.URL != nil {\n\t\t\tvar e error\n\t\t\tnewValues, e = url.ParseQuery(r.URL.RawQuery)\n\t\t\tif err == nil {\n\t\t\t\terr = e\n\t\t\t}\n\t\t}\n\t\tif newValues == nil {\n\t\t\tnewValues = make(url.Values)\n\t\t}\n\t\tif r.Form == nil {\n\t\t\tr.Form = newValues\n\t\t} else {\n\t\t\tcopyValues(r.Form, newValues)\n\t\t}\n\t}\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        394,
        395,
        396,
        397,
        398,
        399,
        400,
        404
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Uint",
      "signature": "(b *ValueBinder) Uint (sourceParam string, dest *uint) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint(sourceParam string, dest *uint) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 0, false)\n}",
      "function_comment": "// Uint binds parameter to uint variable",
      "function_statement": "// Uint binds parameter to uint variable",
      "start_line": 722,
      "end_line": 724,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        722,
        723,
        724
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:bool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "bool",
      "signature": "(b *ValueBinder) bool (sourceParam string, value string, dest *bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) bool(sourceParam string, value string, dest *bool) *ValueBinder {\n\tn, err := strconv.ParseBool(value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to bool\", err))\n\t\treturn b\n\t}\n\n\t*dest = n\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 924,
      "end_line": 933,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atob.go",
          "code_snippet": "func ParseBool(str string) (bool, error) {\n\tswitch str {\n\tcase \"1\", \"t\", \"T\", \"true\", \"TRUE\", \"True\":\n\t\treturn true, nil\n\tcase \"0\", \"f\", \"F\", \"false\", \"FALSE\", \"False\":\n\t\treturn false, nil\n\t}\n\treturn false, syntaxError(\"ParseBool\", str)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        924,
        925,
        926,
        927,
        928,
        929,
        931,
        932
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:floats",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "floats",
      "signature": "(b *ValueBinder) floats (sourceParam string, values []string, dest interface{}) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) floats(sourceParam string, values []string, dest interface{}) *ValueBinder {\n\tswitch d := dest.(type) {\n\tcase *[]float64:\n\t\ttmp := make([]float64, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.float(sourceParam, v, \u0026tmp[i], 64)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\tcase *[]float32:\n\t\ttmp := make([]float32, len(values))\n\t\tfor i, v := range values {\n\t\t\tb.float(sourceParam, v, \u0026tmp[i], 32)\n\t\t\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\t\t\treturn b\n\t\t\t}\n\t\t}\n\t\tif b.errors == nil {\n\t\t\t*d = tmp\n\t\t}\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1041,
      "end_line": 1067,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) float(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseFloat(value, bitSize)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to float%v\", bitSize), err))\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *float64:\n\t\t*d = n\n\tcase *float32:\n\t\t*d = float32(n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1041,
        1042,
        1043,
        1044,
        1045,
        1046,
        1047,
        1048,
        1049,
        1051,
        1052,
        1053,
        1054,
        1055,
        1056,
        1057,
        1058,
        1059,
        1060,
        1062,
        1063,
        1064,
        1066
      ],
      "cover_details": {
        "line_cover_rate": 0.8518518518518519
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:Match",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "Match",
      "signature": "(g *Group) Match (methods []string, path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route",
      "ground_truth": "func (g *Group) Match(methods []string, path string, handler HandlerFunc, middleware ...MiddlewareFunc) []*Route {\n\troutes := make([]*Route, len(methods))\n\tfor i, m := range methods {\n\t\troutes[i] = g.Add(m, path, handler, middleware...)\n\t}\n\treturn routes\n}",
      "function_comment": "// Match implements `Echo#Match()` for sub-routes within the Group.",
      "function_statement": "// Match implements `Echo#Match()` for sub-routes within the Group.",
      "start_line": 90,
      "end_line": 96,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        90,
        91,
        92,
        93,
        94,
        95
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/basic_auth.go:BasicAuthWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/basic_auth_test.go",
          "func_name": "TestBasicAuthRealm"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/basic_auth_test.go",
          "func_name": "TestBasicAuth"
        }
      ],
      "name": "BasicAuthWithConfig",
      "signature": "BasicAuthWithConfig (config BasicAuthConfig) echo.MiddlewareFunc",
      "ground_truth": "func BasicAuthWithConfig(config BasicAuthConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Validator == nil {\n\t\tpanic(\"echo: basic-auth middleware requires a validator function\")\n\t}\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBasicAuthConfig.Skipper\n\t}\n\tif config.Realm == \"\" {\n\t\tconfig.Realm = defaultRealm\n\t}\n\n\t// Pre-compute the quoted realm for WWW-Authenticate header (RFC 7617)\n\tquotedRealm := strconv.Quote(config.Realm)\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tauth := c.Request().Header.Get(echo.HeaderAuthorization)\n\t\t\tl := len(basic)\n\n\t\t\tif len(auth) \u003e l+1 \u0026\u0026 strings.EqualFold(auth[:l], basic) {\n\t\t\t\t// Invalid base64 shouldn't be treated as error\n\t\t\t\t// instead should be treated as invalid client input\n\t\t\t\tb, err := base64.StdEncoding.DecodeString(auth[l+1:])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn echo.NewHTTPError(http.StatusBadRequest).SetInternal(err)\n\t\t\t\t}\n\n\t\t\t\tcred := string(b)\n\t\t\t\tuser, pass, ok := strings.Cut(cred, \":\")\n\t\t\t\tif ok {\n\t\t\t\t\t// Verify credentials\n\t\t\t\t\tvalid, err := config.Validator(user, pass, c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn err\n\t\t\t\t\t} else if valid {\n\t\t\t\t\t\treturn next(c)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Need to return `401` for browsers to pop-up login box.\n\t\t\t// Realm is case-insensitive, so we can use \"basic\" directly. See RFC 7617.\n\t\t\tc.Response().Header().Set(echo.HeaderWWWAuthenticate, basic+\" realm=\"+quotedRealm)\n\t\t\treturn echo.ErrUnauthorized\n\t\t}\n\t}\n}",
      "function_comment": "// BasicAuthWithConfig returns an BasicAuth middleware with config.\n// See `BasicAuth()`.",
      "function_statement": "// BasicAuthWithConfig returns an BasicAuth middleware with config.\n// See `BasicAuth()`.",
      "start_line": 57,
      "end_line": 108,
      "file_path": "./middleware/basic_auth.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/basic_auth.go",
          "code_snippet": "BasicAuthConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Validator is a function to validate BasicAuth credentials.\n\t// Required.\n\tValidator BasicAuthValidator\n\n\t// Realm is a string to define realm attribute of BasicAuth.\n\t// Default value \"Restricted\".\n\tRealm string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/basic_auth.go",
          "code_snippet": "DefaultBasicAuthConfig = BasicAuthConfig{\n\tSkipper: DefaultSkipper,\n\tRealm:   defaultRealm,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/basic_auth.go",
          "code_snippet": "defaultRealm = \"Restricted\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAuthorization       = \"Authorization\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/basic_auth.go",
          "code_snippet": "basic        = \"basic\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderWWWAuthenticate     = \"WWW-Authenticate\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrUnauthorized                  = NewHTTPError(http.StatusUnauthorized)",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/quote.go",
          "code_snippet": "func Quote(s string) string {\n\treturn quoteWith(s, '\"', false, false)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func EqualFold(s, t string) bool {\n\t// ASCII fast path\n\ti := 0\n\tfor ; i \u003c len(s) \u0026\u0026 i \u003c len(t); i++ {\n\t\tsr := s[i]\n\t\ttr := t[i]\n\t\tif sr|tr \u003e= utf8.RuneSelf {\n\t\t\tgoto hasUnicode\n\t\t}\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// ASCII only, sr/tr must be upper/lower case\n\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\t// Check if we've exhausted both strings.\n\treturn len(s) == len(t)\n\nhasUnicode:\n\ts = s[i:]\n\tt = t[i:]\n\tfor _, sr := range s {\n\t\t// If t is exhausted the strings are not equal.\n\t\tif len(t) == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\t// Extract first rune from second string.\n\t\tvar tr rune\n\t\tif t[0] \u003c utf8.RuneSelf {\n\t\t\ttr, t = rune(t[0]), t[1:]\n\t\t} else {\n\t\t\tr, size := utf8.DecodeRuneInString(t)\n\t\t\ttr, t = r, t[size:]\n\t\t}\n\n\t\t// If they match, keep going; if not, return false.\n\n\t\t// Easy case.\n\t\tif tr == sr {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Make sr \u003c tr to simplify what follows.\n\t\tif tr \u003c sr {\n\t\t\ttr, sr = sr, tr\n\t\t}\n\t\t// Fast check for ASCII.\n\t\tif tr \u003c utf8.RuneSelf {\n\t\t\t// ASCII only, sr/tr must be upper/lower case\n\t\t\tif 'A' \u003c= sr \u0026\u0026 sr \u003c= 'Z' \u0026\u0026 tr == sr+'a'-'A' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\n\t\t// General case. SimpleFold(x) returns the next equivalent rune \u003e x\n\t\t// or wraps around to smaller values.\n\t\tr := unicode.SimpleFold(sr)\n\t\tfor r != sr \u0026\u0026 r \u003c tr {\n\t\t\tr = unicode.SimpleFold(r)\n\t\t}\n\t\tif r == tr {\n\t\t\tcontinue\n\t\t}\n\t\treturn false\n\t}\n\n\t// First string is empty, so check if the second one is also empty.\n\treturn len(t) == 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/base64/base64.go",
          "code_snippet": "func (enc *Encoding) DecodeString(s string) ([]byte, error) {\n\tdbuf := make([]byte, enc.DecodedLen(len(s)))\n\tn, err := enc.Decode(dbuf, []byte(s))\n\treturn dbuf[:n], err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/base64/base64.go",
          "code_snippet": "StdEncoding = NewEncoding(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Cut(s, sep string) (before, after string, found bool) {\n\treturn stringslite.Cut(s, sep)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        89,
        90,
        91,
        92,
        93,
        94,
        96,
        97,
        98,
        104,
        105
      ],
      "cover_details": {
        "line_cover_rate": 0.7115384615384616
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:Gzip",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        }
      ],
      "name": "Gzip",
      "signature": "Gzip () echo.MiddlewareFunc",
      "ground_truth": "func Gzip() echo.MiddlewareFunc {\n\treturn GzipWithConfig(DefaultGzipConfig)\n}",
      "function_comment": "// Gzip returns a middleware which compresses HTTP response using gzip compression\n// scheme.",
      "function_statement": "// Gzip returns a middleware which compresses HTTP response using gzip compression\n// scheme.",
      "start_line": 66,
      "end_line": 68,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "func GzipWithConfig(config GzipConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultGzipConfig.Skipper\n\t}\n\tif config.Level == 0 {\n\t\tconfig.Level = DefaultGzipConfig.Level\n\t}\n\tif config.MinLength \u003c 0 {\n\t\tconfig.MinLength = DefaultGzipConfig.MinLength\n\t}\n\n\tpool := gzipCompressPool(config)\n\tbpool := bufferPool()\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tres := c.Response()\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderAcceptEncoding)\n\t\t\tif strings.Contains(c.Request().Header.Get(echo.HeaderAcceptEncoding), gzipScheme) {\n\t\t\t\ti := pool.Get()\n\t\t\t\tw, ok := i.(*gzip.Writer)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, i.(error).Error())\n\t\t\t\t}\n\t\t\t\trw := res.Writer\n\t\t\t\tw.Reset(rw)\n\n\t\t\t\tbuf := bpool.Get().(*bytes.Buffer)\n\t\t\t\tbuf.Reset()\n\n\t\t\t\tgrw := \u0026gzipResponseWriter{Writer: w, ResponseWriter: rw, minLength: config.MinLength, buffer: buf}\n\t\t\t\tdefer func() {\n\t\t\t\t\t// There are different reasons for cases when we have not yet written response to the client and now need to do so.\n\t\t\t\t\t// a) handler response had only response code and no response body (ala 404 or redirects etc). Response code need to be written now.\n\t\t\t\t\t// b) body is shorter than our minimum length threshold and being buffered currently and needs to be written\n\t\t\t\t\tif !grw.wroteBody {\n\t\t\t\t\t\tif res.Header().Get(echo.HeaderContentEncoding) == gzipScheme {\n\t\t\t\t\t\t\tres.Header().Del(echo.HeaderContentEncoding)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif grw.wroteHeader {\n\t\t\t\t\t\t\trw.WriteHeader(grw.code)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// We have to reset response to it's pristine state when\n\t\t\t\t\t\t// nothing is written to body or error is returned.\n\t\t\t\t\t\t// See issue #424, #407.\n\t\t\t\t\t\tres.Writer = rw\n\t\t\t\t\t\tw.Reset(io.Discard)\n\t\t\t\t\t} else if !grw.minLengthExceeded {\n\t\t\t\t\t\t// Write uncompressed response\n\t\t\t\t\t\tres.Writer = rw\n\t\t\t\t\t\tif grw.wroteHeader {\n\t\t\t\t\t\t\tgrw.ResponseWriter.WriteHeader(grw.code)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgrw.buffer.WriteTo(rw)\n\t\t\t\t\t\tw.Reset(io.Discard)\n\t\t\t\t\t}\n\t\t\t\t\tw.Close()\n\t\t\t\t\tbpool.Put(buf)\n\t\t\t\t\tpool.Put(w)\n\t\t\t\t}()\n\t\t\t\tres.Writer = grw\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "DefaultGzipConfig = GzipConfig{\n\tSkipper:   DefaultSkipper,\n\tLevel:     -1,\n\tMinLength: 0,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        66,
        67,
        68
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/util.go:randomString",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestIDConfigDifferentHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "TestRandomString"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "TestRandomStringBias"
        }
      ],
      "name": "randomString",
      "signature": "randomString (length uint8) string",
      "ground_truth": "func randomString(length uint8) string {\n\treader := randomReaderPool.Get().(*bufio.Reader)\n\tdefer randomReaderPool.Put(reader)\n\n\tb := make([]byte, length)\n\tr := make([]byte, length+(length/4)) // perf: avoid read from rand.Reader many times\n\tvar i uint8 = 0\n\n\t// security note:\n\t// we can't just simply do b[i]=randomStringCharset[rb%len(randomStringCharset)],\n\t// len(len(randomStringCharset)) is 52, and rb is [0, 255], 256 = 52 * 4 + 48.\n\t// make the first 48 characters more possibly to be generated then others.\n\t// So we have to skip bytes when rb \u003e randomStringMaxByte\n\n\tfor {\n\t\t_, err := io.ReadFull(reader, r)\n\t\tif err != nil {\n\t\t\tpanic(\"unexpected error happened when reading from bufio.NewReader(crypto/rand.Reader)\")\n\t\t}\n\t\tfor _, rb := range r {\n\t\t\tif rb \u003e randomStringMaxByte {\n\t\t\t\t// Skip this number to avoid bias.\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tb[i] = randomStringCharset[rb%randomStringCharsetLen]\n\t\t\ti++\n\t\t\tif i == length {\n\t\t\t\treturn string(b)\n\t\t\t}\n\t\t}\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 72,
      "end_line": 103,
      "file_path": "./middleware/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "randomReaderPool = sync.Pool{New: func() interface{} {\n\treturn bufio.NewReader(rand.Reader)\n}}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "randomStringMaxByte = 255 - (256 % randomStringCharsetLen)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "randomStringCharset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "randomStringCharsetLen = 52",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bufio/bufio.go",
          "code_snippet": "Reader struct {\n\tbuf          []byte\n\trd           io.Reader // reader provided by the client\n\tr, w         int       // buf read and write positions\n\terr          error\n\tlastByte     int // last byte read for UnreadByte; -1 means invalid\n\tlastRuneSize int // size of last rune read for UnreadRune; -1 means invalid\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func ReadFull(r Reader, buf []byte) (n int, err error) {\n\treturn ReadAtLeast(r, buf, len(buf))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        91,
        92,
        93,
        94,
        96,
        97,
        98,
        99,
        100
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Error",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindingError_Error"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        }
      ],
      "name": "Error",
      "signature": "(be *BindingError) Error () string",
      "ground_truth": "func (be *BindingError) Error() string {\n\treturn fmt.Sprintf(\"%s, field=%s\", be.HTTPError.Error(), be.Field)\n}",
      "function_comment": "// Error returns error message",
      "function_statement": "// Error returns error message",
      "start_line": 91,
      "end_line": 93,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "BindingError struct {\n\t// Field is the field name where value binding failed\n\tField string `json:\"field\"`\n\t*HTTPError\n\t// Values of parameter that failed to bind.\n\tValues []string `json:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) Error() string {\n\tif he.Internal == nil {\n\t\treturn fmt.Sprintf(\"code=%d, message=%v\", he.Code, he.Message)\n\t}\n\treturn fmt.Sprintf(\"code=%d, message=%v, internal=%v\", he.Code, he.Message, he.Internal)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        91,
        92,
        93
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustJSONUnmarshaler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        }
      ],
      "name": "MustJSONUnmarshaler",
      "signature": "(b *ValueBinder) MustJSONUnmarshaler (sourceParam string, dest json.Unmarshaler) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustJSONUnmarshaler(sourceParam string, dest json.Unmarshaler) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\ttmp := b.ValueFunc(sourceParam)\n\tif tmp == \"\" {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"required field value is empty\", nil))\n\t\treturn b\n\t}\n\n\tif err := dest.UnmarshalJSON([]byte(tmp)); err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"failed to bind field value to json.Unmarshaler interface\", err))\n\t}\n\treturn b\n}",
      "function_comment": "// MustJSONUnmarshaler requires parameter value to exist to bind to destination implementing json.Unmarshaler interface.\n// Returns error when value does not exist",
      "function_statement": "// MustJSONUnmarshaler requires parameter value to exist to bind to destination implementing json.Unmarshaler interface.\n// Returns error when value does not exist",
      "start_line": 350,
      "end_line": 365,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/decode.go",
          "code_snippet": "Unmarshaler interface {\n\tUnmarshalJSON([]byte) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        350,
        351,
        352,
        353,
        355,
        356,
        357,
        358,
        359,
        361,
        362,
        363,
        364
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Close",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        }
      ],
      "name": "Close",
      "signature": "(e *Echo) Close () error",
      "ground_truth": "func (e *Echo) Close() error {\n\te.startupMutex.Lock()\n\tdefer e.startupMutex.Unlock()\n\tif err := e.TLSServer.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn e.Server.Close()\n}",
      "function_comment": "// Close immediately stops the server.\n// It internally calls `http.Server#Close()`.",
      "function_statement": "// Close immediately stops the server.\n// It internally calls `http.Server#Close()`.",
      "start_line": 866,
      "end_line": 873,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Close() error {\n\tsrv.inShutdown.Store(true)\n\tsrv.mu.Lock()\n\tdefer srv.mu.Unlock()\n\terr := srv.closeListenersLocked()\n\n\t// Unlock srv.mu while waiting for listenerGroup.\n\t// The group Add and Done calls are made with srv.mu held,\n\t// to avoid adding a new listener in the window between\n\t// us setting inShutdown above and waiting here.\n\tsrv.mu.Unlock()\n\tsrv.listenerGroup.Wait()\n\tsrv.mu.Lock()\n\n\tfor c := range srv.activeConn {\n\t\tc.rwc.Close()\n\t\tdelete(srv.activeConn, c)\n\t}\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        866,
        867,
        868,
        869,
        872
      ],
      "cover_details": {
        "line_cover_rate": 0.625
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:isPrivateIPRange",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        }
      ],
      "name": "isPrivateIPRange",
      "signature": "isPrivateIPRange (ip net.IP) bool",
      "ground_truth": "func isPrivateIPRange(ip net.IP) bool {\n\tif ip4 := ip.To4(); ip4 != nil {\n\t\treturn ip4[0] == 10 ||\n\t\t\tip4[0] == 172 \u0026\u0026 ip4[1]\u00260xf0 == 16 ||\n\t\t\tip4[0] == 192 \u0026\u0026 ip4[1] == 168\n\t}\n\treturn len(ip) == net.IPv6len \u0026\u0026 ip[0]\u00260xfe == 0xfc\n}",
      "function_comment": "// Go1.16+ added `ip.IsPrivate()` but until that use this implementation",
      "function_statement": "// Go1.16+ added `ip.IsPrivate()` but until that use this implementation",
      "start_line": 183,
      "end_line": 190,
      "file_path": "./ip.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "IP []byte",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func (ip IP) To4() IP {\n\tif len(ip) == IPv4len {\n\t\treturn ip\n\t}\n\tif len(ip) == IPv6len \u0026\u0026\n\t\tisZeros(ip[0:10]) \u0026\u0026\n\t\tip[10] == 0xff \u0026\u0026\n\t\tip[11] == 0xff {\n\t\treturn ip[12:16]\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "IPv6len = 16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        183,
        184,
        185,
        186,
        187,
        188,
        189
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:ToMiddleware",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "ToMiddleware",
      "signature": "(config TimeoutConfig) ToMiddleware () (echo.MiddlewareFunc, error)",
      "ground_truth": "func (config TimeoutConfig) ToMiddleware() (echo.MiddlewareFunc, error) {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultTimeoutConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) || config.Timeout == 0 {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\terrChan := make(chan error, 1)\n\t\t\thandlerWrapper := echoHandlerFuncWrapper{\n\t\t\t\twriter:     \u0026ignorableWriter{ResponseWriter: c.Response().Writer},\n\t\t\t\tctx:        c,\n\t\t\t\thandler:    next,\n\t\t\t\terrChan:    errChan,\n\t\t\t\terrHandler: config.OnTimeoutRouteErrorHandler,\n\t\t\t}\n\t\t\thandler := http.TimeoutHandler(handlerWrapper, config.Timeout, config.ErrorMessage)\n\t\t\thandler.ServeHTTP(handlerWrapper.writer, c.Request())\n\n\t\t\tselect {\n\t\t\tcase err := \u003c-errChan:\n\t\t\t\treturn err\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}, nil\n}",
      "function_comment": "// ToMiddleware converts Config to middleware or returns an error for invalid configuration",
      "function_statement": "// ToMiddleware converts Config to middleware or returns an error for invalid configuration",
      "start_line": 106,
      "end_line": 136,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "TimeoutConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// ErrorMessage is written to response on timeout in addition to http.StatusServiceUnavailable (503) status code\n\t// It can be used to define a custom timeout error message\n\tErrorMessage string\n\n\t// OnTimeoutRouteErrorHandler is an error handler that is executed for error that was returned from wrapped route after\n\t// request timeouted and we already had sent the error code (503) and message response to the client.\n\t// NB: do not write headers/body inside this handler. The response has already been sent to the client and response writer\n\t// will not accept anything no more. If you want to know what actual route middleware timeouted use `c.Path()`\n\tOnTimeoutRouteErrorHandler func(err error, c echo.Context)\n\n\t// Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n\t// NOTE: when difference between timeout duration and handler execution time is almost the same (in range of 100microseconds)\n\t// the result of timeout does not seem to be reliable - could respond timeout, could respond handler output\n\t// difference over 500microseconds (0.5millisecond) response seems to be reliable\n\tTimeout time.Duration\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "DefaultTimeoutConfig = TimeoutConfig{\n\tSkipper:      DefaultSkipper,\n\tTimeout:      0,\n\tErrorMessage: \"\",\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "echoHandlerFuncWrapper struct {\n\twriter     *ignorableWriter\n\tctx        echo.Context\n\thandler    echo.HandlerFunc\n\terrHandler func(err error, c echo.Context)\n\terrChan    chan error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "ignorableWriter struct {\n\thttp.ResponseWriter\n\n\tlock         sync.Mutex\n\tignoreWrites bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler {\n\treturn \u0026timeoutHandler{\n\t\thandler: h,\n\t\tbody:    msg,\n\t\tdt:      dt,\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        106,
        107,
        108,
        109,
        111,
        112,
        113,
        114,
        115,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132
      ],
      "cover_details": {
        "line_cover_rate": 0.8064516129032258
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Request",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Request"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "Request",
      "signature": "(c *context) Request () *http.Request",
      "ground_truth": "func (c *context) Request() *http.Request {\n\treturn c.request\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 250,
      "end_line": 252,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        250,
        251,
        252
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:intValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "intValue",
      "signature": "(b *ValueBinder) intValue (sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 503,
      "end_line": 517,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) int(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseInt(value, 10, bitSize)\n\tif err != nil {\n\t\tif bitSize == 0 {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to int\", err))\n\t\t} else {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to int%v\", bitSize), err))\n\t\t}\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *int64:\n\t\t*d = n\n\tcase *int32:\n\t\t*d = int32(n)\n\tcase *int16:\n\t\t*d = int16(n)\n\tcase *int8:\n\t\t*d = int8(n)\n\tcase *int:\n\t\t*d = int(n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        503,
        504,
        505,
        506,
        508,
        509,
        510,
        511,
        512,
        513,
        516
      ],
      "cover_details": {
        "line_cover_rate": 0.7333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustByte",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustByte",
      "signature": "(b *ValueBinder) MustByte (sourceParam string, dest *byte) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustByte(sourceParam string, dest *byte) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 8, true)\n}",
      "function_comment": "// MustByte requires parameter value to exist to bind to byte variable. Returns error when value does not exist",
      "function_statement": "// MustByte requires parameter value to exist to bind to byte variable. Returns error when value does not exist",
      "start_line": 717,
      "end_line": 719,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        717,
        718,
        719
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:UnixTimeMilli",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        }
      ],
      "name": "UnixTimeMilli",
      "signature": "(b *ValueBinder) UnixTimeMilli (sourceParam string, dest *time.Time) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) UnixTimeMilli(sourceParam string, dest *time.Time) *ValueBinder {\n\treturn b.unixTime(sourceParam, dest, false, time.Millisecond)\n}",
      "function_comment": "// UnixTimeMilli binds parameter to time.Time variable (in local time corresponding to the given Unix time in millisecond precision).\n//\n// Example: 1647184410140 bind to 2022-03-13T15:13:30.140000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "function_statement": "// UnixTimeMilli binds parameter to time.Time variable (in local time corresponding to the given Unix time in millisecond precision).\n//\n// Example: 1647184410140 bind to 2022-03-13T15:13:30.140000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "start_line": 1263,
      "end_line": 1265,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1263,
        1264,
        1265
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:ListenerAddr",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        }
      ],
      "name": "ListenerAddr",
      "signature": "(e *Echo) ListenerAddr () net.Addr",
      "ground_truth": "func (e *Echo) ListenerAddr() net.Addr {\n\te.startupMutex.RLock()\n\tdefer e.startupMutex.RUnlock()\n\tif e.Listener == nil {\n\t\treturn nil\n\t}\n\treturn e.Listener.Addr()\n}",
      "function_comment": "// ListenerAddr returns net.Addr for Listener",
      "function_statement": "// ListenerAddr returns net.Addr for Listener",
      "start_line": 813,
      "end_line": 820,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Addr interface {\n\tNetwork() string // name of the network (for example, \"tcp\", \"udp\")\n\tString() string  // string form of address (for example, \"192.0.2.1:25\", \"[2001:db8::1]:80\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\tif rw.readerCount.Add(1) \u003c 0 {\n\t\t// A writer is pending, wait for it.\n\t\truntime_SemacquireRWMutexR(\u0026rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(\u0026rw.writerSem))\n\t\trace.Disable()\n\t}\n\tif r := rw.readerCount.Add(-1); r \u003c 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Listener interface {\n\t// Accept waits for and returns the next connection to the listener.\n\tAccept() (Conn, error)\n\n\t// Close closes the listener.\n\t// Any blocked Accept operations will be unblocked and return errors.\n\tClose() error\n\n\t// Addr returns the listener's network address.\n\tAddr() Addr\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        813,
        814,
        815,
        816,
        817,
        818,
        819
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:WriteHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        }
      ],
      "name": "WriteHeader",
      "signature": "(w *gzipResponseWriter) WriteHeader (code int)",
      "ground_truth": "func (w *gzipResponseWriter) WriteHeader(code int) {\n\tw.Header().Del(echo.HeaderContentLength) // Issue #444\n\n\tw.wroteHeader = true\n\n\t// Delay writing of the header until we know if we'll actually compress the response\n\tw.code = code\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 144,
      "end_line": 151,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n\twroteHeader       bool\n\twroteBody         bool\n\tminLength         int\n\tminLengthExceeded bool\n\tbuffer            *bytes.Buffer\n\tcode              int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentLength       = \"Content-Length\"",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Del(key string) {\n\ttextproto.MIMEHeader(h).Del(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Echo",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        }
      ],
      "name": "Echo",
      "signature": "(c *context) Echo () *Echo",
      "ground_truth": "func (c *context) Echo() *Echo {\n\treturn c.echo\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 623,
      "end_line": 625,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        623,
        624,
        625
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:BindQueryParams",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        }
      ],
      "name": "BindQueryParams",
      "signature": "(b *DefaultBinder) BindQueryParams (c Context, i interface{}) error",
      "ground_truth": "func (b *DefaultBinder) BindQueryParams(c Context, i interface{}) error {\n\tif err := b.bindData(i, c.QueryParams(), \"query\", nil); err != nil {\n\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t}\n\treturn nil\n}",
      "function_comment": "// BindQueryParams binds query params to bindable object",
      "function_statement": "// BindQueryParams binds query params to bindable object",
      "start_line": 64,
      "end_line": 69,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) bindData(destination interface{}, data map[string][]string, tag string, dataFiles map[string][]*multipart.FileHeader) error {\n\tif destination == nil || (len(data) == 0 \u0026\u0026 len(dataFiles) == 0) {\n\t\treturn nil\n\t}\n\thasFiles := len(dataFiles) \u003e 0\n\ttyp := reflect.TypeOf(destination).Elem()\n\tval := reflect.ValueOf(destination).Elem()\n\n\t// Support binding to limited Map destinations:\n\t// - map[string][]string,\n\t// - map[string]string \u003c-- (binds first value from data slice)\n\t// - map[string]interface{}\n\t// You are better off binding to struct but there are user who want this map feature. Source of data for these cases are:\n\t// params,query,header,form as these sources produce string values, most of the time slice of strings, actually.\n\tif typ.Kind() == reflect.Map \u0026\u0026 typ.Key().Kind() == reflect.String {\n\t\tk := typ.Elem().Kind()\n\t\tisElemInterface := k == reflect.Interface\n\t\tisElemString := k == reflect.String\n\t\tisElemSliceOfStrings := k == reflect.Slice \u0026\u0026 typ.Elem().Elem().Kind() == reflect.String\n\t\tif !(isElemSliceOfStrings || isElemString || isElemInterface) {\n\t\t\treturn nil\n\t\t}\n\t\tif val.IsNil() {\n\t\t\tval.Set(reflect.MakeMap(typ))\n\t\t}\n\t\tfor k, v := range data {\n\t\t\tif isElemString {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else if isElemInterface {\n\t\t\t\t// To maintain backward compatibility, we always bind to the first string value\n\t\t\t\t// and not the slice of strings when dealing with map[string]interface{}{}\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v))\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\t// !struct\n\tif typ.Kind() != reflect.Struct {\n\t\tif tag == \"param\" || tag == \"query\" || tag == \"header\" {\n\t\t\t// incompatible type, data is probably to be found in the body\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"binding element must be a struct\")\n\t}\n\n\tfor i := 0; i \u003c typ.NumField(); i++ { // iterate over all destination fields\n\t\ttypeField := typ.Field(i)\n\t\tstructField := val.Field(i)\n\t\tif typeField.Anonymous {\n\t\t\tif structField.Kind() == reflect.Ptr {\n\t\t\t\tstructField = structField.Elem()\n\t\t\t}\n\t\t}\n\t\tif !structField.CanSet() {\n\t\t\tcontinue\n\t\t}\n\t\tstructFieldKind := structField.Kind()\n\t\tinputFieldName := typeField.Tag.Get(tag)\n\t\tif typeField.Anonymous \u0026\u0026 structFieldKind == reflect.Struct \u0026\u0026 inputFieldName != \"\" {\n\t\t\t// if anonymous struct with query/param/form tags, report an error\n\t\t\treturn errors.New(\"query/param/form tags are not allowed with anonymous struct field\")\n\t\t}\n\n\t\tif inputFieldName == \"\" {\n\t\t\t// If tag is nil, we inspect if the field is a not BindUnmarshaler struct and try to bind data into it (might contain fields with tags).\n\t\t\t// structs that implement BindUnmarshaler are bound only when they have explicit tag\n\t\t\tif _, ok := structField.Addr().Interface().(BindUnmarshaler); !ok \u0026\u0026 structFieldKind == reflect.Struct {\n\t\t\t\tif err := b.bindData(structField.Addr().Interface(), data, tag, dataFiles); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\t// does not have explicit tag and is not an ordinary struct - so move to next field\n\t\t\tcontinue\n\t\t}\n\n\t\tif hasFiles {\n\t\t\tif ok, err := isFieldMultipartFile(structField.Type()); err != nil {\n\t\t\t\treturn err\n\t\t\t} else if ok {\n\t\t\t\tif ok := setMultipartFileHeaderTypes(structField, inputFieldName, dataFiles); ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinputValue, exists := data[inputFieldName]\n\t\tif !exists {\n\t\t\t// Go json.Unmarshal supports case-insensitive binding.  However the\n\t\t\t// url params are bound case-sensitive which is inconsistent.  To\n\t\t\t// fix this we must check all of the map values in a\n\t\t\t// case-insensitive search.\n\t\t\tfor k, v := range data {\n\t\t\t\tif strings.EqualFold(k, inputFieldName) {\n\t\t\t\t\tinputValue = v\n\t\t\t\t\texists = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\n\t\t// NOTE: algorithm here is not particularly sophisticated. It probably does not work with absurd types like `**[]*int`\n\t\t// but it is smart enough to handle niche cases like `*int`,`*[]string`,`[]*int` .\n\n\t\t// try unmarshalling first, in case we're dealing with an alias to an array type\n\t\tif ok, err := unmarshalInputsToField(typeField.Type.Kind(), inputValue, structField); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tformatTag := typeField.Tag.Get(\"format\")\n\t\tif ok, err := unmarshalInputToField(typeField.Type.Kind(), inputValue[0], structField, formatTag); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// we could be dealing with pointer to slice `*[]string` so dereference it. There are weird OpenAPI generators\n\t\t// that could create struct fields like that.\n\t\tif structFieldKind == reflect.Pointer {\n\t\t\tstructFieldKind = structField.Elem().Kind()\n\t\t\tstructField = structField.Elem()\n\t\t}\n\n\t\tif structFieldKind == reflect.Slice {\n\t\t\tsliceOf := structField.Type().Elem().Kind()\n\t\t\tnumElems := len(inputValue)\n\t\t\tslice := reflect.MakeSlice(structField.Type(), numElems, numElems)\n\t\t\tfor j := 0; j \u003c numElems; j++ {\n\t\t\t\tif err := setWithProperType(sliceOf, inputValue[j], slice.Index(j)); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tstructField.Set(slice)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := setWithProperType(structFieldKind, inputValue[0], structField); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        64,
        65,
        66,
        67,
        68
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Time",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        }
      ],
      "name": "Time",
      "signature": "(b *ValueBinder) Time (sourceParam string, dest *time.Time, layout string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Time(sourceParam string, dest *time.Time, layout string) *ValueBinder {\n\treturn b.time(sourceParam, dest, layout, false)\n}",
      "function_comment": "// Time binds parameter to time.Time variable",
      "function_statement": "// Time binds parameter to time.Time variable",
      "start_line": 1090,
      "end_line": 1092,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) time(sourceParam string, dest *time.Time, layout string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tt, err := time.Parse(layout, value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\t*dest = t\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1090,
        1091,
        1092
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:file",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "file",
      "signature": "(common) file (path, file string, get func(string, HandlerFunc, ...MiddlewareFunc) *Route,\n\tm ...MiddlewareFunc) *Route",
      "ground_truth": "func (common) file(path, file string, get func(string, HandlerFunc, ...MiddlewareFunc) *Route,\n\tm ...MiddlewareFunc) *Route {\n\treturn get(path, func(c Context) error {\n\t\treturn c.File(file)\n\t}, m...)\n}",
      "function_comment": "// Match registers a new route for multiple HTTP methods and path with matching",
      "function_statement": "// Match registers a new route for multiple HTTP methods and path with matching",
      "start_line": 563,
      "end_line": 568,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "common struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        564,
        565,
        566,
        567
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:QueryParamsBinder",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "QueryParamsBinder",
      "signature": "QueryParamsBinder (c Context) *ValueBinder",
      "ground_truth": "func QueryParamsBinder(c Context) *ValueBinder {\n\treturn \u0026ValueBinder{\n\t\tfailFast:  true,\n\t\tValueFunc: c.QueryParam,\n\t\tValuesFunc: func(sourceParam string) []string {\n\t\t\tvalues, ok := c.QueryParams()[sourceParam]\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn values\n\t\t},\n\t\tErrorFunc: NewBindingError,\n\t}\n}",
      "function_comment": "// QueryParamsBinder creates query parameter value binder",
      "function_statement": "// QueryParamsBinder creates query parameter value binder",
      "start_line": 109,
      "end_line": 122,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func NewBindingError(sourceParam string, values []string, message interface{}, internalError error) error {\n\treturn \u0026BindingError{\n\t\tField:  sourceParam,\n\t\tValues: values,\n\t\tHTTPError: \u0026HTTPError{\n\t\t\tCode:     http.StatusBadRequest,\n\t\t\tMessage:  message,\n\t\t\tInternal: internalError,\n\t\t},\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Int",
      "signature": "(b *ValueBinder) Int (sourceParam string, dest *int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int(sourceParam string, dest *int) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 0, false)\n}",
      "function_comment": "// Int binds parameter to int variable",
      "function_statement": "// Int binds parameter to int variable",
      "start_line": 494,
      "end_line": 496,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        494,
        495,
        496
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:unixTime",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        }
      ],
      "name": "unixTime",
      "signature": "(b *ValueBinder) unixTime (sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
      "function_comment": "// MustUnixTimeNano requires parameter value to exist to bind to time.Duration variable  (in local Time corresponding\n// to the given Unix time value in nano second precision). Returns error when value does not exist.\n//\n// Example: 1609180603123456789 binds to 2020-12-28T18:36:43.123456789+00:00\n// Example:          1000000000 binds to 1970-01-01T00:00:01.000000000+00:00\n// Example:           999999999 binds to 1970-01-01T00:00:00.999999999+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "function_statement": "// MustUnixTimeNano requires parameter value to exist to bind to time.Duration variable  (in local Time corresponding\n// to the given Unix time value in nano second precision). Returns error when value does not exist.\n//\n// Example: 1609180603123456789 binds to 2020-12-28T18:36:43.123456789+00:00\n// Example:          1000000000 binds to 1970-01-01T00:00:01.000000000+00:00\n// Example:           999999999 binds to 1970-01-01T00:00:00.999999999+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "start_line": 1305,
      "end_line": 1333,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func ParseInt(s string, base int, bitSize int) (i int64, err error) {\n\tconst fnParseInt = \"ParseInt\"\n\n\tif s == \"\" {\n\t\treturn 0, syntaxError(fnParseInt, s)\n\t}\n\n\t// Pick off leading sign.\n\ts0 := s\n\tneg := false\n\tif s[0] == '+' {\n\t\ts = s[1:]\n\t} else if s[0] == '-' {\n\t\tneg = true\n\t\ts = s[1:]\n\t}\n\n\t// Convert unsigned and check range.\n\tvar un uint64\n\tun, err = ParseUint(s, base, bitSize)\n\tif err != nil \u0026\u0026 err.(*NumError).Err != ErrRange {\n\t\terr.(*NumError).Func = fnParseInt\n\t\terr.(*NumError).Num = stringslite.Clone(s0)\n\t\treturn 0, err\n\t}\n\n\tif bitSize == 0 {\n\t\tbitSize = IntSize\n\t}\n\n\tcutoff := uint64(1 \u003c\u003c uint(bitSize-1))\n\tif !neg \u0026\u0026 un \u003e= cutoff {\n\t\treturn int64(cutoff - 1), rangeError(fnParseInt, s0)\n\t}\n\tif neg \u0026\u0026 un \u003e cutoff {\n\t\treturn -int64(cutoff), rangeError(fnParseInt, s0)\n\t}\n\tn := int64(un)\n\tif neg {\n\t\tn = -n\n\t}\n\treturn n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Second               = 1000 * Millisecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Unix(sec int64, nsec int64) Time {\n\tif nsec \u003c 0 || nsec \u003e= 1e9 {\n\t\tn := nsec / 1e9\n\t\tsec += n\n\t\tnsec -= n * 1e9\n\t\tif nsec \u003c 0 {\n\t\t\tnsec += 1e9\n\t\t\tsec--\n\t\t}\n\t}\n\treturn unixTime(sec, int32(nsec))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func UnixMilli(msec int64) Time {\n\treturn Unix(msec/1e3, (msec%1e3)*1e6)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Nanosecond  Duration = 1",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1305,
        1306,
        1307,
        1308,
        1310,
        1311,
        1312,
        1313,
        1314,
        1315,
        1318,
        1319,
        1320,
        1321,
        1322,
        1324,
        1325,
        1326,
        1327,
        1328,
        1329,
        1330,
        1332
      ],
      "cover_details": {
        "line_cover_rate": 0.7931034482758621
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:jsonPBlob",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        }
      ],
      "name": "jsonPBlob",
      "signature": "(c *context) jsonPBlob (code int, callback string, i any) (err error)",
      "ground_truth": "func (c *context) jsonPBlob(code int, callback string, i any) (err error) {\n\tindent := \"\"\n\tif _, pretty := c.QueryParams()[\"pretty\"]; c.echo.Debug || pretty {\n\t\tindent = defaultIndent\n\t}\n\tc.writeContentType(MIMEApplicationJavaScriptCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tif _, err = c.response.Write([]byte(callback + \"(\")); err != nil {\n\t\treturn\n\t}\n\tif err = c.echo.JSONSerializer.Serialize(c, i, indent); err != nil {\n\t\treturn\n\t}\n\tif _, err = c.response.Write([]byte(\");\")); err != nil {\n\t\treturn\n\t}\n\treturn\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 483,
      "end_line": 500,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) QueryParams() url.Values {\n\tif c.query == nil {\n\t\tc.query = c.request.URL.Query()\n\t}\n\treturn c.query\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "defaultIndent = \"  \"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationJavaScriptCharsetUTF8 = MIMEApplicationJavaScript + \"; \" + charsetUTF8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Write(b []byte) (n int, err error) {\n\tif !r.Committed {\n\t\tif r.Status == 0 {\n\t\t\tr.Status = http.StatusOK\n\t\t}\n\t\tr.WriteHeader(r.Status)\n\t}\n\tn, err = r.Writer.Write(b)\n\tr.Size += int64(n)\n\tfor _, fn := range r.afterFuncs {\n\t\tfn()\n\t}\n\treturn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "JSONSerializer interface {\n\tSerialize(c Context, i interface{}, indent string) error\n\tDeserialize(c Context, i interface{}) error\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        483,
        484,
        485,
        488,
        489,
        490,
        493,
        496,
        499
      ],
      "cover_details": {
        "line_cover_rate": 0.5
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:NewRandomBalancer",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyBalancerWithNoTargets"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        }
      ],
      "name": "NewRandomBalancer",
      "signature": "NewRandomBalancer (targets []*ProxyTarget) ProxyBalancer",
      "ground_truth": "func NewRandomBalancer(targets []*ProxyTarget) ProxyBalancer {\n\tb := randomBalancer{}\n\tb.targets = targets\n\tb.random = rand.New(rand.NewSource(int64(time.Now().Nanosecond())))\n\treturn \u0026b\n}",
      "function_comment": "// NewRandomBalancer returns a random proxy balancer.",
      "function_statement": "// NewRandomBalancer returns a random proxy balancer.",
      "start_line": 185,
      "end_line": 190,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyBalancer interface {\n\tAddTarget(*ProxyTarget) bool\n\tRemoveTarget(string) bool\n\tNext(echo.Context) *ProxyTarget\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "randomBalancer struct {\n\tcommonBalancer\n\trandom *rand.Rand\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "commonBalancer struct {\n\ttargets []*ProxyTarget\n\tmutex   sync.Mutex\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/math/rand/rand.go",
          "code_snippet": "func New(src Source) *Rand {\n\ts64, _ := src.(Source64)\n\treturn \u0026Rand{src: src, s64: s64}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/math/rand/rand.go",
          "code_snippet": "func NewSource(seed int64) Source {\n\treturn newSource(seed)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Nanosecond() int {\n\treturn int(t.nsec())\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := now()\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        185,
        186,
        187,
        188,
        189,
        190
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUnixTimeMilli",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        }
      ],
      "name": "MustUnixTimeMilli",
      "signature": "(b *ValueBinder) MustUnixTimeMilli (sourceParam string, dest *time.Time) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUnixTimeMilli(sourceParam string, dest *time.Time) *ValueBinder {\n\treturn b.unixTime(sourceParam, dest, true, time.Millisecond)\n}",
      "function_comment": "// MustUnixTimeMilli requires parameter value to exist to bind to time.Duration variable  (in local time corresponding\n// to the given Unix time in millisecond precision). Returns error when value does not exist.\n//\n// Example: 1647184410140 bind to 2022-03-13T15:13:30.140000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "function_statement": "// MustUnixTimeMilli requires parameter value to exist to bind to time.Duration variable  (in local time corresponding\n// to the given Unix time in millisecond precision). Returns error when value does not exist.\n//\n// Example: 1647184410140 bind to 2022-03-13T15:13:30.140000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "start_line": 1274,
      "end_line": 1276,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1274,
        1275,
        1276
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:add",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "add",
      "signature": "(r *Router) add (method, path, name string, h HandlerFunc) *Route",
      "ground_truth": "func (r *Router) add(method, path, name string, h HandlerFunc) *Route {\n\tpath = normalizePathSlash(path)\n\tr.insert(method, path, h)\n\n\troute := \u0026Route{\n\t\tMethod: method,\n\t\tPath:   path,\n\t\tName:   name,\n\t}\n\tr.routes[method+path] = route\n\treturn route\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 196,
      "end_line": 207,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func normalizePathSlash(path string) string {\n\tif path == \"\" {\n\t\tpath = \"/\"\n\t} else if path[0] != '/' {\n\t\tpath = \"/\" + path\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) insert(method, path string, h HandlerFunc) {\n\tpath = normalizePathSlash(path)\n\tpnames := []string{} // Param names\n\tppath := path        // Pristine path\n\n\tif h == nil \u0026\u0026 r.echo.Logger != nil {\n\t\t// FIXME: in future we should return error\n\t\tr.echo.Logger.Errorf(\"Adding route without handler function: %v:%v\", method, path)\n\t}\n\n\tfor i, lcpIndex := 0, len(path); i \u003c lcpIndex; i++ {\n\t\tif path[i] == ':' {\n\t\t\tif i \u003e 0 \u0026\u0026 path[i-1] == '\\\\' {\n\t\t\t\tpath = path[:i-1] + path[i:]\n\t\t\t\ti--\n\t\t\t\tlcpIndex--\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tj := i + 1\n\n\t\t\tr.insertNode(method, path[:i], staticKind, routeMethod{})\n\t\t\tfor ; i \u003c lcpIndex \u0026\u0026 path[i] != '/'; i++ {\n\t\t\t}\n\n\t\t\tpnames = append(pnames, path[j:i])\n\t\t\tpath = path[:j] + path[i:]\n\t\t\ti, lcpIndex = j, len(path)\n\n\t\t\tif i == lcpIndex {\n\t\t\t\t// path node is last fragment of route path. ie. `/users/:id`\n\t\t\t\tr.insertNode(method, path[:i], paramKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n\t\t\t} else {\n\t\t\t\tr.insertNode(method, path[:i], paramKind, routeMethod{})\n\t\t\t}\n\t\t} else if path[i] == '*' {\n\t\t\tr.insertNode(method, path[:i], staticKind, routeMethod{})\n\t\t\tpnames = append(pnames, \"*\")\n\t\t\tr.insertNode(method, path[:i+1], anyKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n\t\t}\n\t}\n\n\tr.insertNode(method, path, staticKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Reverse",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        }
      ],
      "name": "Reverse",
      "signature": "(e *Echo) Reverse (name string, params ...interface{}) string",
      "ground_truth": "func (e *Echo) Reverse(name string, params ...interface{}) string {\n\treturn e.router.Reverse(name, params...)\n}",
      "function_comment": "// Reverse generates a URL from route name and provided parameters.",
      "function_statement": "// Reverse generates a URL from route name and provided parameters.",
      "start_line": 624,
      "end_line": 626,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) Reverse(name string, params ...interface{}) string {\n\turi := new(bytes.Buffer)\n\tln := len(params)\n\tn := 0\n\tfor _, route := range r.routes {\n\t\tif route.Name == name {\n\t\t\tfor i, l := 0, len(route.Path); i \u003c l; i++ {\n\t\t\t\thasBackslash := route.Path[i] == '\\\\'\n\t\t\t\tif hasBackslash \u0026\u0026 i+1 \u003c l \u0026\u0026 route.Path[i+1] == ':' {\n\t\t\t\t\ti++ // backslash before colon escapes that colon. in that case skip backslash\n\t\t\t\t}\n\t\t\t\tif n \u003c ln \u0026\u0026 (route.Path[i] == '*' || (!hasBackslash \u0026\u0026 route.Path[i] == ':')) {\n\t\t\t\t\t// in case of `*` wildcard or `:` (unescaped colon) param we replace everything till next slash or end of path\n\t\t\t\t\tfor ; i \u003c l \u0026\u0026 route.Path[i] != '/'; i++ {\n\t\t\t\t\t}\n\t\t\t\t\turi.WriteString(fmt.Sprintf(\"%v\", params[n]))\n\t\t\t\t\tn++\n\t\t\t\t}\n\t\t\t\tif i \u003c l {\n\t\t\t\t\turi.WriteByte(route.Path[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn uri.String()\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        624,
        625,
        626
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:Routes",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        }
      ],
      "name": "Routes",
      "signature": "(r *Router) Routes () []*Route",
      "ground_truth": "func (r *Router) Routes() []*Route {\n\troutes := make([]*Route, 0, len(r.routes))\n\tfor _, v := range r.routes {\n\t\troutes = append(routes, v)\n\t}\n\treturn routes\n}",
      "function_comment": "// Routes returns the registered routes.",
      "function_statement": "// Routes returns the registered routes.",
      "start_line": 150,
      "end_line": 156,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        150,
        151,
        152,
        153,
        154,
        155
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/decompress.go:Decompress",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressErrorReturned"
        }
      ],
      "name": "Decompress",
      "signature": "Decompress () echo.MiddlewareFunc",
      "ground_truth": "func Decompress() echo.MiddlewareFunc {\n\treturn DecompressWithConfig(DefaultDecompressConfig)\n}",
      "function_comment": "// Decompress decompresses request body based if content encoding type is set to \"gzip\" with default config",
      "function_statement": "// Decompress decompresses request body based if content encoding type is set to \"gzip\" with default config",
      "start_line": 47,
      "end_line": 49,
      "file_path": "./middleware/decompress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "func DecompressWithConfig(config DecompressConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultGzipConfig.Skipper\n\t}\n\tif config.GzipDecompressPool == nil {\n\t\tconfig.GzipDecompressPool = DefaultDecompressConfig.GzipDecompressPool\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\tpool := config.GzipDecompressPool.gzipDecompressPool()\n\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tif c.Request().Header.Get(echo.HeaderContentEncoding) != GZIPEncoding {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\ti := pool.Get()\n\t\t\tgr, ok := i.(*gzip.Reader)\n\t\t\tif !ok || gr == nil {\n\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, i.(error).Error())\n\t\t\t}\n\t\t\tdefer pool.Put(gr)\n\n\t\t\tb := c.Request().Body\n\t\t\tdefer b.Close()\n\n\t\t\tif err := gr.Reset(b); err != nil {\n\t\t\t\tif err == io.EOF { //ignore if body is empty\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// only Close gzip reader if it was set to a proper gzip source otherwise it will panic on close.\n\t\t\tdefer gr.Close()\n\n\t\t\tc.Request().Body = gr\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "DefaultDecompressConfig = DecompressConfig{\n\tSkipper:            DefaultSkipper,\n\tGzipDecompressPool: \u0026DefaultGzipDecompressPool{},\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        47,
        48,
        49
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:New",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_FlushPanics"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "New",
      "signature": "New () (e *Echo)",
      "ground_truth": "func New() (e *Echo) {\n\te = \u0026Echo{\n\t\tfilesystem: createFilesystem(),\n\t\tServer:     new(http.Server),\n\t\tTLSServer:  new(http.Server),\n\t\tAutoTLSManager: autocert.Manager{\n\t\t\tPrompt: autocert.AcceptTOS,\n\t\t},\n\t\tLogger:          log.New(\"echo\"),\n\t\tcolorer:         color.New(),\n\t\tmaxParam:        new(int),\n\t\tListenerNetwork: \"tcp\",\n\t}\n\te.Server.Handler = e\n\te.TLSServer.Handler = e\n\te.HTTPErrorHandler = e.DefaultHTTPErrorHandler\n\te.Binder = \u0026DefaultBinder{}\n\te.JSONSerializer = \u0026DefaultJSONSerializer{}\n\te.Logger.SetLevel(log.ERROR)\n\te.StdLogger = stdLog.New(e.Logger.Output(), e.Logger.Prefix()+\": \", 0)\n\te.pool.New = func() interface{} {\n\t\treturn e.NewContext(nil, nil)\n\t}\n\te.router = NewRouter(e)\n\te.routers = map[string]*Router{}\n\treturn\n}",
      "function_comment": "// New creates an instance of Echo.",
      "function_statement": "// New creates an instance of Echo.",
      "start_line": 361,
      "end_line": 387,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func createFilesystem() filesystem {\n\treturn filesystem{\n\t\tFilesystem: newDefaultFS(),\n\t}\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) DefaultHTTPErrorHandler(err error, c Context) {\n\n\tif c.Response().Committed {\n\t\treturn\n\t}\n\n\the, ok := err.(*HTTPError)\n\tif ok {\n\t\tif he.Internal != nil {\n\t\t\tif herr, ok := he.Internal.(*HTTPError); ok {\n\t\t\t\the = herr\n\t\t\t}\n\t\t}\n\t} else {\n\t\the = \u0026HTTPError{\n\t\t\tCode:    http.StatusInternalServerError,\n\t\t\tMessage: http.StatusText(http.StatusInternalServerError),\n\t\t}\n\t}\n\n\t// Issue #1426\n\tcode := he.Code\n\tmessage := he.Message\n\n\tswitch m := he.Message.(type) {\n\tcase string:\n\t\tif e.Debug {\n\t\t\tmessage = Map{\"message\": m, \"error\": err.Error()}\n\t\t} else {\n\t\t\tmessage = Map{\"message\": m}\n\t\t}\n\tcase json.Marshaler:\n\t\t// do nothing - this type knows how to format itself to JSON\n\tcase error:\n\t\tmessage = Map{\"message\": m.Error()}\n\t}\n\n\t// Send response\n\tif c.Request().Method == http.MethodHead { // Issue #608\n\t\terr = c.NoContent(he.Code)\n\t} else {\n\t\terr = c.JSON(code, message)\n\t}\n\tif err != nil {\n\t\te.Logger.Error(err)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/json.go",
          "code_snippet": "DefaultJSONSerializer struct{}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) NewContext(r *http.Request, w http.ResponseWriter) Context {\n\treturn \u0026context{\n\t\trequest:  r,\n\t\tresponse: NewResponse(w, e),\n\t\tstore:    make(Map),\n\t\techo:     e,\n\t\tpvalues:  make([]string, *e.maxParam),\n\t\thandler:  NotFoundHandler,\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func NewRouter(e *Echo) *Router {\n\treturn \u0026Router{\n\t\ttree: \u0026node{\n\t\t\tmethods: new(routeMethods),\n\t\t},\n\t\troutes: map[string]*Route{},\n\t\techo:   e,\n\t}\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": "v4"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "func New(prefix string) (l *Logger) {\n\tl = \u0026Logger{\n\t\tlevel:    uint32(INFO),\n\t\tskip:     2,\n\t\tprefix:   prefix,\n\t\ttemplate: l.newTemplate(defaultHeader),\n\t\tcolor:    color.New(),\n\t\tbufferPool: sync.Pool{\n\t\t\tNew: func() interface{} {\n\t\t\t\treturn bytes.NewBuffer(make([]byte, 256))\n\t\t\t},\n\t\t},\n\t}\n\tl.initLevels()\n\tl.SetOutput(output())\n\treturn\n}",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func New() (c *Color) {\n\tc = new(Color)\n\tc.SetOutput(colorable.NewColorableStdout())\n\treturn\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "ERROR",
          "ref_module": "log"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/crypto@v0.41.0/acme/autocert/autocert.go",
          "code_snippet": "Manager struct {\n\t// Prompt specifies a callback function to conditionally accept a CA's Terms of Service (TOS).\n\t// The registration may require the caller to agree to the CA's TOS.\n\t// If so, Manager calls Prompt with a TOS URL provided by the CA. Prompt should report\n\t// whether the caller agrees to the terms.\n\t//\n\t// To always accept the terms, the callers can use AcceptTOS.\n\tPrompt func(tosURL string) bool\n\n\t// Cache optionally stores and retrieves previously-obtained certificates\n\t// and other state. If nil, certs will only be cached for the lifetime of\n\t// the Manager. Multiple Managers can share the same Cache.\n\t//\n\t// Using a persistent Cache, such as DirCache, is strongly recommended.\n\tCache Cache\n\n\t// HostPolicy controls which domains the Manager will attempt\n\t// to retrieve new certificates for. It does not affect cached certs.\n\t//\n\t// If non-nil, HostPolicy is called before requesting a new cert.\n\t// If nil, all hosts are currently allowed. This is not recommended,\n\t// as it opens a potential attack where clients connect to a server\n\t// by IP address and pretend to be asking for an incorrect host name.\n\t// Manager will attempt to obtain a certificate for that host, incorrectly,\n\t// eventually reaching the CA's rate limit for certificate requests\n\t// and making it impossible to obtain actual certificates.\n\t//\n\t// See GetCertificate for more details.\n\tHostPolicy HostPolicy\n\n\t// RenewBefore optionally specifies how early certificates should\n\t// be renewed before they expire.\n\t//\n\t// If zero, they're renewed 30 days before expiration.\n\tRenewBefore time.Duration\n\n\t// Client is used to perform low-level operations, such as account registration\n\t// and requesting new certificates.\n\t//\n\t// If Client is nil, a zero-value acme.Client is used with DefaultACMEDirectory\n\t// as the directory endpoint.\n\t// If the Client.Key is nil, a new ECDSA P-256 key is generated and,\n\t// if Cache is not nil, stored in cache.\n\t//\n\t// Mutating the field after the first call of GetCertificate method will have no effect.\n\tClient *acme.Client\n\n\t// Email optionally specifies a contact email address.\n\t// This is used by CAs, such as Let's Encrypt, to notify about problems\n\t// with issued certificates.\n\t//\n\t// If the Client's account key is already registered, Email is not used.\n\tEmail string\n\n\t// ForceRSA used to make the Manager generate RSA certificates. It is now ignored.\n\t//\n\t// Deprecated: the Manager will request the correct type of certificate based\n\t// on what each client supports.\n\tForceRSA bool\n\n\t// ExtraExtensions are used when generating a new CSR (Certificate Request),\n\t// thus allowing customization of the resulting certificate.\n\t// For instance, TLS Feature Extension (RFC 7633) can be used\n\t// to prevent an OCSP downgrade attack.\n\t//\n\t// The field value is passed to crypto/x509.CreateCertificateRequest\n\t// in the template's ExtraExtensions field as is.\n\tExtraExtensions []pkix.Extension\n\n\t// ExternalAccountBinding optionally represents an arbitrary binding to an\n\t// account of the CA to which the ACME server is tied.\n\t// See RFC 8555, Section 7.3.4 for more details.\n\tExternalAccountBinding *acme.ExternalAccountBinding\n\n\tclientMu sync.Mutex\n\tclient   *acme.Client // initialized by acmeClient method\n\n\tstateMu sync.Mutex\n\tstate   map[certKey]*certState\n\n\t// renewal tracks the set of domains currently running renewal timers.\n\trenewalMu sync.Mutex\n\trenewal   map[certKey]*domainRenewal\n\n\t// challengeMu guards tryHTTP01, certTokens and httpTokens.\n\tchallengeMu sync.RWMutex\n\t// tryHTTP01 indicates whether the Manager should try \"http-01\" challenge type\n\t// during the authorization flow.\n\ttryHTTP01 bool\n\t// httpTokens contains response body values for http-01 challenges\n\t// and is keyed by the URL path at which a challenge response is expected\n\t// to be provisioned.\n\t// The entries are stored for the duration of the authorization flow.\n\thttpTokens map[string][]byte\n\t// certTokens contains temporary certificates for tls-alpn-01 challenges\n\t// and is keyed by the domain name which matches the ClientHello server name.\n\t// The entries are stored for the duration of the authorization flow.\n\tcertTokens map[string]*tls.Certificate\n\n\t// nowFunc, if not nil, returns the current time. This may be set for\n\t// testing purposes.\n\tnowFunc func() time.Time\n}",
          "ref_module": "autocert"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/crypto@v0.41.0/acme/autocert/autocert.go",
          "code_snippet": "func AcceptTOS(tosURL string) bool { return true }",
          "ref_module": "autocert"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/log/log.go",
          "code_snippet": "func New(out io.Writer, prefix string, flag int) *Logger {\n\tl := new(Logger)\n\tl.SetOutput(out)\n\tl.SetPrefix(prefix)\n\tl.SetFlags(flag)\n\treturn l\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386
      ],
      "cover_details": {
        "line_cover_rate": 0.9629629629629629
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Get",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStore"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        }
      ],
      "name": "Get",
      "signature": "(c *context) Get (key string) any",
      "ground_truth": "func (c *context) Get(key string) any {\n\tc.lock.RLock()\n\tdefer c.lock.RUnlock()\n\treturn c.store[key]\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 433,
      "end_line": 437,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\tif rw.readerCount.Add(1) \u003c 0 {\n\t\t// A writer is pending, wait for it.\n\t\truntime_SemacquireRWMutexR(\u0026rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(\u0026rw.writerSem))\n\t\trace.Disable()\n\t}\n\tif r := rw.readerCount.Add(-1); r \u003c 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        433,
        434,
        435,
        436,
        437
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:FormValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        }
      ],
      "name": "FormValue",
      "signature": "(c *context) FormValue (name string) string",
      "ground_truth": "func (c *context) FormValue(name string) string {\n\treturn c.request.FormValue(name)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 390,
      "end_line": 392,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) FormValue(key string) string {\n\tif r.Form == nil {\n\t\tr.ParseMultipartForm(defaultMaxMemory)\n\t}\n\tif vs := r.Form[key]; len(vs) \u003e 0 {\n\t\treturn vs[0]\n\t}\n\treturn \"\"\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        390,
        391,
        392
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:WrapMiddleware",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        }
      ],
      "name": "WrapMiddleware",
      "signature": "WrapMiddleware (m func(http.Handler) http.Handler) MiddlewareFunc",
      "ground_truth": "func WrapMiddleware(m func(http.Handler) http.Handler) MiddlewareFunc {\n\treturn func(next HandlerFunc) HandlerFunc {\n\t\treturn func(c Context) (err error) {\n\t\t\tm(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tc.SetRequest(r)\n\t\t\t\tc.SetResponse(NewResponse(w, c.Echo()))\n\t\t\t\terr = next(c)\n\t\t\t})).ServeHTTP(c.Response(), c.Request())\n\t\t\treturn\n\t\t}\n\t}\n}",
      "function_comment": "// WrapMiddleware wraps `func(http.Handler) http.Handler` into `echo.MiddlewareFunc`",
      "function_statement": "// WrapMiddleware wraps `func(http.Handler) http.Handler` into `echo.MiddlewareFunc`",
      "start_line": 932,
      "end_line": 943,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func NewResponse(w http.ResponseWriter, e *Echo) (r *Response) {\n\treturn \u0026Response{Writer: w, echo: e}\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "HandlerFunc func(ResponseWriter, *Request)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        932,
        933,
        934,
        935,
        936,
        937,
        938,
        939,
        940
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Float64",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        }
      ],
      "name": "Float64",
      "signature": "(b *ValueBinder) Float64 (sourceParam string, dest *float64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Float64(sourceParam string, dest *float64) *ValueBinder {\n\treturn b.floatValue(sourceParam, dest, 64, false)\n}",
      "function_comment": "// Float64 binds parameter to float64 variable",
      "function_statement": "// Float64 binds parameter to float64 variable",
      "start_line": 975,
      "end_line": 977,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.float(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        975,
        976,
        977
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:JSONUnmarshaler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        }
      ],
      "name": "JSONUnmarshaler",
      "signature": "(b *ValueBinder) JSONUnmarshaler (sourceParam string, dest json.Unmarshaler) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) JSONUnmarshaler(sourceParam string, dest json.Unmarshaler) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\ttmp := b.ValueFunc(sourceParam)\n\tif tmp == \"\" {\n\t\treturn b\n\t}\n\n\tif err := dest.UnmarshalJSON([]byte(tmp)); err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"failed to bind field value to json.Unmarshaler interface\", err))\n\t}\n\treturn b\n}",
      "function_comment": "// JSONUnmarshaler binds parameter to destination implementing json.Unmarshaler interface",
      "function_statement": "// JSONUnmarshaler binds parameter to destination implementing json.Unmarshaler interface",
      "start_line": 332,
      "end_line": 346,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/decode.go",
          "code_snippet": "Unmarshaler interface {\n\tUnmarshalJSON([]byte) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        332,
        333,
        334,
        335,
        337,
        338,
        339,
        340,
        342,
        343,
        344,
        345
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:TRACE",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        }
      ],
      "name": "TRACE",
      "signature": "(e *Echo) TRACE (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) TRACE(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodTrace, path, h, m...)\n}",
      "function_comment": "// TRACE registers a new TRACE route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// TRACE registers a new TRACE route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 526,
      "end_line": 528,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodTrace   = \"TRACE\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        526,
        527,
        528
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rate_limiter.go:RateLimiterWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter_panicBehaviour"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipperNoSkip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultDenyHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_beforeFunc"
        }
      ],
      "name": "RateLimiterWithConfig",
      "signature": "RateLimiterWithConfig (config RateLimiterConfig) echo.MiddlewareFunc",
      "ground_truth": "func RateLimiterWithConfig(config RateLimiterConfig) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRateLimiterConfig.Skipper\n\t}\n\tif config.IdentifierExtractor == nil {\n\t\tconfig.IdentifierExtractor = DefaultRateLimiterConfig.IdentifierExtractor\n\t}\n\tif config.ErrorHandler == nil {\n\t\tconfig.ErrorHandler = DefaultRateLimiterConfig.ErrorHandler\n\t}\n\tif config.DenyHandler == nil {\n\t\tconfig.DenyHandler = DefaultRateLimiterConfig.DenyHandler\n\t}\n\tif config.Store == nil {\n\t\tpanic(\"Store configuration must be provided\")\n\t}\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t\tif config.BeforeFunc != nil {\n\t\t\t\tconfig.BeforeFunc(c)\n\t\t\t}\n\n\t\t\tidentifier, err := config.IdentifierExtractor(c)\n\t\t\tif err != nil {\n\t\t\t\tc.Error(config.ErrorHandler(c, err))\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tif allow, err := config.Store.Allow(identifier); !allow {\n\t\t\t\tc.Error(config.DenyHandler(c, identifier, err))\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "/*\nRateLimiterWithConfig returns a rate limiting middleware\n\n\te := echo.New()\n\n\tconfig := middleware.RateLimiterConfig{\n\t\tSkipper: DefaultSkipper,\n\t\tStore: middleware.NewRateLimiterMemoryStore(\n\t\t\tmiddleware.RateLimiterMemoryStoreConfig{Rate: 10, Burst: 30, ExpiresIn: 3 * time.Minute}\n\t\t)\n\t\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\t\tid := ctx.RealIP()\n\t\t\treturn id, nil\n\t\t},\n\t\tErrorHandler: func(context echo.Context, err error) error {\n\t\t\treturn context.JSON(http.StatusTooManyRequests, nil)\n\t\t},\n\t\tDenyHandler: func(context echo.Context, identifier string) error {\n\t\t\treturn context.JSON(http.StatusForbidden, nil)\n\t\t},\n\t}\n\n\te.GET(\"/rate-limited\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"test\")\n\t}, middleware.RateLimiterWithConfig(config))\n*/",
      "function_statement": "/*\nRateLimiterWithConfig returns a rate limiting middleware\n\n\te := echo.New()\n\n\tconfig := middleware.RateLimiterConfig{\n\t\tSkipper: DefaultSkipper,\n\t\tStore: middleware.NewRateLimiterMemoryStore(\n\t\t\tmiddleware.RateLimiterMemoryStoreConfig{Rate: 10, Burst: 30, ExpiresIn: 3 * time.Minute}\n\t\t)\n\t\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\t\tid := ctx.RealIP()\n\t\t\treturn id, nil\n\t\t},\n\t\tErrorHandler: func(context echo.Context, err error) error {\n\t\t\treturn context.JSON(http.StatusTooManyRequests, nil)\n\t\t},\n\t\tDenyHandler: func(context echo.Context, identifier string) error {\n\t\t\treturn context.JSON(http.StatusForbidden, nil)\n\t\t},\n\t}\n\n\te.GET(\"/rate-limited\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"test\")\n\t}, middleware.RateLimiterWithConfig(config))\n*/",
      "start_line": 111,
      "end_line": 149,
      "file_path": "./middleware/rate_limiter.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterConfig struct {\n\tSkipper    Skipper\n\tBeforeFunc BeforeFunc\n\t// IdentifierExtractor uses echo.Context to extract the identifier for a visitor\n\tIdentifierExtractor Extractor\n\t// Store defines a store for the rate limiter\n\tStore RateLimiterStore\n\t// ErrorHandler provides a handler to be called when IdentifierExtractor returns an error\n\tErrorHandler func(context echo.Context, err error) error\n\t// DenyHandler provides a handler to be called when RateLimiter denies access\n\tDenyHandler func(context echo.Context, identifier string, err error) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "DefaultRateLimiterConfig = RateLimiterConfig{\n\tSkipper: DefaultSkipper,\n\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\tid := ctx.RealIP()\n\t\treturn id, nil\n\t},\n\tErrorHandler: func(context echo.Context, err error) error {\n\t\treturn \u0026echo.HTTPError{\n\t\t\tCode:     ErrExtractorError.Code,\n\t\t\tMessage:  ErrExtractorError.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n\tDenyHandler: func(context echo.Context, identifier string, err error) error {\n\t\treturn \u0026echo.HTTPError{\n\t\t\tCode:     ErrRateLimitExceeded.Code,\n\t\t\tMessage:  ErrRateLimitExceeded.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterStore interface {\n\t// Stores for the rate limiter have to implement the Allow method\n\tAllow(identifier string) (bool, error)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        136,
        137,
        138,
        139,
        140,
        142,
        143,
        144,
        145,
        146
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:RouteNotFound",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "RouteNotFound",
      "signature": "(g *Group) RouteNotFound (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) RouteNotFound(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(RouteNotFound, path, h, m...)\n}",
      "function_comment": "// RouteNotFound implements `Echo#RouteNotFound()` for sub-routes within the Group.\n//\n// Example: `g.RouteNotFound(\"/*\", func(c echo.Context) error { return c.NoContent(http.StatusNotFound) })`",
      "function_statement": "// RouteNotFound implements `Echo#RouteNotFound()` for sub-routes within the Group.\n//\n// Example: `g.RouteNotFound(\"/*\", func(c echo.Context) error { return c.NoContent(http.StatusNotFound) })`",
      "start_line": 116,
      "end_line": 118,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "RouteNotFound = \"echo_route_not_found\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        116,
        117,
        118
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:Hijack",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanHijack"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanNotHijack"
        }
      ],
      "name": "Hijack",
      "signature": "(w *bodyDumpResponseWriter) Hijack () (net.Conn, *bufio.ReadWriter, error)",
      "ground_truth": "func (w *bodyDumpResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n\treturn http.NewResponseController(w.ResponseWriter).Hijack()\n}",
      "function_comment": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "function_statement": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "start_line": 107,
      "end_line": 109,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "bodyDumpResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Conn interface {\n\t// Read reads data from the connection.\n\t// Read can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetReadDeadline.\n\tRead(b []byte) (n int, err error)\n\n\t// Write writes data to the connection.\n\t// Write can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetWriteDeadline.\n\tWrite(b []byte) (n int, err error)\n\n\t// Close closes the connection.\n\t// Any blocked Read or Write operations will be unblocked and return errors.\n\tClose() error\n\n\t// LocalAddr returns the local network address, if known.\n\tLocalAddr() Addr\n\n\t// RemoteAddr returns the remote network address, if known.\n\tRemoteAddr() Addr\n\n\t// SetDeadline sets the read and write deadlines associated\n\t// with the connection. It is equivalent to calling both\n\t// SetReadDeadline and SetWriteDeadline.\n\t//\n\t// A deadline is an absolute time after which I/O operations\n\t// fail instead of blocking. The deadline applies to all future\n\t// and pending I/O, not just the immediately following call to\n\t// Read or Write. After a deadline has been exceeded, the\n\t// connection can be refreshed by setting a deadline in the future.\n\t//\n\t// If the deadline is exceeded a call to Read or Write or to other\n\t// I/O methods will return an error that wraps os.ErrDeadlineExceeded.\n\t// This can be tested using errors.Is(err, os.ErrDeadlineExceeded).\n\t// The error's Timeout method will return true, but note that there\n\t// are other possible errors for which the Timeout method will\n\t// return true even if the deadline has not been exceeded.\n\t//\n\t// An idle timeout can be implemented by repeatedly extending\n\t// the deadline after successful Read or Write calls.\n\t//\n\t// A zero value for t means I/O operations will not time out.\n\tSetDeadline(t time.Time) error\n\n\t// SetReadDeadline sets the deadline for future Read calls\n\t// and any currently-blocked Read call.\n\t// A zero value for t means Read will not time out.\n\tSetReadDeadline(t time.Time) error\n\n\t// SetWriteDeadline sets the deadline for future Write calls\n\t// and any currently-blocked Write call.\n\t// Even if write times out, it may return n \u003e 0, indicating that\n\t// some of the data was successfully written.\n\t// A zero value for t means Write will not time out.\n\tSetWriteDeadline(t time.Time) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bufio/bufio.go",
          "code_snippet": "ReadWriter struct {\n\t*Reader\n\t*Writer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func (c *ResponseController) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n\trw := c.rw\n\tfor {\n\t\tswitch t := rw.(type) {\n\t\tcase Hijacker:\n\t\t\treturn t.Hijack()\n\t\tcase rwUnwrapper:\n\t\t\trw = t.Unwrap()\n\t\tdefault:\n\t\t\treturn nil, nil, errNotSupported()\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func NewResponseController(rw ResponseWriter) *ResponseController {\n\treturn \u0026ResponseController{rw}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        107,
        108,
        109
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:normalizePathSlash",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "normalizePathSlash",
      "signature": "normalizePathSlash (path string) string",
      "ground_truth": "func normalizePathSlash(path string) string {\n\tif path == \"\" {\n\t\tpath = \"/\"\n\t} else if path[0] != '/' {\n\t\tpath = \"/\" + path\n\t}\n\treturn path\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 187,
      "end_line": 194,
      "file_path": "./router.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        187,
        188,
        189,
        190,
        191,
        192,
        193
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:File",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "File",
      "signature": "(g *Group) File (path, file string)",
      "ground_truth": "func (g *Group) File(path, file string) {\n\tg.file(path, file, g.GET)\n}",
      "function_comment": "// File implements `Echo#File()` for sub-routes within the Group.",
      "function_statement": "// File implements `Echo#File()` for sub-routes within the Group.",
      "start_line": 109,
      "end_line": 111,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (common) file(path, file string, get func(string, HandlerFunc, ...MiddlewareFunc) *Route,\n\tm ...MiddlewareFunc) *Route {\n\treturn get(path, func(c Context) error {\n\t\treturn c.File(file)\n\t}, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) GET(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodGet, path, h, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        109,
        110,
        111
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/static.go:StaticWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic_CustomFS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic"
        }
      ],
      "name": "StaticWithConfig",
      "signature": "StaticWithConfig (config StaticConfig) echo.MiddlewareFunc",
      "ground_truth": "func StaticWithConfig(config StaticConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Root == \"\" {\n\t\tconfig.Root = \".\" // For security we want to restrict to CWD.\n\t}\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultStaticConfig.Skipper\n\t}\n\tif config.Index == \"\" {\n\t\tconfig.Index = DefaultStaticConfig.Index\n\t}\n\tif config.Filesystem == nil {\n\t\tconfig.Filesystem = http.Dir(config.Root)\n\t\tconfig.Root = \".\"\n\t}\n\n\t// Index template\n\tt, tErr := template.New(\"index\").Parse(html)\n\tif tErr != nil {\n\t\tpanic(fmt.Errorf(\"echo: %w\", tErr))\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tp := c.Request().URL.Path\n\t\t\tif strings.HasSuffix(c.Path(), \"*\") { // When serving from a group, e.g. `/static*`.\n\t\t\t\tp = c.Param(\"*\")\n\t\t\t}\n\t\t\tp, err = url.PathUnescape(p)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tname := path.Join(config.Root, path.Clean(\"/\"+p)) // \"/\"+ for security\n\n\t\t\tif config.IgnoreBase {\n\t\t\t\troutePath := path.Base(strings.TrimRight(c.Path(), \"/*\"))\n\t\t\t\tbaseURLPath := path.Base(p)\n\t\t\t\tif baseURLPath == routePath {\n\t\t\t\t\ti := strings.LastIndex(name, routePath)\n\t\t\t\t\tname = name[:i] + strings.Replace(name[i:], routePath, \"\", 1)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfile, err := config.Filesystem.Open(name)\n\t\t\tif err != nil {\n\t\t\t\tif !isIgnorableOpenFileError(err) {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\t// file with that path did not exist, so we continue down in middleware/handler chain, hoping that we end up in\n\t\t\t\t// handler that is meant to handle this request\n\t\t\t\tif err = next(c); err == nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\tvar he *echo.HTTPError\n\t\t\t\tif !(errors.As(err, \u0026he) \u0026\u0026 config.HTML5 \u0026\u0026 he.Code == http.StatusNotFound) {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\tfile, err = config.Filesystem.Open(path.Join(config.Root, config.Index))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdefer file.Close()\n\n\t\t\tinfo, err := file.Stat()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif info.IsDir() {\n\t\t\t\tindex, err := config.Filesystem.Open(path.Join(name, config.Index))\n\t\t\t\tif err != nil {\n\t\t\t\t\tif config.Browse {\n\t\t\t\t\t\treturn listDir(t, name, file, c.Response())\n\t\t\t\t\t}\n\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\n\t\t\t\tdefer index.Close()\n\n\t\t\t\tinfo, err = index.Stat()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\treturn serveFile(c, index, info)\n\t\t\t}\n\n\t\t\treturn serveFile(c, file, info)\n\t\t}\n\t}\n}",
      "function_comment": "// StaticWithConfig returns a Static middleware with config.\n// See `Static()`.",
      "function_statement": "// StaticWithConfig returns a Static middleware with config.\n// See `Static()`.",
      "start_line": 141,
      "end_line": 241,
      "file_path": "./middleware/static.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/static.go",
          "code_snippet": "StaticConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Root directory from where the static content is served.\n\t// Required.\n\tRoot string `yaml:\"root\"`\n\n\t// Index file for serving a directory.\n\t// Optional. Default value \"index.html\".\n\tIndex string `yaml:\"index\"`\n\n\t// Enable HTML5 mode by forwarding all not-found requests to root so that\n\t// SPA (single-page application) can handle the routing.\n\t// Optional. Default value false.\n\tHTML5 bool `yaml:\"html5\"`\n\n\t// Enable directory browsing.\n\t// Optional. Default value false.\n\tBrowse bool `yaml:\"browse\"`\n\n\t// Enable ignoring of the base of the URL path.\n\t// Example: when assigning a static middleware to a non root path group,\n\t// the filesystem path is not doubled\n\t// Optional. Default value false.\n\tIgnoreBase bool `yaml:\"ignoreBase\"`\n\n\t// Filesystem provides access to the static content.\n\t// Optional. Defaults to http.Dir(config.Root)\n\tFilesystem http.FileSystem `yaml:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/static.go",
          "code_snippet": "DefaultStaticConfig = StaticConfig{\n\tSkipper: DefaultSkipper,\n\tIndex:   \"index.html\",\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/static.go",
          "code_snippet": "html = `\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"UTF-8\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n  \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n  \u003ctitle\u003e{{ .Name }}\u003c/title\u003e\n  \u003cstyle\u003e\n    body {\n\t\t\tfont-family: Menlo, Consolas, monospace;\n\t\t\tpadding: 48px;\n\t\t}\n\t\theader {\n\t\t\tpadding: 4px 16px;\n\t\t\tfont-size: 24px;\n\t\t}\n    ul {\n\t\t\tlist-style-type: none;\n\t\t\tmargin: 0;\n    \tpadding: 20px 0 0 0;\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n    }\n    li {\n\t\t\twidth: 300px;\n\t\t\tpadding: 16px;\n\t\t}\n\t\tli a {\n\t\t\tdisplay: block;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t\ttext-decoration: none;\n\t\t\ttransition: opacity 0.25s;\n\t\t}\n\t\tli span {\n\t\t\tcolor: #707070;\n\t\t\tfont-size: 12px;\n\t\t}\n\t\tli a:hover {\n\t\t\topacity: 0.50;\n\t\t}\n\t\t.dir {\n\t\t\tcolor: #E91E63;\n\t\t}\n\t\t.file {\n\t\t\tcolor: #673AB7;\n\t\t}\n  \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\t\u003cheader\u003e\n\t\t{{ .Name }}\n\t\u003c/header\u003e\n\t\u003cul\u003e\n\t\t{{ range .Files }}\n\t\t\u003cli\u003e\n\t\t{{ if .Dir }}\n\t\t\t{{ $name := print .Name \"/\" }}\n\t\t\t\u003ca class=\"dir\" href=\"{{ $name }}\"\u003e{{ $name }}\u003c/a\u003e\n\t\t\t{{ else }}\n\t\t\t\u003ca class=\"file\" href=\"{{ .Name }}\"\u003e{{ .Name }}\u003c/a\u003e\n\t\t\t\u003cspan\u003e{{ .Size }}\u003c/span\u003e\n\t\t{{ end }}\n\t\t\u003c/li\u003e\n\t\t{{ end }}\n  \u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n`",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/static_other.go",
          "code_snippet": "func isIgnorableOpenFileError(err error) bool {\n\treturn os.IsNotExist(err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/static.go",
          "code_snippet": "func listDir(t *template.Template, name string, dir http.File, res *echo.Response) (err error) {\n\tfiles, err := dir.Readdir(-1)\n\tif err != nil {\n\t\treturn\n\t}\n\n\t// Create directory index\n\tres.Header().Set(echo.HeaderContentType, echo.MIMETextHTMLCharsetUTF8)\n\tdata := struct {\n\t\tName  string\n\t\tFiles []interface{}\n\t}{\n\t\tName: name,\n\t}\n\tfor _, f := range files {\n\t\tdata.Files = append(data.Files, struct {\n\t\t\tName string\n\t\t\tDir  bool\n\t\t\tSize string\n\t\t}{f.Name(), f.IsDir(), bytes.Format(f.Size())})\n\t}\n\treturn t.Execute(res, data)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/static.go",
          "code_snippet": "func serveFile(c echo.Context, file http.File, info os.FileInfo) error {\n\thttp.ServeContent(c.Response(), c.Request(), info.Name(), info.ModTime(), file)\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "Dir string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/html/template/template.go",
          "code_snippet": "func (t *Template) Parse(text string) (*Template, error) {\n\tif err := t.checkCanParse(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tret, err := t.text.Parse(text)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// In general, all the named templates might have changed underfoot.\n\t// Regardless, some new ones may have been defined.\n\t// The template.Template set has been updated; update ours.\n\tt.nameSpace.mu.Lock()\n\tdefer t.nameSpace.mu.Unlock()\n\tfor _, v := range ret.Templates() {\n\t\tname := v.Name()\n\t\ttmpl := t.set[name]\n\t\tif tmpl == nil {\n\t\t\ttmpl = t.new(name)\n\t\t}\n\t\ttmpl.text = v\n\t\ttmpl.Tree = v.Tree\n\t}\n\treturn t, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/html/template/template.go",
          "code_snippet": "func New(name string) *Template {\n\tns := \u0026nameSpace{set: make(map[string]*Template)}\n\tns.esc = makeEscaper(ns)\n\ttmpl := \u0026Template{\n\t\tnil,\n\t\ttemplate.New(name),\n\t\tnil,\n\t\tns,\n\t}\n\ttmpl.set[name] = tmpl\n\treturn tmpl\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasSuffix(s, suffix string) bool {\n\treturn stringslite.HasSuffix(s, suffix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func PathUnescape(s string) (string, error) {\n\treturn unescape(s, encodePathSegment)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/path.go",
          "code_snippet": "func Join(elem ...string) string {\n\tsize := 0\n\tfor _, e := range elem {\n\t\tsize += len(e)\n\t}\n\tif size == 0 {\n\t\treturn \"\"\n\t}\n\tbuf := make([]byte, 0, size+len(elem)-1)\n\tfor _, e := range elem {\n\t\tif len(buf) \u003e 0 || e != \"\" {\n\t\t\tif len(buf) \u003e 0 {\n\t\t\t\tbuf = append(buf, '/')\n\t\t\t}\n\t\t\tbuf = append(buf, e...)\n\t\t}\n\t}\n\treturn Clean(string(buf))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/path.go",
          "code_snippet": "func Clean(path string) string {\n\tif path == \"\" {\n\t\treturn \".\"\n\t}\n\n\trooted := path[0] == '/'\n\tn := len(path)\n\n\t// Invariants:\n\t//\treading from path; r is index of next byte to process.\n\t//\twriting to buf; w is index of next byte to write.\n\t//\tdotdot is index in buf where .. must stop, either because\n\t//\t\tit is the leading slash or it is a leading ../../.. prefix.\n\tout := lazybuf{s: path}\n\tr, dotdot := 0, 0\n\tif rooted {\n\t\tout.append('/')\n\t\tr, dotdot = 1, 1\n\t}\n\n\tfor r \u003c n {\n\t\tswitch {\n\t\tcase path[r] == '/':\n\t\t\t// empty path element\n\t\t\tr++\n\t\tcase path[r] == '.' \u0026\u0026 (r+1 == n || path[r+1] == '/'):\n\t\t\t// . element\n\t\t\tr++\n\t\tcase path[r] == '.' \u0026\u0026 path[r+1] == '.' \u0026\u0026 (r+2 == n || path[r+2] == '/'):\n\t\t\t// .. element: remove to last /\n\t\t\tr += 2\n\t\t\tswitch {\n\t\t\tcase out.w \u003e dotdot:\n\t\t\t\t// can backtrack\n\t\t\t\tout.w--\n\t\t\t\tfor out.w \u003e dotdot \u0026\u0026 out.index(out.w) != '/' {\n\t\t\t\t\tout.w--\n\t\t\t\t}\n\t\t\tcase !rooted:\n\t\t\t\t// cannot backtrack, but not rooted, so append .. element.\n\t\t\t\tif out.w \u003e 0 {\n\t\t\t\t\tout.append('/')\n\t\t\t\t}\n\t\t\t\tout.append('.')\n\t\t\t\tout.append('.')\n\t\t\t\tdotdot = out.w\n\t\t\t}\n\t\tdefault:\n\t\t\t// real path element.\n\t\t\t// add slash if needed\n\t\t\tif rooted \u0026\u0026 out.w != 1 || !rooted \u0026\u0026 out.w != 0 {\n\t\t\t\tout.append('/')\n\t\t\t}\n\t\t\t// copy element\n\t\t\tfor ; r \u003c n \u0026\u0026 path[r] != '/'; r++ {\n\t\t\t\tout.append(path[r])\n\t\t\t}\n\t\t}\n\t}\n\n\t// Turn empty string into \".\"\n\tif out.w == 0 {\n\t\treturn \".\"\n\t}\n\n\treturn out.string()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/path.go",
          "code_snippet": "func Base(path string) string {\n\tif path == \"\" {\n\t\treturn \".\"\n\t}\n\t// Strip trailing slashes.\n\tfor len(path) \u003e 0 \u0026\u0026 path[len(path)-1] == '/' {\n\t\tpath = path[0 : len(path)-1]\n\t}\n\t// Find the last element\n\tif i := bytealg.LastIndexByteString(path, '/'); i \u003e= 0 {\n\t\tpath = path[i+1:]\n\t}\n\t// If empty now, it had only slashes.\n\tif path == \"\" {\n\t\treturn \"/\"\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimRight(s, cutset string) string {\n\tif s == \"\" || cutset == \"\" {\n\t\treturn s\n\t}\n\tif len(cutset) == 1 \u0026\u0026 cutset[0] \u003c utf8.RuneSelf {\n\t\treturn trimRightByte(s, cutset[0])\n\t}\n\tif as, ok := makeASCIISet(cutset); ok {\n\t\treturn trimRightASCII(s, \u0026as)\n\t}\n\treturn trimRightUnicode(s, cutset)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func LastIndex(s, substr string) int {\n\tn := len(substr)\n\tswitch {\n\tcase n == 0:\n\t\treturn len(s)\n\tcase n == 1:\n\t\treturn bytealg.LastIndexByteString(s, substr[0])\n\tcase n == len(s):\n\t\tif substr == s {\n\t\t\treturn 0\n\t\t}\n\t\treturn -1\n\tcase n \u003e len(s):\n\t\treturn -1\n\t}\n\t// Rabin-Karp search from the end of the string\n\thashss, pow := bytealg.HashStrRev(substr)\n\tlast := len(s) - n\n\tvar h uint32\n\tfor i := len(s) - 1; i \u003e= last; i-- {\n\t\th = h*bytealg.PrimeRK + uint32(s[i])\n\t}\n\tif h == hashss \u0026\u0026 s[last:] == substr {\n\t\treturn last\n\t}\n\tfor i := last - 1; i \u003e= 0; i-- {\n\t\th *= bytealg.PrimeRK\n\t\th += uint32(s[i])\n\t\th -= pow * uint32(s[i+n])\n\t\tif h == hashss \u0026\u0026 s[i:i+n] == substr {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Replace(s, old, new string, n int) string {\n\tif old == new || n == 0 {\n\t\treturn s // avoid allocation\n\t}\n\n\t// Compute number of replacements.\n\tif m := Count(s, old); m == 0 {\n\t\treturn s // avoid allocation\n\t} else if n \u003c 0 || m \u003c n {\n\t\tn = m\n\t}\n\n\t// Apply replacements to buffer.\n\tvar b Builder\n\tb.Grow(len(s) + n*(len(new)-len(old)))\n\tstart := 0\n\tfor i := 0; i \u003c n; i++ {\n\t\tj := start\n\t\tif len(old) == 0 {\n\t\t\tif i \u003e 0 {\n\t\t\t\t_, wid := utf8.DecodeRuneInString(s[start:])\n\t\t\t\tj += wid\n\t\t\t}\n\t\t} else {\n\t\t\tj += Index(s[start:], old)\n\t\t}\n\t\tb.WriteString(s[start:j])\n\t\tb.WriteString(new)\n\t\tstart = j + len(old)\n\t}\n\tb.WriteString(s[start:])\n\treturn b.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "FileSystem interface {\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusNotFound                     = 404",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/wrap.go",
          "code_snippet": "func As(err error, target any) bool {\n\tif err == nil {\n\t\treturn false\n\t}\n\tif target == nil {\n\t\tpanic(\"errors: target cannot be nil\")\n\t}\n\tval := reflectlite.ValueOf(target)\n\ttyp := val.Type()\n\tif typ.Kind() != reflectlite.Ptr || val.IsNil() {\n\t\tpanic(\"errors: target must be a non-nil pointer\")\n\t}\n\ttargetType := typ.Elem()\n\tif targetType.Kind() != reflectlite.Interface \u0026\u0026 !targetType.Implements(errorType) {\n\t\tpanic(\"errors: *target must be interface or implement error\")\n\t}\n\treturn as(err, target, val, targetType)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "File interface {\n\tio.Closer\n\tio.Reader\n\tio.Seeker\n\tReaddir(count int) ([]fs.FileInfo, error)\n\tStat() (fs.FileInfo, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FileInfo interface {\n\tName() string       // base name of the file\n\tSize() int64        // length in bytes for regular files; system-dependent for others\n\tMode() FileMode     // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool        // abbreviation for Mode().IsDir()\n\tSys() any           // underlying data source (can return nil)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        141,
        142,
        143,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        158,
        159,
        163,
        164,
        165,
        169,
        170,
        171,
        172,
        173,
        174,
        177,
        178,
        179,
        180,
        181,
        182,
        188,
        189,
        190,
        196,
        197,
        198,
        200,
        201,
        202,
        203,
        205,
        206,
        207,
        208,
        211,
        212,
        213,
        214,
        218,
        219,
        220,
        221,
        222,
        223,
        228,
        229,
        230,
        231,
        235,
        238
      ],
      "cover_details": {
        "line_cover_rate": 0.594059405940594
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Blob",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "Blob",
      "signature": "(c *context) Blob (code int, contentType string, b []byte) (err error)",
      "ground_truth": "func (c *context) Blob(code int, contentType string, b []byte) (err error) {\n\tc.writeContentType(contentType)\n\tc.response.WriteHeader(code)\n\t_, err = c.response.Write(b)\n\treturn\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 576,
      "end_line": 581,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Write(b []byte) (n int, err error) {\n\tif !r.Committed {\n\t\tif r.Status == 0 {\n\t\t\tr.Status = http.StatusOK\n\t\t}\n\t\tr.WriteHeader(r.Status)\n\t}\n\tn, err = r.Writer.Write(b)\n\tr.Size += int64(n)\n\tfor _, fn := range r.afterFuncs {\n\t\tfn()\n\t}\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        576,
        577,
        578,
        579,
        580,
        581
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:Proxy",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestFailNextTarget"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestTargetProvider"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        }
      ],
      "name": "Proxy",
      "signature": "Proxy (balancer ProxyBalancer) echo.MiddlewareFunc",
      "ground_truth": "func Proxy(balancer ProxyBalancer) echo.MiddlewareFunc {\n\tc := DefaultProxyConfig\n\tc.Balancer = balancer\n\treturn ProxyWithConfig(c)\n}",
      "function_comment": "// Proxy returns a Proxy middleware.\n//\n// Proxy middleware forwards the request to upstream server using a configured load balancing technique.",
      "function_statement": "// Proxy returns a Proxy middleware.\n//\n// Proxy middleware forwards the request to upstream server using a configured load balancing technique.",
      "start_line": 287,
      "end_line": 291,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyBalancer interface {\n\tAddTarget(*ProxyTarget) bool\n\tRemoveTarget(string) bool\n\tNext(echo.Context) *ProxyTarget\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "DefaultProxyConfig = ProxyConfig{\n\tSkipper:    DefaultSkipper,\n\tContextKey: \"target\",\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Balancer defines a load balancing technique.\n\t// Required.\n\tBalancer ProxyBalancer\n\n\t// RetryCount defines the number of times a failed proxied request should be retried\n\t// using the next available ProxyTarget. Defaults to 0, meaning requests are never retried.\n\tRetryCount int\n\n\t// RetryFilter defines a function used to determine if a failed request to a\n\t// ProxyTarget should be retried. The RetryFilter will only be called when the number\n\t// of previous retries is less than RetryCount. If the function returns true, the\n\t// request will be retried. The provided error indicates the reason for the request\n\t// failure. When the ProxyTarget is unavailable, the error will be an instance of\n\t// echo.HTTPError with a Code of http.StatusBadGateway. In all other cases, the error\n\t// will indicate an internal error in the Proxy middleware. When a RetryFilter is not\n\t// specified, all requests that fail with http.StatusBadGateway will be retried. A custom\n\t// RetryFilter can be provided to only retry specific requests. Note that RetryFilter is\n\t// only called when the request to the target fails, or an internal error in the Proxy\n\t// middleware has occurred. Successful requests that return a non-200 response code cannot\n\t// be retried.\n\tRetryFilter func(c echo.Context, e error) bool\n\n\t// ErrorHandler defines a function which can be used to return custom errors from\n\t// the Proxy middleware. ErrorHandler is only invoked when there has been\n\t// either an internal error in the Proxy middleware or the ProxyTarget is\n\t// unavailable. Due to the way requests are proxied, ErrorHandler is not invoked\n\t// when a ProxyTarget returns a non-200 response. In these cases, the response\n\t// is already written so errors cannot be modified. ErrorHandler is only\n\t// invoked after all retry attempts have been exhausted.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n\t// retrieved by index e.g. $1, $2 and so on.\n\t// Examples:\n\t// \"/old\":              \"/new\",\n\t// \"/api/*\":            \"/$1\",\n\t// \"/js/*\":             \"/public/javascripts/$1\",\n\t// \"/users/*/orders/*\": \"/user/$1/order/$2\",\n\tRewrite map[string]string\n\n\t// RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n\t// Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"^/old/[0.9]+/\":     \"/new\",\n\t// \"^/api/.+?/(.*)\":    \"/v2/$1\",\n\tRegexRewrite map[*regexp.Regexp]string\n\n\t// Context key to store selected ProxyTarget into context.\n\t// Optional. Default value \"target\".\n\tContextKey string\n\n\t// To customize the transport to remote.\n\t// Examples: If custom TLS certificates are required.\n\tTransport http.RoundTripper\n\n\t// ModifyResponse defines function to modify response from ProxyTarget.\n\tModifyResponse func(*http.Response) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "func ProxyWithConfig(config ProxyConfig) echo.MiddlewareFunc {\n\tif config.Balancer == nil {\n\t\tpanic(\"echo: proxy middleware requires balancer\")\n\t}\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultProxyConfig.Skipper\n\t}\n\tif config.RetryFilter == nil {\n\t\tconfig.RetryFilter = func(c echo.Context, e error) bool {\n\t\t\tif httpErr, ok := e.(*echo.HTTPError); ok {\n\t\t\t\treturn httpErr.Code == http.StatusBadGateway\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t}\n\tif config.ErrorHandler == nil {\n\t\tconfig.ErrorHandler = func(c echo.Context, err error) error {\n\t\t\treturn err\n\t\t}\n\t}\n\tif config.Rewrite != nil {\n\t\tif config.RegexRewrite == nil {\n\t\t\tconfig.RegexRewrite = make(map[*regexp.Regexp]string)\n\t\t}\n\t\tfor k, v := range rewriteRulesRegex(config.Rewrite) {\n\t\t\tconfig.RegexRewrite[k] = v\n\t\t}\n\t}\n\n\tprovider, isTargetProvider := config.Balancer.(TargetProvider)\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\tif err := rewriteURL(config.RegexRewrite, req); err != nil {\n\t\t\t\treturn config.ErrorHandler(c, err)\n\t\t\t}\n\n\t\t\t// Fix header\n\t\t\t// Basically it's not good practice to unconditionally pass incoming x-real-ip header to upstream.\n\t\t\t// However, for backward compatibility, legacy behavior is preserved unless you configure Echo#IPExtractor.\n\t\t\tif req.Header.Get(echo.HeaderXRealIP) == \"\" || c.Echo().IPExtractor != nil {\n\t\t\t\treq.Header.Set(echo.HeaderXRealIP, c.RealIP())\n\t\t\t}\n\t\t\tif req.Header.Get(echo.HeaderXForwardedProto) == \"\" {\n\t\t\t\treq.Header.Set(echo.HeaderXForwardedProto, c.Scheme())\n\t\t\t}\n\t\t\tif c.IsWebSocket() \u0026\u0026 req.Header.Get(echo.HeaderXForwardedFor) == \"\" { // For HTTP, it is automatically set by Go HTTP reverse proxy.\n\t\t\t\treq.Header.Set(echo.HeaderXForwardedFor, c.RealIP())\n\t\t\t}\n\n\t\t\tretries := config.RetryCount\n\t\t\tfor {\n\t\t\t\tvar tgt *ProxyTarget\n\t\t\t\tvar err error\n\t\t\t\tif isTargetProvider {\n\t\t\t\t\ttgt, err = provider.NextTarget(c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn config.ErrorHandler(c, err)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttgt = config.Balancer.Next(c)\n\t\t\t\t}\n\n\t\t\t\tc.Set(config.ContextKey, tgt)\n\n\t\t\t\t//If retrying a failed request, clear any previous errors from\n\t\t\t\t//context here so that balancers have the option to check for\n\t\t\t\t//errors that occurred using previous target\n\t\t\t\tif retries \u003c config.RetryCount {\n\t\t\t\t\tc.Set(\"_error\", nil)\n\t\t\t\t}\n\n\t\t\t\t// This is needed for ProxyConfig.ModifyResponse and/or ProxyConfig.Transport to be able to process the Request\n\t\t\t\t// that Balancer may have replaced with c.SetRequest.\n\t\t\t\treq = c.Request()\n\n\t\t\t\t// Proxy\n\t\t\t\tswitch {\n\t\t\t\tcase c.IsWebSocket():\n\t\t\t\t\tproxyRaw(tgt, c, config).ServeHTTP(res, req)\n\t\t\t\tdefault: // even SSE requests\n\t\t\t\t\tproxyHTTP(tgt, c, config).ServeHTTP(res, req)\n\t\t\t\t}\n\n\t\t\t\terr, hasError := c.Get(\"_error\").(error)\n\t\t\t\tif !hasError {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tretry := retries \u003e 0 \u0026\u0026 config.RetryFilter(c, err)\n\t\t\t\tif !retry {\n\t\t\t\t\treturn config.ErrorHandler(c, err)\n\t\t\t\t}\n\n\t\t\t\tretries--\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        287,
        288,
        289,
        290,
        291
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rate_limiter.go:NewRateLimiterMemoryStoreWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter_panicBehaviour"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipperNoSkip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultDenyHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_Allow"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_cleanupStaleVisitors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestNewRateLimiterMemoryStore"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_beforeFunc"
        }
      ],
      "name": "NewRateLimiterMemoryStoreWithConfig",
      "signature": "NewRateLimiterMemoryStoreWithConfig (config RateLimiterMemoryStoreConfig) (store *RateLimiterMemoryStore)",
      "ground_truth": "func NewRateLimiterMemoryStoreWithConfig(config RateLimiterMemoryStoreConfig) (store *RateLimiterMemoryStore) {\n\tstore = \u0026RateLimiterMemoryStore{}\n\n\tstore.rate = config.Rate\n\tstore.burst = config.Burst\n\tstore.expiresIn = config.ExpiresIn\n\tif config.ExpiresIn == 0 {\n\t\tstore.expiresIn = DefaultRateLimiterMemoryStoreConfig.ExpiresIn\n\t}\n\tif config.Burst == 0 {\n\t\tstore.burst = int(config.Rate)\n\t}\n\tstore.visitors = make(map[string]*Visitor)\n\tstore.timeNow = time.Now\n\tstore.lastCleanup = store.timeNow()\n\treturn\n}",
      "function_comment": "/*\nNewRateLimiterMemoryStoreWithConfig returns an instance of RateLimiterMemoryStore\nwith the provided configuration. Rate must be provided. Burst will be set to the rounded down value of\nthe configured rate if not provided or set to 0.\n\nThe built-in memory store is usually capable for modest loads. For higher loads other\nstore implementations should be considered.\n\nCharacteristics:\n* Concurrency above 100 parallel requests may causes measurable lock contention\n* A high number of different IP addresses (above 16000) may be impacted by the internally used Go map\n* A high number of requests from a single IP address may cause lock contention\n\nExample:\n\n\tlimiterStore := middleware.NewRateLimiterMemoryStoreWithConfig(\n\t\tmiddleware.RateLimiterMemoryStoreConfig{Rate: 50, Burst: 200, ExpiresIn: 5 * time.Minute},\n\t)\n*/",
      "function_statement": "/*\nNewRateLimiterMemoryStoreWithConfig returns an instance of RateLimiterMemoryStore\nwith the provided configuration. Rate must be provided. Burst will be set to the rounded down value of\nthe configured rate if not provided or set to 0.\n\nThe built-in memory store is usually capable for modest loads. For higher loads other\nstore implementations should be considered.\n\nCharacteristics:\n* Concurrency above 100 parallel requests may causes measurable lock contention\n* A high number of different IP addresses (above 16000) may be impacted by the internally used Go map\n* A high number of requests from a single IP address may cause lock contention\n\nExample:\n\n\tlimiterStore := middleware.NewRateLimiterMemoryStoreWithConfig(\n\t\tmiddleware.RateLimiterMemoryStoreConfig{Rate: 50, Burst: 200, ExpiresIn: 5 * time.Minute},\n\t)\n*/",
      "start_line": 208,
      "end_line": 224,
      "file_path": "./middleware/rate_limiter.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterMemoryStoreConfig struct {\n\tRate      rate.Limit    // Rate of requests allowed to pass as req/s. For more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\tBurst     int           // Burst is maximum number of requests to pass at the same moment. It additionally allows a number of requests to pass when rate limit is reached.\n\tExpiresIn time.Duration // ExpiresIn is the duration after that a rate limiter is cleaned up\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterMemoryStore struct {\n\tvisitors map[string]*Visitor\n\tmutex    sync.Mutex\n\trate     rate.Limit // for more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\n\tburst       int\n\texpiresIn   time.Duration\n\tlastCleanup time.Time\n\n\ttimeNow func() time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "DefaultRateLimiterMemoryStoreConfig = RateLimiterMemoryStoreConfig{\n\tExpiresIn: 3 * time.Minute,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "Visitor struct {\n\t*rate.Limiter\n\tlastSeen time.Time\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := now()\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223
      ],
      "cover_details": {
        "line_cover_rate": 0.9411764705882353
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rewrite.go:RewriteWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteAfterRouting"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithCaret"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteWithConfigPreMiddleware_Issue1143"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithRegexRules"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteReplacementEscaping"
        }
      ],
      "name": "RewriteWithConfig",
      "signature": "RewriteWithConfig (config RewriteConfig) echo.MiddlewareFunc",
      "ground_truth": "func RewriteWithConfig(config RewriteConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Rules == nil \u0026\u0026 config.RegexRules == nil {\n\t\tpanic(\"echo: rewrite middleware requires url path rewrite rules or regex rules\")\n\t}\n\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBodyDumpConfig.Skipper\n\t}\n\n\tif config.RegexRules == nil {\n\t\tconfig.RegexRules = make(map[*regexp.Regexp]string)\n\t}\n\tfor k, v := range rewriteRulesRegex(config.Rules) {\n\t\tconfig.RegexRules[k] = v\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tif err := rewriteURL(config.RegexRules, c.Request()); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// RewriteWithConfig returns a Rewrite middleware with config.\n// See: `Rewrite()`.",
      "function_statement": "// RewriteWithConfig returns a Rewrite middleware with config.\n// See: `Rewrite()`.",
      "start_line": 51,
      "end_line": 80,
      "file_path": "./middleware/rewrite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rewrite.go",
          "code_snippet": "RewriteConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Rules defines the URL path rewrite rules. The values captured in asterisk can be\n\t// retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"/old\":              \"/new\",\n\t// \"/api/*\":            \"/$1\",\n\t// \"/js/*\":             \"/public/javascripts/$1\",\n\t// \"/users/*/orders/*\": \"/user/$1/order/$2\",\n\t// Required.\n\tRules map[string]string `yaml:\"rules\"`\n\n\t// RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n\t// Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"^/old/[0.9]+/\":     \"/new\",\n\t// \"^/api/.+?/(.*)\":     \"/v2/$1\",\n\tRegexRules map[*regexp.Regexp]string `yaml:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "BodyDumpConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Handler receives request and response payload.\n\t// Required.\n\tHandler BodyDumpHandler\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "DefaultBodyDumpConfig = BodyDumpConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func rewriteRulesRegex(rewrite map[string]string) map[*regexp.Regexp]string {\n\t// Initialize\n\trulesRegex := map[*regexp.Regexp]string{}\n\tfor k, v := range rewrite {\n\t\tk = regexp.QuoteMeta(k)\n\t\tk = strings.ReplaceAll(k, `\\*`, \"(.*?)\")\n\t\tif strings.HasPrefix(k, `\\^`) {\n\t\t\tk = strings.ReplaceAll(k, `\\^`, \"^\")\n\t\t}\n\t\tk = k + \"$\"\n\t\trulesRegex[regexp.MustCompile(k)] = v\n\t}\n\treturn rulesRegex\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/middleware.go",
          "code_snippet": "func rewriteURL(rewriteRegex map[*regexp.Regexp]string, req *http.Request) error {\n\tif len(rewriteRegex) == 0 {\n\t\treturn nil\n\t}\n\n\t// Depending on how HTTP request is sent RequestURI could contain Scheme://Host/path or be just /path.\n\t// We only want to use path part for rewriting and therefore trim prefix if it exists\n\trawURI := req.RequestURI\n\tif rawURI != \"\" \u0026\u0026 rawURI[0] != '/' {\n\t\tprefix := \"\"\n\t\tif req.URL.Scheme != \"\" {\n\t\t\tprefix = req.URL.Scheme + \"://\"\n\t\t}\n\t\tif req.URL.Host != \"\" {\n\t\t\tprefix += req.URL.Host // host or host:port\n\t\t}\n\t\tif prefix != \"\" {\n\t\t\trawURI = strings.TrimPrefix(rawURI, prefix)\n\t\t}\n\t}\n\n\tfor k, v := range rewriteRegex {\n\t\tif replacer := captureTokens(k, rawURI); replacer != nil {\n\t\t\turl, err := req.URL.Parse(replacer.Replace(v))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treq.URL = url\n\n\t\t\treturn nil // rewrite only once\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "Regexp struct {\n\texpr           string       // as passed to Compile\n\tprog           *syntax.Prog // compiled program\n\tonepass        *onePassProg // onepass program or nil\n\tnumSubexp      int\n\tmaxBitStateLen int\n\tsubexpNames    []string\n\tprefix         string         // required prefix in unanchored matches\n\tprefixBytes    []byte         // prefix, as a []byte\n\tprefixRune     rune           // first rune in prefix\n\tprefixEnd      uint32         // pc for last rune in prefix\n\tmpool          int            // pool for machines\n\tmatchcap       int            // size of recorded match lengths\n\tprefixComplete bool           // prefix is the entire regexp\n\tcond           syntax.EmptyOp // empty-width conditions required at start of match\n\tminInputLen    int            // minimum length of the input in bytes\n\n\t// This field can be modified by the Longest method,\n\t// but it is otherwise read-only.\n\tlongest bool // whether regexp prefers leftmost-longest match\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        51,
        52,
        53,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        74,
        77
      ],
      "cover_details": {
        "line_cover_rate": 0.5666666666666667
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/method_override.go:MethodFromForm",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/method_override_test.go",
          "func_name": "TestMethodOverride"
        }
      ],
      "name": "MethodFromForm",
      "signature": "MethodFromForm (param string) MethodOverrideGetter",
      "ground_truth": "func MethodFromForm(param string) MethodOverrideGetter {\n\treturn func(c echo.Context) string {\n\t\treturn c.FormValue(param)\n\t}\n}",
      "function_comment": "// MethodFromForm is a `MethodOverrideGetter` that gets overridden method from the\n// form parameter.",
      "function_statement": "// MethodFromForm is a `MethodOverrideGetter` that gets overridden method from the\n// form parameter.",
      "start_line": 79,
      "end_line": 83,
      "file_path": "./middleware/method_override.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "MethodOverrideGetter func(echo.Context) string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        79,
        80,
        81,
        82
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/logger.go:Logger",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerIPAddress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLogger"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "Logger",
      "signature": "Logger () echo.MiddlewareFunc",
      "ground_truth": "func Logger() echo.MiddlewareFunc {\n\treturn LoggerWithConfig(DefaultLoggerConfig)\n}",
      "function_comment": "// Logger returns a middleware that logs HTTP requests using the default configuration.\n//\n// The default format logs requests as JSON with the following fields:\n//   - time: RFC3339 nano timestamp\n//   - id: Request ID from X-Request-ID header\n//   - remote_ip: Client IP address\n//   - host: Host header\n//   - method: HTTP method\n//   - uri: Request URI\n//   - user_agent: User-Agent header\n//   - status: HTTP status code\n//   - error: Error message (if any)\n//   - latency: Processing time in nanoseconds\n//   - latency_human: Human-readable processing time\n//   - bytes_in: Request body size\n//   - bytes_out: Response body size\n//\n// Example output:\n//\n//\t{\"time\":\"2023-01-15T10:30:45.123456789Z\",\"id\":\"\",\"remote_ip\":\"127.0.0.1\",\n//\t\"host\":\"localhost:8080\",\"method\":\"GET\",\"uri\":\"/users/123\",\"user_agent\":\"curl/7.81.0\",\n//\t\"status\":200,\"error\":\"\",\"latency\":1234567,\"latency_human\":\"1.234567ms\",\n//\t\"bytes_in\":0,\"bytes_out\":42}\n//\n// For custom configurations, use LoggerWithConfig instead.",
      "function_statement": "// Logger returns a middleware that logs HTTP requests using the default configuration.\n//\n// The default format logs requests as JSON with the following fields:\n//   - time: RFC3339 nano timestamp\n//   - id: Request ID from X-Request-ID header\n//   - remote_ip: Client IP address\n//   - host: Host header\n//   - method: HTTP method\n//   - uri: Request URI\n//   - user_agent: User-Agent header\n//   - status: HTTP status code\n//   - error: Error message (if any)\n//   - latency: Processing time in nanoseconds\n//   - latency_human: Human-readable processing time\n//   - bytes_in: Request body size\n//   - bytes_out: Response body size\n//\n// Example output:\n//\n//\t{\"time\":\"2023-01-15T10:30:45.123456789Z\",\"id\":\"\",\"remote_ip\":\"127.0.0.1\",\n//\t\"host\":\"localhost:8080\",\"method\":\"GET\",\"uri\":\"/users/123\",\"user_agent\":\"curl/7.81.0\",\n//\t\"status\":200,\"error\":\"\",\"latency\":1234567,\"latency_human\":\"1.234567ms\",\n//\t\"bytes_in\":0,\"bytes_out\":42}\n//\n// For custom configurations, use LoggerWithConfig instead.",
      "start_line": 238,
      "end_line": 240,
      "file_path": "./middleware/logger.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/logger.go",
          "code_snippet": "func LoggerWithConfig(config LoggerConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultLoggerConfig.Skipper\n\t}\n\tif config.Format == \"\" {\n\t\tconfig.Format = DefaultLoggerConfig.Format\n\t}\n\tif config.Output == nil {\n\t\tconfig.Output = DefaultLoggerConfig.Output\n\t}\n\n\tconfig.template = fasttemplate.New(config.Format, \"${\", \"}\")\n\tconfig.colorer = color.New()\n\tconfig.colorer.SetOutput(config.Output)\n\tconfig.pool = \u0026sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\treturn bytes.NewBuffer(make([]byte, 256))\n\t\t},\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\tstart := time.Now()\n\t\t\tif err = next(c); err != nil {\n\t\t\t\tc.Error(err)\n\t\t\t}\n\t\t\tstop := time.Now()\n\t\t\tbuf := config.pool.Get().(*bytes.Buffer)\n\t\t\tbuf.Reset()\n\t\t\tdefer config.pool.Put(buf)\n\n\t\t\tif _, err = config.template.ExecuteFunc(buf, func(w io.Writer, tag string) (int, error) {\n\t\t\t\tswitch tag {\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tif config.CustomTagFunc == nil {\n\t\t\t\t\t\treturn 0, nil\n\t\t\t\t\t}\n\t\t\t\t\treturn config.CustomTagFunc(c, buf)\n\t\t\t\tcase \"time_unix\":\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().Unix(), 10))\n\t\t\t\tcase \"time_unix_milli\":\n\t\t\t\t\t// go 1.17 or later, it supports time#UnixMilli()\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().UnixNano()/1000000, 10))\n\t\t\t\tcase \"time_unix_micro\":\n\t\t\t\t\t// go 1.17 or later, it supports time#UnixMicro()\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().UnixNano()/1000, 10))\n\t\t\t\tcase \"time_unix_nano\":\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().UnixNano(), 10))\n\t\t\t\tcase \"time_rfc3339\":\n\t\t\t\t\treturn buf.WriteString(time.Now().Format(time.RFC3339))\n\t\t\t\tcase \"time_rfc3339_nano\":\n\t\t\t\t\treturn buf.WriteString(time.Now().Format(time.RFC3339Nano))\n\t\t\t\tcase \"time_custom\":\n\t\t\t\t\treturn buf.WriteString(time.Now().Format(config.CustomTimeFormat))\n\t\t\t\tcase \"id\":\n\t\t\t\t\tid := req.Header.Get(echo.HeaderXRequestID)\n\t\t\t\t\tif id == \"\" {\n\t\t\t\t\t\tid = res.Header().Get(echo.HeaderXRequestID)\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(id)\n\t\t\t\tcase \"remote_ip\":\n\t\t\t\t\treturn buf.WriteString(c.RealIP())\n\t\t\t\tcase \"host\":\n\t\t\t\t\treturn buf.WriteString(req.Host)\n\t\t\t\tcase \"uri\":\n\t\t\t\t\treturn buf.WriteString(req.RequestURI)\n\t\t\t\tcase \"method\":\n\t\t\t\t\treturn buf.WriteString(req.Method)\n\t\t\t\tcase \"path\":\n\t\t\t\t\tp := req.URL.Path\n\t\t\t\t\tif p == \"\" {\n\t\t\t\t\t\tp = \"/\"\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(p)\n\t\t\t\tcase \"route\":\n\t\t\t\t\treturn buf.WriteString(c.Path())\n\t\t\t\tcase \"protocol\":\n\t\t\t\t\treturn buf.WriteString(req.Proto)\n\t\t\t\tcase \"referer\":\n\t\t\t\t\treturn buf.WriteString(req.Referer())\n\t\t\t\tcase \"user_agent\":\n\t\t\t\t\treturn buf.WriteString(req.UserAgent())\n\t\t\t\tcase \"status\":\n\t\t\t\t\tn := res.Status\n\t\t\t\t\ts := config.colorer.Green(n)\n\t\t\t\t\tswitch {\n\t\t\t\t\tcase n \u003e= 500:\n\t\t\t\t\t\ts = config.colorer.Red(n)\n\t\t\t\t\tcase n \u003e= 400:\n\t\t\t\t\t\ts = config.colorer.Yellow(n)\n\t\t\t\t\tcase n \u003e= 300:\n\t\t\t\t\t\ts = config.colorer.Cyan(n)\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(s)\n\t\t\t\tcase \"error\":\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t// Error may contain invalid JSON e.g. `\"`\n\t\t\t\t\t\tb, _ := json.Marshal(err.Error())\n\t\t\t\t\t\tb = b[1 : len(b)-1]\n\t\t\t\t\t\treturn buf.Write(b)\n\t\t\t\t\t}\n\t\t\t\tcase \"latency\":\n\t\t\t\t\tl := stop.Sub(start)\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(int64(l), 10))\n\t\t\t\tcase \"latency_human\":\n\t\t\t\t\treturn buf.WriteString(stop.Sub(start).String())\n\t\t\t\tcase \"bytes_in\":\n\t\t\t\t\tcl := req.Header.Get(echo.HeaderContentLength)\n\t\t\t\t\tif cl == \"\" {\n\t\t\t\t\t\tcl = \"0\"\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(cl)\n\t\t\t\tcase \"bytes_out\":\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(res.Size, 10))\n\t\t\t\tdefault:\n\t\t\t\t\tswitch {\n\t\t\t\t\tcase strings.HasPrefix(tag, \"header:\"):\n\t\t\t\t\t\treturn buf.Write([]byte(c.Request().Header.Get(tag[7:])))\n\t\t\t\t\tcase strings.HasPrefix(tag, \"query:\"):\n\t\t\t\t\t\treturn buf.Write([]byte(c.QueryParam(tag[6:])))\n\t\t\t\t\tcase strings.HasPrefix(tag, \"form:\"):\n\t\t\t\t\t\treturn buf.Write([]byte(c.FormValue(tag[5:])))\n\t\t\t\t\tcase strings.HasPrefix(tag, \"cookie:\"):\n\t\t\t\t\t\tcookie, err := c.Cookie(tag[7:])\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\treturn buf.Write([]byte(cookie.Value))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0, nil\n\t\t\t}); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif config.Output == nil {\n\t\t\t\t_, err = c.Logger().Output().Write(buf.Bytes())\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = config.Output.Write(buf.Bytes())\n\t\t\treturn\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/logger.go",
          "code_snippet": "DefaultLoggerConfig = LoggerConfig{\n\tSkipper: DefaultSkipper,\n\tFormat: `{\"time\":\"${time_rfc3339_nano}\",\"id\":\"${id}\",\"remote_ip\":\"${remote_ip}\",` +\n\t\t`\"host\":\"${host}\",\"method\":\"${method}\",\"uri\":\"${uri}\",\"user_agent\":\"${user_agent}\",` +\n\t\t`\"status\":${status},\"error\":\"${error}\",\"latency\":${latency},\"latency_human\":\"${latency_human}\"` +\n\t\t`,\"bytes_in\":${bytes_in},\"bytes_out\":${bytes_out}}` + \"\\n\",\n\tCustomTimeFormat: \"2006-01-02 15:04:05.00000\",\n\tcolorer:          color.New(),\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        238,
        239,
        240
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:unmarshalInputToField",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        }
      ],
      "name": "unmarshalInputToField",
      "signature": "unmarshalInputToField (valueKind reflect.Kind, val string, field reflect.Value, formatTag string) (bool, error)",
      "ground_truth": "func unmarshalInputToField(valueKind reflect.Kind, val string, field reflect.Value, formatTag string) (bool, error) {\n\tif valueKind == reflect.Ptr {\n\t\tif field.IsNil() {\n\t\t\tfield.Set(reflect.New(field.Type().Elem()))\n\t\t}\n\t\tfield = field.Elem()\n\t}\n\n\tfieldIValue := field.Addr().Interface()\n\n\t// Handle time.Time with custom format tag\n\tif formatTag != \"\" {\n\t\tif _, isTime := fieldIValue.(*time.Time); isTime {\n\t\t\tt, err := time.Parse(formatTag, val)\n\t\t\tif err != nil {\n\t\t\t\treturn true, err\n\t\t\t}\n\t\t\tfield.Set(reflect.ValueOf(t))\n\t\t\treturn true, nil\n\t\t}\n\t}\n\n\tswitch unmarshaler := fieldIValue.(type) {\n\tcase BindUnmarshaler:\n\t\treturn true, unmarshaler.UnmarshalParam(val)\n\tcase encoding.TextUnmarshaler:\n\t\treturn true, unmarshaler.UnmarshalText([]byte(val))\n\t}\n\n\treturn false, nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 368,
      "end_line": 398,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "BindUnmarshaler interface {\n\t// UnmarshalParam decodes and assigns a value from an form or query param.\n\tUnmarshalParam(param string) error\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Kind uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) IsNil() bool {\n\tk := v.kind()\n\tswitch k {\n\tcase Chan, Func, Map, Pointer, UnsafePointer:\n\t\tif v.flag\u0026flagMethod != 0 {\n\t\t\treturn false\n\t\t}\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\treturn ptr == nil\n\tcase Interface, Slice:\n\t\t// Both interface and slice are nil if first word is 0.\n\t\t// Both are always bigger than a word; assume flagIndir.\n\t\treturn *(*unsafe.Pointer)(v.ptr) == nil\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.IsNil\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Set(x Value) {\n\tv.mustBeAssignable()\n\tx.mustBeExported() // do not let unexported x leak\n\tvar target unsafe.Pointer\n\tif v.kind() == Interface {\n\t\ttarget = v.ptr\n\t}\n\tx = x.assignTo(\"reflect.Set\", v.typ(), target)\n\tif x.flag\u0026flagIndir != 0 {\n\t\tif x.ptr == unsafe.Pointer(\u0026zeroVal[0]) {\n\t\t\ttypedmemclr(v.typ(), v.ptr)\n\t\t} else {\n\t\t\ttypedmemmove(v.typ(), v.ptr, x.ptr)\n\t\t}\n\t} else {\n\t\t*(*unsafe.Pointer)(v.ptr) = x.ptr\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func New(typ Type) Value {\n\tif typ == nil {\n\t\tpanic(\"reflect: New(nil)\")\n\t}\n\tt := \u0026typ.(*rtype).t\n\tpt := ptrTo(t)\n\tif pt.IfaceIndir() {\n\t\t// This is a pointer to a not-in-heap type.\n\t\tpanic(\"reflect: New of type that may not be allocated in heap (possibly undefined cgo C type)\")\n\t}\n\tptr := unsafe_New(t)\n\tfl := flag(Pointer)\n\treturn Value{pt, ptr, fl}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Type() Type {\n\tif v.flag != 0 \u0026\u0026 v.flag\u0026flagMethod == 0 {\n\t\treturn (*rtype)(noescape(unsafe.Pointer(v.typ_))) // inline of toRType(v.typ()), for own inlining in inline test\n\t}\n\treturn v.typeSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Elem() Value {\n\tk := v.kind()\n\tswitch k {\n\tcase Interface:\n\t\tvar eface any\n\t\tif v.typ().NumMethod() == 0 {\n\t\t\teface = *(*any)(v.ptr)\n\t\t} else {\n\t\t\teface = (any)(*(*interface {\n\t\t\t\tM()\n\t\t\t})(v.ptr))\n\t\t}\n\t\tx := unpackEface(eface)\n\t\tif x.flag != 0 {\n\t\t\tx.flag |= v.flag.ro()\n\t\t}\n\t\treturn x\n\tcase Pointer:\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tif v.typ().IfaceIndir() {\n\t\t\t\t// This is a pointer to a not-in-heap object. ptr points to a uintptr\n\t\t\t\t// in the heap. That uintptr is the address of a not-in-heap object.\n\t\t\t\t// In general, pointers to not-in-heap objects can be total junk.\n\t\t\t\t// But Elem() is asking to dereference it, so the user has asserted\n\t\t\t\t// that at least it is a valid pointer (not just an integer stored in\n\t\t\t\t// a pointer slot). So let's check, to make sure that it isn't a pointer\n\t\t\t\t// that the runtime will crash on if it sees it during GC or write barriers.\n\t\t\t\t// Since it is a not-in-heap pointer, all pointers to the heap are\n\t\t\t\t// forbidden! That makes the test pretty easy.\n\t\t\t\t// See issue 48399.\n\t\t\t\tif !verifyNotInHeapPtr(*(*uintptr)(ptr)) {\n\t\t\t\t\tpanic(\"reflect: reflect.Value.Elem on an invalid notinheap pointer\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\t// The returned value's address is v's value.\n\t\tif ptr == nil {\n\t\t\treturn Value{}\n\t\t}\n\t\ttt := (*ptrType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tfl := v.flag\u0026flagRO | flagIndir | flagAddr\n\t\tfl |= flag(typ.Kind())\n\t\treturn Value{typ, ptr, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Elem\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Addr() Value {\n\tif v.flag\u0026flagAddr == 0 {\n\t\tpanic(\"reflect.Value.Addr of unaddressable value\")\n\t}\n\t// Preserve flagRO instead of using v.flag.ro() so that\n\t// v.Addr().Elem() is equivalent to v (#32772)\n\tfl := v.flag \u0026 flagRO\n\treturn Value{ptrTo(v.typ()), v.ptr, fl | flag(Pointer)}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "func Parse(layout, value string) (Time, error) {\n\t// Optimize for RFC3339 as it accounts for over half of all representations.\n\tif layout == RFC3339 || layout == RFC3339Nano {\n\t\tif t, ok := parseRFC3339(value, Local); ok {\n\t\t\treturn t, nil\n\t\t}\n\t}\n\treturn parse(layout, value, UTC, Local)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/encoding.go",
          "code_snippet": "TextUnmarshaler interface {\n\tUnmarshalText(text []byte) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        368,
        369,
        370,
        371,
        372,
        373,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        390,
        391,
        392,
        393,
        394,
        397
      ],
      "cover_details": {
        "line_cover_rate": 0.7419354838709677
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint64s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Uint64s",
      "signature": "(b *ValueBinder) Uint64s (sourceParam string, dest *[]uint64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint64s(sourceParam string, dest *[]uint64) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Uint64s binds parameter to slice of uint64",
      "function_statement": "// Uint64s binds parameter to slice of uint64",
      "start_line": 850,
      "end_line": 852,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        850,
        851,
        852
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:BindBody",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        }
      ],
      "name": "BindBody",
      "signature": "(b *DefaultBinder) BindBody (c Context, i interface{}) (err error)",
      "ground_truth": "func (b *DefaultBinder) BindBody(c Context, i interface{}) (err error) {\n\treq := c.Request()\n\tif req.ContentLength == 0 {\n\t\treturn\n\t}\n\n\t// mediatype is found like `mime.ParseMediaType()` does it\n\tbase, _, _ := strings.Cut(req.Header.Get(HeaderContentType), \";\")\n\tmediatype := strings.TrimSpace(base)\n\n\tswitch mediatype {\n\tcase MIMEApplicationJSON:\n\t\tif err = c.Echo().JSONSerializer.Deserialize(c, i); err != nil {\n\t\t\tswitch err.(type) {\n\t\t\tcase *HTTPError:\n\t\t\t\treturn err\n\t\t\tdefault:\n\t\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t\t}\n\t\t}\n\tcase MIMEApplicationXML, MIMETextXML:\n\t\tif err = xml.NewDecoder(req.Body).Decode(i); err != nil {\n\t\t\tif ute, ok := err.(*xml.UnsupportedTypeError); ok {\n\t\t\t\treturn NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Unsupported type error: type=%v, error=%v\", ute.Type, ute.Error())).SetInternal(err)\n\t\t\t} else if se, ok := err.(*xml.SyntaxError); ok {\n\t\t\t\treturn NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Syntax error: line=%v, error=%v\", se.Line, se.Error())).SetInternal(err)\n\t\t\t}\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\tcase MIMEApplicationForm:\n\t\tparams, err := c.FormParams()\n\t\tif err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\t\tif err = b.bindData(i, params, \"form\", nil); err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\tcase MIMEMultipartForm:\n\t\tparams, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\t\tif err = b.bindData(i, params.Value, \"form\", params.File); err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\tdefault:\n\t\treturn ErrUnsupportedMediaType\n\t}\n\treturn nil\n}",
      "function_comment": "// BindBody binds request body contents to bindable object\n// NB: then binding forms take note that this implementation uses standard library form parsing\n// which parses form data from BOTH URL and BODY if content type is not MIMEMultipartForm\n// See non-MIMEMultipartForm: https://golang.org/pkg/net/http/#Request.ParseForm\n// See MIMEMultipartForm: https://golang.org/pkg/net/http/#Request.ParseMultipartForm",
      "function_statement": "// BindBody binds request body contents to bindable object\n// NB: then binding forms take note that this implementation uses standard library form parsing\n// which parses form data from BOTH URL and BODY if content type is not MIMEMultipartForm\n// See non-MIMEMultipartForm: https://golang.org/pkg/net/http/#Request.ParseForm\n// See MIMEMultipartForm: https://golang.org/pkg/net/http/#Request.ParseMultipartForm",
      "start_line": 76,
      "end_line": 125,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentType         = \"Content-Type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationJSON = \"application/json\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "JSONSerializer interface {\n\tSerialize(c Context, i interface{}, indent string) error\n\tDeserialize(c Context, i interface{}) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMETextXML                          = \"text/xml\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationXML                   = \"application/xml\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationForm                  = \"application/x-www-form-urlencoded\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) bindData(destination interface{}, data map[string][]string, tag string, dataFiles map[string][]*multipart.FileHeader) error {\n\tif destination == nil || (len(data) == 0 \u0026\u0026 len(dataFiles) == 0) {\n\t\treturn nil\n\t}\n\thasFiles := len(dataFiles) \u003e 0\n\ttyp := reflect.TypeOf(destination).Elem()\n\tval := reflect.ValueOf(destination).Elem()\n\n\t// Support binding to limited Map destinations:\n\t// - map[string][]string,\n\t// - map[string]string \u003c-- (binds first value from data slice)\n\t// - map[string]interface{}\n\t// You are better off binding to struct but there are user who want this map feature. Source of data for these cases are:\n\t// params,query,header,form as these sources produce string values, most of the time slice of strings, actually.\n\tif typ.Kind() == reflect.Map \u0026\u0026 typ.Key().Kind() == reflect.String {\n\t\tk := typ.Elem().Kind()\n\t\tisElemInterface := k == reflect.Interface\n\t\tisElemString := k == reflect.String\n\t\tisElemSliceOfStrings := k == reflect.Slice \u0026\u0026 typ.Elem().Elem().Kind() == reflect.String\n\t\tif !(isElemSliceOfStrings || isElemString || isElemInterface) {\n\t\t\treturn nil\n\t\t}\n\t\tif val.IsNil() {\n\t\t\tval.Set(reflect.MakeMap(typ))\n\t\t}\n\t\tfor k, v := range data {\n\t\t\tif isElemString {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else if isElemInterface {\n\t\t\t\t// To maintain backward compatibility, we always bind to the first string value\n\t\t\t\t// and not the slice of strings when dealing with map[string]interface{}{}\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v[0]))\n\t\t\t} else {\n\t\t\t\tval.SetMapIndex(reflect.ValueOf(k), reflect.ValueOf(v))\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\t// !struct\n\tif typ.Kind() != reflect.Struct {\n\t\tif tag == \"param\" || tag == \"query\" || tag == \"header\" {\n\t\t\t// incompatible type, data is probably to be found in the body\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"binding element must be a struct\")\n\t}\n\n\tfor i := 0; i \u003c typ.NumField(); i++ { // iterate over all destination fields\n\t\ttypeField := typ.Field(i)\n\t\tstructField := val.Field(i)\n\t\tif typeField.Anonymous {\n\t\t\tif structField.Kind() == reflect.Ptr {\n\t\t\t\tstructField = structField.Elem()\n\t\t\t}\n\t\t}\n\t\tif !structField.CanSet() {\n\t\t\tcontinue\n\t\t}\n\t\tstructFieldKind := structField.Kind()\n\t\tinputFieldName := typeField.Tag.Get(tag)\n\t\tif typeField.Anonymous \u0026\u0026 structFieldKind == reflect.Struct \u0026\u0026 inputFieldName != \"\" {\n\t\t\t// if anonymous struct with query/param/form tags, report an error\n\t\t\treturn errors.New(\"query/param/form tags are not allowed with anonymous struct field\")\n\t\t}\n\n\t\tif inputFieldName == \"\" {\n\t\t\t// If tag is nil, we inspect if the field is a not BindUnmarshaler struct and try to bind data into it (might contain fields with tags).\n\t\t\t// structs that implement BindUnmarshaler are bound only when they have explicit tag\n\t\t\tif _, ok := structField.Addr().Interface().(BindUnmarshaler); !ok \u0026\u0026 structFieldKind == reflect.Struct {\n\t\t\t\tif err := b.bindData(structField.Addr().Interface(), data, tag, dataFiles); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\t// does not have explicit tag and is not an ordinary struct - so move to next field\n\t\t\tcontinue\n\t\t}\n\n\t\tif hasFiles {\n\t\t\tif ok, err := isFieldMultipartFile(structField.Type()); err != nil {\n\t\t\t\treturn err\n\t\t\t} else if ok {\n\t\t\t\tif ok := setMultipartFileHeaderTypes(structField, inputFieldName, dataFiles); ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinputValue, exists := data[inputFieldName]\n\t\tif !exists {\n\t\t\t// Go json.Unmarshal supports case-insensitive binding.  However the\n\t\t\t// url params are bound case-sensitive which is inconsistent.  To\n\t\t\t// fix this we must check all of the map values in a\n\t\t\t// case-insensitive search.\n\t\t\tfor k, v := range data {\n\t\t\t\tif strings.EqualFold(k, inputFieldName) {\n\t\t\t\t\tinputValue = v\n\t\t\t\t\texists = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\n\t\t// NOTE: algorithm here is not particularly sophisticated. It probably does not work with absurd types like `**[]*int`\n\t\t// but it is smart enough to handle niche cases like `*int`,`*[]string`,`[]*int` .\n\n\t\t// try unmarshalling first, in case we're dealing with an alias to an array type\n\t\tif ok, err := unmarshalInputsToField(typeField.Type.Kind(), inputValue, structField); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tformatTag := typeField.Tag.Get(\"format\")\n\t\tif ok, err := unmarshalInputToField(typeField.Type.Kind(), inputValue[0], structField, formatTag); ok {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// we could be dealing with pointer to slice `*[]string` so dereference it. There are weird OpenAPI generators\n\t\t// that could create struct fields like that.\n\t\tif structFieldKind == reflect.Pointer {\n\t\t\tstructFieldKind = structField.Elem().Kind()\n\t\t\tstructField = structField.Elem()\n\t\t}\n\n\t\tif structFieldKind == reflect.Slice {\n\t\t\tsliceOf := structField.Type().Elem().Kind()\n\t\t\tnumElems := len(inputValue)\n\t\t\tslice := reflect.MakeSlice(structField.Type(), numElems, numElems)\n\t\t\tfor j := 0; j \u003c numElems; j++ {\n\t\t\t\tif err := setWithProperType(sliceOf, inputValue[j], slice.Index(j)); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tstructField.Set(slice)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := setWithProperType(structFieldKind, inputValue[0], structField); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEMultipartForm                    = \"multipart/form-data\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrUnsupportedMediaType          = NewHTTPError(http.StatusUnsupportedMediaType)",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Cut(s, sep string) (before, after string, found bool) {\n\treturn stringslite.Cut(s, sep)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimSpace(s string) string {\n\t// Fast path for ASCII: look for the first ASCII non-space byte\n\tstart := 0\n\tfor ; start \u003c len(s); start++ {\n\t\tc := s[start]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// If we run into a non-ASCII byte, fall back to the\n\t\t\t// slower unicode-aware method on the remaining bytes\n\t\t\treturn TrimFunc(s[start:], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Now look for the first ASCII non-space byte from the end\n\tstop := len(s)\n\tfor ; stop \u003e start; stop-- {\n\t\tc := s[stop-1]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// start has been already trimmed above, should trim end only\n\t\t\treturn TrimRightFunc(s[start:stop], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// At this point s[start:stop] starts and ends with an ASCII\n\t// non-space bytes, so we're done. Non-ASCII cases have already\n\t// been handled above.\n\treturn s[start:stop]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadRequest                   = 400",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/read.go",
          "code_snippet": "func (d *Decoder) Decode(v any) error {\n\treturn d.DecodeElement(v, nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/xml.go",
          "code_snippet": "func NewDecoder(r io.Reader) *Decoder {\n\td := \u0026Decoder{\n\t\tns:       make(map[string]string),\n\t\tnextByte: -1,\n\t\tline:     1,\n\t\tStrict:   true,\n\t}\n\td.switchToReader(r)\n\treturn d\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "UnsupportedTypeError struct {\n\tType reflect.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "func (e *UnsupportedTypeError) Error() string {\n\treturn \"xml: unsupported type: \" + e.Type.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/xml.go",
          "code_snippet": "SyntaxError struct {\n\tMsg  string\n\tLine int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/xml.go",
          "code_snippet": "func (e *SyntaxError) Error() string {\n\treturn \"XML syntax error on line \" + strconv.Itoa(e.Line) + \": \" + e.Msg\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/mime/multipart/formdata.go",
          "code_snippet": "Form struct {\n\tValue map[string][]string\n\tFile  map[string][]*FileHeader\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        76,
        77,
        78,
        79,
        80,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        101,
        102,
        103,
        105,
        106,
        107,
        110,
        111,
        112,
        113,
        114,
        115,
        118,
        119,
        120,
        121,
        122,
        124
      ],
      "cover_details": {
        "line_cover_rate": 0.76
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustBindWithDelimiter",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        }
      ],
      "name": "MustBindWithDelimiter",
      "signature": "(b *ValueBinder) MustBindWithDelimiter (sourceParam string, dest interface{}, delimiter string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustBindWithDelimiter(sourceParam string, dest interface{}, delimiter string) *ValueBinder {\n\treturn b.bindWithDelimiter(sourceParam, dest, delimiter, true)\n}",
      "function_comment": "// MustBindWithDelimiter requires parameter value to exist to bind destination by suitable conversion function.\n// Delimiter is used before conversion to split parameter value to separate values",
      "function_statement": "// MustBindWithDelimiter requires parameter value to exist to bind destination by suitable conversion function.\n// Delimiter is used before conversion to split parameter value to separate values",
      "start_line": 411,
      "end_line": 413,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) bindWithDelimiter(sourceParam string, dest interface{}, delimiter string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\ttmpValues := make([]string, 0, len(values))\n\tfor _, v := range values {\n\t\ttmpValues = append(tmpValues, strings.Split(v, delimiter)...)\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *[]string:\n\t\t*d = tmpValues\n\t\treturn b\n\tcase *[]bool:\n\t\treturn b.bools(sourceParam, tmpValues, d)\n\tcase *[]int64, *[]int32, *[]int16, *[]int8, *[]int:\n\t\treturn b.ints(sourceParam, tmpValues, d)\n\tcase *[]uint64, *[]uint32, *[]uint16, *[]uint8, *[]uint: // *[]byte is same as *[]uint8\n\t\treturn b.uints(sourceParam, tmpValues, d)\n\tcase *[]float64, *[]float32:\n\t\treturn b.floats(sourceParam, tmpValues, d)\n\tcase *[]time.Duration:\n\t\treturn b.durations(sourceParam, tmpValues, d)\n\tdefault:\n\t\t// support only cases when destination is slice\n\t\t// does not support time.Time as it needs argument (layout) for parsing or BindUnmarshaler\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"unsupported bind type\", nil))\n\t\treturn b\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        411,
        412,
        413
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Accept",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        }
      ],
      "name": "Accept",
      "signature": "(ln tcpKeepAliveListener) Accept () (c net.Conn, err error)",
      "ground_truth": "func (ln tcpKeepAliveListener) Accept() (c net.Conn, err error) {\n\tif c, err = ln.AcceptTCP(); err != nil {\n\t\treturn\n\t} else if err = c.(*net.TCPConn).SetKeepAlive(true); err != nil {\n\t\treturn\n\t}\n\t// Ignore error from setting the KeepAlivePeriod as some systems, such as\n\t// OpenBSD, do not support setting TCP_USER_TIMEOUT on IPPROTO_TCP\n\t_ = c.(*net.TCPConn).SetKeepAlivePeriod(3 * time.Minute)\n\treturn\n}",
      "function_comment": "// // PathUnescape is wraps `url.PathUnescape`\n// func PathUnescape(s string) (string, error) {\n// \treturn url.PathUnescape(s)\n// }\n// tcpKeepAliveListener sets TCP keep-alive timeouts on accepted\n// connections. It's used by ListenAndServe and ListenAndServeTLS so\n// dead TCP connections (e.g. closing laptop mid-download) eventually",
      "function_statement": "// // PathUnescape is wraps `url.PathUnescape`\n// func PathUnescape(s string) (string, error) {\n// \treturn url.PathUnescape(s)\n// }\n// tcpKeepAliveListener sets TCP keep-alive timeouts on accepted\n// connections. It's used by ListenAndServe and ListenAndServeTLS so\n// dead TCP connections (e.g. closing laptop mid-download) eventually",
      "start_line": 987,
      "end_line": 997,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "tcpKeepAliveListener struct {\n\t*net.TCPListener\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Conn interface {\n\t// Read reads data from the connection.\n\t// Read can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetReadDeadline.\n\tRead(b []byte) (n int, err error)\n\n\t// Write writes data to the connection.\n\t// Write can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetWriteDeadline.\n\tWrite(b []byte) (n int, err error)\n\n\t// Close closes the connection.\n\t// Any blocked Read or Write operations will be unblocked and return errors.\n\tClose() error\n\n\t// LocalAddr returns the local network address, if known.\n\tLocalAddr() Addr\n\n\t// RemoteAddr returns the remote network address, if known.\n\tRemoteAddr() Addr\n\n\t// SetDeadline sets the read and write deadlines associated\n\t// with the connection. It is equivalent to calling both\n\t// SetReadDeadline and SetWriteDeadline.\n\t//\n\t// A deadline is an absolute time after which I/O operations\n\t// fail instead of blocking. The deadline applies to all future\n\t// and pending I/O, not just the immediately following call to\n\t// Read or Write. After a deadline has been exceeded, the\n\t// connection can be refreshed by setting a deadline in the future.\n\t//\n\t// If the deadline is exceeded a call to Read or Write or to other\n\t// I/O methods will return an error that wraps os.ErrDeadlineExceeded.\n\t// This can be tested using errors.Is(err, os.ErrDeadlineExceeded).\n\t// The error's Timeout method will return true, but note that there\n\t// are other possible errors for which the Timeout method will\n\t// return true even if the deadline has not been exceeded.\n\t//\n\t// An idle timeout can be implemented by repeatedly extending\n\t// the deadline after successful Read or Write calls.\n\t//\n\t// A zero value for t means I/O operations will not time out.\n\tSetDeadline(t time.Time) error\n\n\t// SetReadDeadline sets the deadline for future Read calls\n\t// and any currently-blocked Read call.\n\t// A zero value for t means Read will not time out.\n\tSetReadDeadline(t time.Time) error\n\n\t// SetWriteDeadline sets the deadline for future Write calls\n\t// and any currently-blocked Write call.\n\t// Even if write times out, it may return n \u003e 0, indicating that\n\t// some of the data was successfully written.\n\t// A zero value for t means Write will not time out.\n\tSetWriteDeadline(t time.Time) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/tcpsock.go",
          "code_snippet": "func (l *TCPListener) AcceptTCP() (*TCPConn, error) {\n\tif !l.ok() {\n\t\treturn nil, syscall.EINVAL\n\t}\n\tc, err := l.accept()\n\tif err != nil {\n\t\treturn nil, \u0026OpError{Op: \"accept\", Net: l.fd.net, Source: nil, Addr: l.fd.laddr, Err: err}\n\t}\n\treturn c, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/tcpsock.go",
          "code_snippet": "func (c *TCPConn) SetKeepAlive(keepalive bool) error {\n\tif !c.ok() {\n\t\treturn syscall.EINVAL\n\t}\n\tif err := setKeepAlive(c.fd, keepalive); err != nil {\n\t\treturn \u0026OpError{Op: \"set\", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/tcpsock.go",
          "code_snippet": "TCPConn struct {\n\tconn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/tcpsock.go",
          "code_snippet": "func (c *TCPConn) SetKeepAlivePeriod(d time.Duration) error {\n\tif !c.ok() {\n\t\treturn syscall.EINVAL\n\t}\n\tif err := setKeepAliveIdle(c.fd, d); err != nil {\n\t\treturn \u0026OpError{Op: \"set\", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Minute               = 60 * Second",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        987,
        988,
        989,
        990,
        995,
        996
      ],
      "cover_details": {
        "line_cover_rate": 0.5454545454545454
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:duration",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        }
      ],
      "name": "duration",
      "signature": "(b *ValueBinder) duration (sourceParam string, dest *time.Duration, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) duration(sourceParam string, dest *time.Duration, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tt, err := time.ParseDuration(value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Duration\", err))\n\t\treturn b\n\t}\n\t*dest = t\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1171,
      "end_line": 1190,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "func ParseDuration(s string) (Duration, error) {\n\t// [-+]?([0-9]*(\\.[0-9]*)?[a-z]+)+\n\torig := s\n\tvar d uint64\n\tneg := false\n\n\t// Consume [-+]?\n\tif s != \"\" {\n\t\tc := s[0]\n\t\tif c == '-' || c == '+' {\n\t\t\tneg = c == '-'\n\t\t\ts = s[1:]\n\t\t}\n\t}\n\t// Special case: if all that is left is \"0\", this is zero.\n\tif s == \"0\" {\n\t\treturn 0, nil\n\t}\n\tif s == \"\" {\n\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t}\n\tfor s != \"\" {\n\t\tvar (\n\t\t\tv, f  uint64      // integers before, after decimal point\n\t\t\tscale float64 = 1 // value = v + f/scale\n\t\t)\n\n\t\tvar err error\n\n\t\t// The next character must be [0-9.]\n\t\tif !(s[0] == '.' || '0' \u003c= s[0] \u0026\u0026 s[0] \u003c= '9') {\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t\t// Consume [0-9]*\n\t\tpl := len(s)\n\t\tv, s, err = leadingInt(s)\n\t\tif err != nil {\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t\tpre := pl != len(s) // whether we consumed anything before a period\n\n\t\t// Consume (\\.[0-9]*)?\n\t\tpost := false\n\t\tif s != \"\" \u0026\u0026 s[0] == '.' {\n\t\t\ts = s[1:]\n\t\t\tpl := len(s)\n\t\t\tf, scale, s = leadingFraction(s)\n\t\t\tpost = pl != len(s)\n\t\t}\n\t\tif !pre \u0026\u0026 !post {\n\t\t\t// no digits (e.g. \".s\" or \"-.s\")\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\n\t\t// Consume unit.\n\t\ti := 0\n\t\tfor ; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif c == '.' || '0' \u003c= c \u0026\u0026 c \u003c= '9' {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif i == 0 {\n\t\t\treturn 0, errors.New(\"time: missing unit in duration \" + quote(orig))\n\t\t}\n\t\tu := s[:i]\n\t\ts = s[i:]\n\t\tunit, ok := unitMap[u]\n\t\tif !ok {\n\t\t\treturn 0, errors.New(\"time: unknown unit \" + quote(u) + \" in duration \" + quote(orig))\n\t\t}\n\t\tif v \u003e 1\u003c\u003c63/unit {\n\t\t\t// overflow\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t\tv *= unit\n\t\tif f \u003e 0 {\n\t\t\t// float64 is needed to be nanosecond accurate for fractions of hours.\n\t\t\t// v \u003e= 0 \u0026\u0026 (f*unit/scale) \u003c= 3.6e+12 (ns/h, h is the largest unit)\n\t\t\tv += uint64(float64(f) * (float64(unit) / scale))\n\t\t\tif v \u003e 1\u003c\u003c63 {\n\t\t\t\t// overflow\n\t\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t\t}\n\t\t}\n\t\td += v\n\t\tif d \u003e 1\u003c\u003c63 {\n\t\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t\t}\n\t}\n\tif neg {\n\t\treturn -Duration(d), nil\n\t}\n\tif d \u003e 1\u003c\u003c63-1 {\n\t\treturn 0, errors.New(\"time: invalid duration \" + quote(orig))\n\t}\n\treturn Duration(d), nil\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1171,
        1172,
        1173,
        1174,
        1176,
        1177,
        1178,
        1179,
        1180,
        1181,
        1183,
        1184,
        1185,
        1186,
        1187,
        1188,
        1189
      ],
      "cover_details": {
        "line_cover_rate": 0.85
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustFloat64s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        }
      ],
      "name": "MustFloat64s",
      "signature": "(b *ValueBinder) MustFloat64s (sourceParam string, dest *[]float64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustFloat64s(sourceParam string, dest *[]float64) *ValueBinder {\n\treturn b.floatsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustFloat64s requires parameter values to exist to bind to slice of float64 variables. Returns error when values does not exist",
      "function_statement": "// MustFloat64s requires parameter values to exist to bind to slice of float64 variables. Returns error when values does not exist",
      "start_line": 1075,
      "end_line": 1077,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.floats(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1075,
        1076,
        1077
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUnixTime",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        }
      ],
      "name": "MustUnixTime",
      "signature": "(b *ValueBinder) MustUnixTime (sourceParam string, dest *time.Time) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUnixTime(sourceParam string, dest *time.Time) *ValueBinder {\n\treturn b.unixTime(sourceParam, dest, true, time.Second)\n}",
      "function_comment": "// MustUnixTime requires parameter value to exist to bind to time.Duration variable (in local time corresponding\n// to the given Unix time). Returns error when value does not exist.\n//\n// Example: 1609180603 bind to 2020-12-28T18:36:43.000000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "function_statement": "// MustUnixTime requires parameter value to exist to bind to time.Duration variable (in local time corresponding\n// to the given Unix time). Returns error when value does not exist.\n//\n// Example: 1609180603 bind to 2020-12-28T18:36:43.000000000+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal",
      "start_line": 1253,
      "end_line": 1255,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Second               = 1000 * Millisecond",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1253,
        1254,
        1255
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:QueryString",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        }
      ],
      "name": "QueryString",
      "signature": "(c *context) QueryString () string",
      "ground_truth": "func (c *context) QueryString() string {\n\treturn c.request.URL.RawQuery\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 386,
      "end_line": 388,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        386,
        387,
        388
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:insert",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "insert",
      "signature": "(r *Router) insert (method, path string, h HandlerFunc)",
      "ground_truth": "func (r *Router) insert(method, path string, h HandlerFunc) {\n\tpath = normalizePathSlash(path)\n\tpnames := []string{} // Param names\n\tppath := path        // Pristine path\n\n\tif h == nil \u0026\u0026 r.echo.Logger != nil {\n\t\t// FIXME: in future we should return error\n\t\tr.echo.Logger.Errorf(\"Adding route without handler function: %v:%v\", method, path)\n\t}\n\n\tfor i, lcpIndex := 0, len(path); i \u003c lcpIndex; i++ {\n\t\tif path[i] == ':' {\n\t\t\tif i \u003e 0 \u0026\u0026 path[i-1] == '\\\\' {\n\t\t\t\tpath = path[:i-1] + path[i:]\n\t\t\t\ti--\n\t\t\t\tlcpIndex--\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tj := i + 1\n\n\t\t\tr.insertNode(method, path[:i], staticKind, routeMethod{})\n\t\t\tfor ; i \u003c lcpIndex \u0026\u0026 path[i] != '/'; i++ {\n\t\t\t}\n\n\t\t\tpnames = append(pnames, path[j:i])\n\t\t\tpath = path[:j] + path[i:]\n\t\t\ti, lcpIndex = j, len(path)\n\n\t\t\tif i == lcpIndex {\n\t\t\t\t// path node is last fragment of route path. ie. `/users/:id`\n\t\t\t\tr.insertNode(method, path[:i], paramKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n\t\t\t} else {\n\t\t\t\tr.insertNode(method, path[:i], paramKind, routeMethod{})\n\t\t\t}\n\t\t} else if path[i] == '*' {\n\t\t\tr.insertNode(method, path[:i], staticKind, routeMethod{})\n\t\t\tpnames = append(pnames, \"*\")\n\t\t\tr.insertNode(method, path[:i+1], anyKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n\t\t}\n\t}\n\n\tr.insertNode(method, path, staticKind, routeMethod{ppath: ppath, pnames: pnames, handler: h})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 214,
      "end_line": 256,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func normalizePathSlash(path string) string {\n\tif path == \"\" {\n\t\tpath = \"/\"\n\t} else if path[0] != '/' {\n\t\tpath = \"/\" + path\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) insertNode(method, path string, t kind, rm routeMethod) {\n\t// Adjust max param\n\tparamLen := len(rm.pnames)\n\tif *r.echo.maxParam \u003c paramLen {\n\t\t*r.echo.maxParam = paramLen\n\t}\n\n\tcurrentNode := r.tree // Current node as root\n\tif currentNode == nil {\n\t\tpanic(\"echo: invalid method\")\n\t}\n\tsearch := path\n\n\tfor {\n\t\tsearchLen := len(search)\n\t\tprefixLen := len(currentNode.prefix)\n\t\tlcpLen := 0\n\n\t\t// LCP - Longest Common Prefix (https://en.wikipedia.org/wiki/LCP_array)\n\t\tmax := prefixLen\n\t\tif searchLen \u003c max {\n\t\t\tmax = searchLen\n\t\t}\n\t\tfor ; lcpLen \u003c max \u0026\u0026 search[lcpLen] == currentNode.prefix[lcpLen]; lcpLen++ {\n\t\t}\n\n\t\tif lcpLen == 0 {\n\t\t\t// At root node\n\t\t\tcurrentNode.label = search[0]\n\t\t\tcurrentNode.prefix = search\n\t\t\tif rm.handler != nil {\n\t\t\t\tcurrentNode.kind = t\n\t\t\t\tcurrentNode.addMethod(method, \u0026rm)\n\t\t\t\tcurrentNode.paramsCount = len(rm.pnames)\n\t\t\t\tcurrentNode.originalPath = rm.ppath\n\t\t\t}\n\t\t\tcurrentNode.isLeaf = currentNode.staticChildren == nil \u0026\u0026 currentNode.paramChild == nil \u0026\u0026 currentNode.anyChild == nil\n\t\t} else if lcpLen \u003c prefixLen {\n\t\t\t// Split node into two before we insert new node.\n\t\t\t// This happens when we are inserting path that is submatch of any existing inserted paths.\n\t\t\t// For example, we have node `/test` and now are about to insert `/te/*`. In that case\n\t\t\t// 1. overlapping part is `/te` that is used as parent node\n\t\t\t// 2. `st` is part from existing node that is not matching - it gets its own node (child to `/te`)\n\t\t\t// 3. `/*` is the new part we are about to insert (child to `/te`)\n\t\t\tn := newNode(\n\t\t\t\tcurrentNode.kind,\n\t\t\t\tcurrentNode.prefix[lcpLen:],\n\t\t\t\tcurrentNode,\n\t\t\t\tcurrentNode.staticChildren,\n\t\t\t\tcurrentNode.originalPath,\n\t\t\t\tcurrentNode.methods,\n\t\t\t\tcurrentNode.paramsCount,\n\t\t\t\tcurrentNode.paramChild,\n\t\t\t\tcurrentNode.anyChild,\n\t\t\t\tcurrentNode.notFoundHandler,\n\t\t\t)\n\t\t\t// Update parent path for all children to new node\n\t\t\tfor _, child := range currentNode.staticChildren {\n\t\t\t\tchild.parent = n\n\t\t\t}\n\t\t\tif currentNode.paramChild != nil {\n\t\t\t\tcurrentNode.paramChild.parent = n\n\t\t\t}\n\t\t\tif currentNode.anyChild != nil {\n\t\t\t\tcurrentNode.anyChild.parent = n\n\t\t\t}\n\n\t\t\t// Reset parent node\n\t\t\tcurrentNode.kind = staticKind\n\t\t\tcurrentNode.label = currentNode.prefix[0]\n\t\t\tcurrentNode.prefix = currentNode.prefix[:lcpLen]\n\t\t\tcurrentNode.staticChildren = nil\n\t\t\tcurrentNode.originalPath = \"\"\n\t\t\tcurrentNode.methods = new(routeMethods)\n\t\t\tcurrentNode.paramsCount = 0\n\t\t\tcurrentNode.paramChild = nil\n\t\t\tcurrentNode.anyChild = nil\n\t\t\tcurrentNode.isLeaf = false\n\t\t\tcurrentNode.isHandler = false\n\t\t\tcurrentNode.notFoundHandler = nil\n\n\t\t\t// Only Static children could reach here\n\t\t\tcurrentNode.addStaticChild(n)\n\n\t\t\tif lcpLen == searchLen {\n\t\t\t\t// At parent node\n\t\t\t\tcurrentNode.kind = t\n\t\t\t\tif rm.handler != nil {\n\t\t\t\t\tcurrentNode.addMethod(method, \u0026rm)\n\t\t\t\t\tcurrentNode.paramsCount = len(rm.pnames)\n\t\t\t\t\tcurrentNode.originalPath = rm.ppath\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create child node\n\t\t\t\tn = newNode(t, search[lcpLen:], currentNode, nil, \"\", new(routeMethods), 0, nil, nil, nil)\n\t\t\t\tif rm.handler != nil {\n\t\t\t\t\tn.addMethod(method, \u0026rm)\n\t\t\t\t\tn.paramsCount = len(rm.pnames)\n\t\t\t\t\tn.originalPath = rm.ppath\n\t\t\t\t}\n\t\t\t\t// Only Static children could reach here\n\t\t\t\tcurrentNode.addStaticChild(n)\n\t\t\t}\n\t\t\tcurrentNode.isLeaf = currentNode.staticChildren == nil \u0026\u0026 currentNode.paramChild == nil \u0026\u0026 currentNode.anyChild == nil\n\t\t} else if lcpLen \u003c searchLen {\n\t\t\tsearch = search[lcpLen:]\n\t\t\tc := currentNode.findChildWithLabel(search[0])\n\t\t\tif c != nil {\n\t\t\t\t// Go deeper\n\t\t\t\tcurrentNode = c\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Create child node\n\t\t\tn := newNode(t, search, currentNode, nil, rm.ppath, new(routeMethods), 0, nil, nil, nil)\n\t\t\tif rm.handler != nil {\n\t\t\t\tn.addMethod(method, \u0026rm)\n\t\t\t\tn.paramsCount = len(rm.pnames)\n\t\t\t}\n\n\t\t\tswitch t {\n\t\t\tcase staticKind:\n\t\t\t\tcurrentNode.addStaticChild(n)\n\t\t\tcase paramKind:\n\t\t\t\tcurrentNode.paramChild = n\n\t\t\tcase anyKind:\n\t\t\t\tcurrentNode.anyChild = n\n\t\t\t}\n\t\t\tcurrentNode.isLeaf = currentNode.staticChildren == nil \u0026\u0026 currentNode.paramChild == nil \u0026\u0026 currentNode.anyChild == nil\n\t\t} else {\n\t\t\t// Node already exists\n\t\t\tif rm.handler != nil {\n\t\t\t\tcurrentNode.addMethod(method, \u0026rm)\n\t\t\t\tcurrentNode.paramsCount = len(rm.pnames)\n\t\t\t\tcurrentNode.originalPath = rm.ppath\n\t\t\t}\n\t\t}\n\t\treturn\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "staticKind kind = iota",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethod struct {\n\thandler HandlerFunc\n\tppath   string\n\tpnames  []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "paramKind",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "anyKind",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        214,
        215,
        216,
        217,
        218,
        219,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        232,
        233,
        234,
        235,
        236,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        255
      ],
      "cover_details": {
        "line_cover_rate": 0.7906976744186046
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:PATCH",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "PATCH",
      "signature": "(g *Group) PATCH (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) PATCH(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodPatch, path, h, m...)\n}",
      "function_comment": "// PATCH implements `Echo#PATCH()` for sub-routes within the Group.",
      "function_statement": "// PATCH implements `Echo#PATCH()` for sub-routes within the Group.",
      "start_line": 61,
      "end_line": 63,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPatch   = \"PATCH\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        61,
        62,
        63
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:TRACE",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "TRACE",
      "signature": "(g *Group) TRACE (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) TRACE(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodTrace, path, h, m...)\n}",
      "function_comment": "// TRACE implements `Echo#TRACE()` for sub-routes within the Group.",
      "function_statement": "// TRACE implements `Echo#TRACE()` for sub-routes within the Group.",
      "start_line": 76,
      "end_line": 78,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodTrace   = \"TRACE\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        76,
        77,
        78
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetParamNames",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "SetParamNames",
      "signature": "(c *context) SetParamNames (names ...string)",
      "ground_truth": "func (c *context) SetParamNames(names ...string) {\n\tc.pnames = names\n\n\tl := len(names)\n\tif len(c.pvalues) \u003c l {\n\t\t// Keeping the old pvalues just for backward compatibility, but it sounds that doesn't make sense to keep them,\n\t\t// probably those values will be overridden in a Context#SetParamValues\n\t\tnewPvalues := make([]string, l)\n\t\tcopy(newPvalues, c.pvalues)\n\t\tc.pvalues = newPvalues\n\t}\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 343,
      "end_line": 354,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func copy(dst, src []Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustCustomFunc",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        }
      ],
      "name": "MustCustomFunc",
      "signature": "(b *ValueBinder) MustCustomFunc (sourceParam string, customFunc func(values []string) []error) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustCustomFunc(sourceParam string, customFunc func(values []string) []error) *ValueBinder {\n\treturn b.customFunc(sourceParam, customFunc, true)\n}",
      "function_comment": "// MustCustomFunc requires parameter values to exist to bind with Func. Returns error when value does not exist.",
      "function_statement": "// MustCustomFunc requires parameter values to exist to bind with Func. Returns error when value does not exist.",
      "start_line": 215,
      "end_line": 217,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) customFunc(sourceParam string, customFunc func(values []string) []error, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tif errs := customFunc(values); errs != nil {\n\t\tb.errors = append(b.errors, errs...)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        215,
        216,
        217
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:Open",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        }
      ],
      "name": "Open",
      "signature": "(fs defaultFS) Open (name string) (fs.File, error)",
      "ground_truth": "func (fs defaultFS) Open(name string) (fs.File, error) {\n\tif fs.fs == nil {\n\t\treturn os.Open(name)\n\t}\n\treturn fs.fs.Open(name)\n}",
      "function_comment": "// defaultFS exists to preserve pre v4.7.0 behaviour where files were open by `os.Open`.\n// v4.7 introduced `echo.Filesystem` field which is Go1.16+ `fs.Fs` interface.\n// Difference between `os.Open` and `fs.Open` is that FS does not allow opening path that start with `.`, `..` or `/`\n// etc. For example previously you could have `../images` in your application but `fs := os.DirFS(\"./\")` would not\n// allow you to use `fs.Open(\"../images\")` and this would break all old applications that rely on being able to\n// traverse up from current executable run path.",
      "function_statement": "// defaultFS exists to preserve pre v4.7.0 behaviour where files were open by `os.Open`.\n// v4.7 introduced `echo.Filesystem` field which is Go1.16+ `fs.Fs` interface.\n// Difference between `os.Open` and `fs.Open` is that FS does not allow opening path that start with `.`, `..` or `/`\n// etc. For example previously you could have `../images` in your application but `fs := os.DirFS(\"./\")` would not\n// allow you to use `fs.Open(\"../images\")` and this would break all old applications that rely on being able to\n// traverse up from current executable run path.",
      "start_line": 117,
      "end_line": 122,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "defaultFS struct {\n\tfs     fs.FS\n\tprefix string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "File interface {\n\tStat() (FileInfo, error)\n\tRead([]byte) (int, error)\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/os/file.go",
          "code_snippet": "func Open(name string) (*File, error) {\n\treturn OpenFile(name, O_RDONLY, 0)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        117,
        118,
        119,
        120,
        121
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint16s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Uint16s",
      "signature": "(b *ValueBinder) Uint16s (sourceParam string, dest *[]uint16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint16s(sourceParam string, dest *[]uint16) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Uint16s binds parameter to slice of uint16",
      "function_statement": "// Uint16s binds parameter to slice of uint16",
      "start_line": 870,
      "end_line": 872,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        870,
        871,
        872
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/context_timeout.go:ContextTimeout",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithTimeout0"
        }
      ],
      "name": "ContextTimeout",
      "signature": "ContextTimeout (timeout time.Duration) echo.MiddlewareFunc",
      "ground_truth": "func ContextTimeout(timeout time.Duration) echo.MiddlewareFunc {\n\treturn ContextTimeoutWithConfig(ContextTimeoutConfig{Timeout: timeout})\n}",
      "function_comment": "// ContextTimeout returns a middleware which returns error (503 Service Unavailable error) to client\n// when underlying method returns context.DeadlineExceeded error.",
      "function_statement": "// ContextTimeout returns a middleware which returns error (503 Service Unavailable error) to client\n// when underlying method returns context.DeadlineExceeded error.",
      "start_line": 28,
      "end_line": 30,
      "file_path": "./middleware/context_timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/context_timeout.go",
          "code_snippet": "func ContextTimeoutWithConfig(config ContextTimeoutConfig) echo.MiddlewareFunc {\n\tmw, err := config.ToMiddleware()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn mw\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/context_timeout.go",
          "code_snippet": "ContextTimeoutConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// ErrorHandler is a function when error arises in middleware execution.\n\tErrorHandler func(err error, c echo.Context) error\n\n\t// Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n\tTimeout time.Duration\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        28,
        29,
        30
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/decompress.go:gzipDecompressPool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressDefaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressErrorReturned"
        }
      ],
      "name": "gzipDecompressPool",
      "signature": "(d *DefaultGzipDecompressPool) gzipDecompressPool () sync.Pool",
      "ground_truth": "func (d *DefaultGzipDecompressPool) gzipDecompressPool() sync.Pool {\n\treturn sync.Pool{New: func() interface{} { return new(gzip.Reader) }}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 42,
      "end_line": 44,
      "file_path": "./middleware/decompress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "DefaultGzipDecompressPool struct {\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gunzip.go",
          "code_snippet": "Reader struct {\n\tHeader       // valid after NewReader or Reader.Reset\n\tr            flate.Reader\n\tdecompressor io.ReadCloser\n\tdigest       uint32 // CRC-32, IEEE polynomial (section 8)\n\tsize         uint32 // Uncompressed size (section 2.3.1)\n\tbuf          [512]byte\n\terr          error\n\tmultistream  bool\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        42,
        43
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:AddTarget",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        }
      ],
      "name": "AddTarget",
      "signature": "(b *commonBalancer) AddTarget (target *ProxyTarget) bool",
      "ground_truth": "func (b *commonBalancer) AddTarget(target *ProxyTarget) bool {\n\tb.mutex.Lock()\n\tdefer b.mutex.Unlock()\n\tfor _, t := range b.targets {\n\t\tif t.Name == target.Name {\n\t\t\treturn false\n\t\t}\n\t}\n\tb.targets = append(b.targets, target)\n\treturn true\n}",
      "function_comment": "// AddTarget adds an upstream target to the list and returns `true`.\n//\n// However, if a target with the same name already exists then the operation is aborted returning `false`.",
      "function_statement": "// AddTarget adds an upstream target to the list and returns `true`.\n//\n// However, if a target with the same name already exists then the operation is aborted returning `false`.",
      "start_line": 202,
      "end_line": 212,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "commonBalancer struct {\n\ttargets []*ProxyTarget\n\tmutex   sync.Mutex\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        210,
        211
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:setMultipartFileHeaderTypes",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        }
      ],
      "name": "setMultipartFileHeaderTypes",
      "signature": "setMultipartFileHeaderTypes (structField reflect.Value, inputFieldName string, files map[string][]*multipart.FileHeader) bool",
      "ground_truth": "func setMultipartFileHeaderTypes(structField reflect.Value, inputFieldName string, files map[string][]*multipart.FileHeader) bool {\n\tfileHeaders := files[inputFieldName]\n\tif len(fileHeaders) == 0 {\n\t\treturn false\n\t}\n\n\tresult := true\n\tswitch structField.Type() {\n\tcase multipartFileHeaderPointerSliceType:\n\t\tstructField.Set(reflect.ValueOf(fileHeaders))\n\tcase multipartFileHeaderSliceType:\n\t\theaders := make([]multipart.FileHeader, len(fileHeaders))\n\t\tfor i, fileHeader := range fileHeaders {\n\t\t\theaders[i] = *fileHeader\n\t\t}\n\t\tstructField.Set(reflect.ValueOf(headers))\n\tcase multipartFileHeaderPointerType:\n\t\tstructField.Set(reflect.ValueOf(fileHeaders[0]))\n\tdefault:\n\t\tresult = false\n\t}\n\n\treturn result\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 466,
      "end_line": 489,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderPointerSliceType = reflect.TypeFor[[]*multipart.FileHeader]()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderSliceType        = reflect.TypeFor[[]multipart.FileHeader]()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderPointerType      = reflect.TypeFor[*multipart.FileHeader]()",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/mime/multipart/formdata.go",
          "code_snippet": "FileHeader struct {\n\tFilename string\n\tHeader   textproto.MIMEHeader\n\tSize     int64\n\n\tcontent   []byte\n\ttmpfile   string\n\ttmpoff    int64\n\ttmpshared bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Type() Type {\n\tif v.flag != 0 \u0026\u0026 v.flag\u0026flagMethod == 0 {\n\t\treturn (*rtype)(noescape(unsafe.Pointer(v.typ_))) // inline of toRType(v.typ()), for own inlining in inline test\n\t}\n\treturn v.typeSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Set(x Value) {\n\tv.mustBeAssignable()\n\tx.mustBeExported() // do not let unexported x leak\n\tvar target unsafe.Pointer\n\tif v.kind() == Interface {\n\t\ttarget = v.ptr\n\t}\n\tx = x.assignTo(\"reflect.Set\", v.typ(), target)\n\tif x.flag\u0026flagIndir != 0 {\n\t\tif x.ptr == unsafe.Pointer(\u0026zeroVal[0]) {\n\t\t\ttypedmemclr(v.typ(), v.ptr)\n\t\t} else {\n\t\t\ttypedmemmove(v.typ(), v.ptr, x.ptr)\n\t\t}\n\t} else {\n\t\t*(*unsafe.Pointer)(v.ptr) = x.ptr\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        466,
        467,
        468,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        482,
        483,
        488
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Attachment",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        }
      ],
      "name": "Attachment",
      "signature": "(c *context) Attachment (file, name string) error",
      "ground_truth": "func (c *context) Attachment(file, name string) error {\n\treturn c.contentDisposition(file, name, \"attachment\")\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 590,
      "end_line": 592,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) contentDisposition(file, name, dispositionType string) error {\n\tc.response.Header().Set(HeaderContentDisposition, fmt.Sprintf(`%s; filename=\"%s\"`, dispositionType, quoteEscaper.Replace(name)))\n\treturn c.File(file)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        590,
        591,
        592
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:addMethod",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "addMethod",
      "signature": "(n *node) addMethod (method string, h *routeMethod)",
      "ground_truth": "func (n *node) addMethod(method string, h *routeMethod) {\n\tswitch method {\n\tcase http.MethodConnect:\n\t\tn.methods.connect = h\n\tcase http.MethodDelete:\n\t\tn.methods.delete = h\n\tcase http.MethodGet:\n\t\tn.methods.get = h\n\tcase http.MethodHead:\n\t\tn.methods.head = h\n\tcase http.MethodOptions:\n\t\tn.methods.options = h\n\tcase http.MethodPatch:\n\t\tn.methods.patch = h\n\tcase http.MethodPost:\n\t\tn.methods.post = h\n\tcase PROPFIND:\n\t\tn.methods.propfind = h\n\tcase http.MethodPut:\n\t\tn.methods.put = h\n\tcase http.MethodTrace:\n\t\tn.methods.trace = h\n\tcase REPORT:\n\t\tn.methods.report = h\n\tcase RouteNotFound:\n\t\tn.notFoundHandler = h\n\t\treturn // RouteNotFound/404 is not considered as a handler so no further logic needs to be executed\n\tdefault:\n\t\tif n.methods.anyOther == nil {\n\t\t\tn.methods.anyOther = make(map[string]*routeMethod)\n\t\t}\n\t\tif h.handler == nil {\n\t\t\tdelete(n.methods.anyOther, method)\n\t\t} else {\n\t\t\tn.methods.anyOther[method] = h\n\t\t}\n\t}\n\n\tn.methods.updateAllowHeader()\n\tn.isHandler = true\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 453,
      "end_line": 493,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethod struct {\n\thandler HandlerFunc\n\tppath   string\n\tpnames  []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "PROPFIND = \"PROPFIND\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "REPORT = \"REPORT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "RouteNotFound = \"echo_route_not_found\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (m *routeMethods) updateAllowHeader() {\n\tbuf := new(bytes.Buffer)\n\tbuf.WriteString(http.MethodOptions)\n\n\tif m.connect != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodConnect)\n\t}\n\tif m.delete != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodDelete)\n\t}\n\tif m.get != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodGet)\n\t}\n\tif m.head != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodHead)\n\t}\n\tif m.patch != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodPatch)\n\t}\n\tif m.post != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodPost)\n\t}\n\tif m.propfind != nil {\n\t\tbuf.WriteString(\", PROPFIND\")\n\t}\n\tif m.put != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodPut)\n\t}\n\tif m.trace != nil {\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(http.MethodTrace)\n\t}\n\tif m.report != nil {\n\t\tbuf.WriteString(\", REPORT\")\n\t}\n\tfor method := range m.anyOther { // for simplicity, we use map and therefore order is not deterministic here\n\t\tbuf.WriteString(\", \")\n\t\tbuf.WriteString(method)\n\t}\n\tm.allowHeader = buf.String()\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodConnect = \"CONNECT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodDelete  = \"DELETE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPatch   = \"PATCH\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPut     = \"PUT\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodTrace   = \"TRACE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func delete(m map[Type]Type1, key Type)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        453,
        454,
        455,
        456,
        457,
        458,
        459,
        460,
        461,
        462,
        463,
        464,
        465,
        466,
        467,
        468,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        482,
        483,
        484,
        486,
        487,
        488,
        491,
        492
      ],
      "cover_details": {
        "line_cover_rate": 0.9024390243902439
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:OPTIONS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        }
      ],
      "name": "OPTIONS",
      "signature": "(e *Echo) OPTIONS (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) OPTIONS(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodOptions, path, h, m...)\n}",
      "function_comment": "// OPTIONS registers a new OPTIONS route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// OPTIONS registers a new OPTIONS route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 502,
      "end_line": 504,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        502,
        503,
        504
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Float64s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        }
      ],
      "name": "Float64s",
      "signature": "(b *ValueBinder) Float64s (sourceParam string, dest *[]float64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Float64s(sourceParam string, dest *[]float64) *ValueBinder {\n\treturn b.floatsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Float64s binds parameter values to slice of float64 variables",
      "function_statement": "// Float64s binds parameter values to slice of float64 variables",
      "start_line": 1070,
      "end_line": 1072,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) floatsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.floats(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1070,
        1071,
        1072
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:BindWithDelimiter",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "BindWithDelimiter",
      "signature": "(b *ValueBinder) BindWithDelimiter (sourceParam string, dest interface{}, delimiter string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) BindWithDelimiter(sourceParam string, dest interface{}, delimiter string) *ValueBinder {\n\treturn b.bindWithDelimiter(sourceParam, dest, delimiter, false)\n}",
      "function_comment": "// BindWithDelimiter binds parameter to destination by suitable conversion function.\n// Delimiter is used before conversion to split parameter value to separate values",
      "function_statement": "// BindWithDelimiter binds parameter to destination by suitable conversion function.\n// Delimiter is used before conversion to split parameter value to separate values",
      "start_line": 405,
      "end_line": 407,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) bindWithDelimiter(sourceParam string, dest interface{}, delimiter string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\ttmpValues := make([]string, 0, len(values))\n\tfor _, v := range values {\n\t\ttmpValues = append(tmpValues, strings.Split(v, delimiter)...)\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *[]string:\n\t\t*d = tmpValues\n\t\treturn b\n\tcase *[]bool:\n\t\treturn b.bools(sourceParam, tmpValues, d)\n\tcase *[]int64, *[]int32, *[]int16, *[]int8, *[]int:\n\t\treturn b.ints(sourceParam, tmpValues, d)\n\tcase *[]uint64, *[]uint32, *[]uint16, *[]uint8, *[]uint: // *[]byte is same as *[]uint8\n\t\treturn b.uints(sourceParam, tmpValues, d)\n\tcase *[]float64, *[]float32:\n\t\treturn b.floats(sourceParam, tmpValues, d)\n\tcase *[]time.Duration:\n\t\treturn b.durations(sourceParam, tmpValues, d)\n\tdefault:\n\t\t// support only cases when destination is slice\n\t\t// does not support time.Time as it needs argument (layout) for parsing or BindUnmarshaler\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"unsupported bind type\", nil))\n\t\treturn b\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        405,
        406,
        407
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Pre",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        }
      ],
      "name": "Pre",
      "signature": "(e *Echo) Pre (middleware ...MiddlewareFunc)",
      "ground_truth": "func (e *Echo) Pre(middleware ...MiddlewareFunc) {\n\te.premiddleware = append(e.premiddleware, middleware...)\n}",
      "function_comment": "// Pre adds middleware to the chain which is run before router.",
      "function_statement": "// Pre adds middleware to the chain which is run before router.",
      "start_line": 467,
      "end_line": 469,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        467,
        468,
        469
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:gzipCompressPool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturnedInvalidConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        }
      ],
      "name": "gzipCompressPool",
      "signature": "gzipCompressPool (config GzipConfig) sync.Pool",
      "ground_truth": "func gzipCompressPool(config GzipConfig) sync.Pool {\n\treturn sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\tw, err := gzip.NewWriterLevel(io.Discard, config.Level)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn w\n\t\t},\n\t}\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 211,
      "end_line": 221,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "GzipConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Gzip compression level.\n\t// Optional. Default value -1.\n\tLevel int `yaml:\"level\"`\n\n\t// Length threshold before gzip compression is applied.\n\t// Optional. Default value 0.\n\t//\n\t// Most of the time you will not need to change the default. Compressing\n\t// a short response might increase the transmitted data because of the\n\t// gzip format overhead. Compressing the response will also consume CPU\n\t// and time on the server and the client (for decompressing). Depending on\n\t// your use case such a threshold might be useful.\n\t//\n\t// See also:\n\t// https://webmasters.stackexchange.com/questions/31750/what-is-recommended-minimum-object-size-for-gzip-performance-benefits\n\tMinLength int\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gzip.go",
          "code_snippet": "func NewWriterLevel(w io.Writer, level int) (*Writer, error) {\n\tif level \u003c HuffmanOnly || level \u003e BestCompression {\n\t\treturn nil, fmt.Errorf(\"gzip: invalid compression level: %d\", level)\n\t}\n\tz := new(Writer)\n\tz.init(w, level)\n\treturn z, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Discard Writer = discard{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218
      ],
      "cover_details": {
        "line_cover_rate": 0.7272727272727273
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:valuesFromCookie",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromCookie"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "valuesFromCookie",
      "signature": "valuesFromCookie (name string) ValuesExtractor",
      "ground_truth": "func valuesFromCookie(name string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tcookies := c.Cookies()\n\t\tif len(cookies) == 0 {\n\t\t\treturn nil, errCookieExtractorValueMissing\n\t\t}\n\n\t\tresult := make([]string, 0)\n\t\tfor i, cookie := range cookies {\n\t\t\tif name == cookie.Name {\n\t\t\t\tresult = append(result, cookie.Value)\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif len(result) == 0 {\n\t\t\treturn nil, errCookieExtractorValueMissing\n\t\t}\n\t\treturn result, nil\n\t}\n}",
      "function_comment": "// valuesFromCookie returns a function that extracts values from the named cookie.",
      "function_statement": "// valuesFromCookie returns a function that extracts values from the named cookie.",
      "start_line": 168,
      "end_line": 189,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errCookieExtractorValueMissing = errors.New(\"missing value in cookies\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "extractorLimit = 20",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "Cookie struct {\n\tName   string\n\tValue  string\n\tQuoted bool // indicates whether the Value was originally quoted\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge\u003e0 means Max-Age attribute present and given in seconds\n\tMaxAge      int\n\tSecure      bool\n\tHttpOnly    bool\n\tSameSite    SameSite\n\tPartitioned bool\n\tRaw         string\n\tUnparsed    []string // Raw text of unparsed attribute-value pairs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        168,
        169,
        170,
        171,
        172,
        173,
        175,
        176,
        177,
        178,
        179,
        180,
        184,
        185,
        186,
        187
      ],
      "cover_details": {
        "line_cover_rate": 0.7272727272727273
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/method_override.go:MethodOverrideWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/method_override_test.go",
          "func_name": "TestMethodOverride"
        }
      ],
      "name": "MethodOverrideWithConfig",
      "signature": "MethodOverrideWithConfig (config MethodOverrideConfig) echo.MiddlewareFunc",
      "ground_truth": "func MethodOverrideWithConfig(config MethodOverrideConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultMethodOverrideConfig.Skipper\n\t}\n\tif config.Getter == nil {\n\t\tconfig.Getter = DefaultMethodOverrideConfig.Getter\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tif req.Method == http.MethodPost {\n\t\t\t\tm := config.Getter(c)\n\t\t\t\tif m != \"\" {\n\t\t\t\t\treq.Method = m\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// MethodOverrideWithConfig returns a MethodOverride middleware with config.\n// See: `MethodOverride()`.",
      "function_statement": "// MethodOverrideWithConfig returns a MethodOverride middleware with config.\n// See: `MethodOverride()`.",
      "start_line": 42,
      "end_line": 67,
      "file_path": "./middleware/method_override.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "MethodOverrideConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Getter is a function that gets overridden method from the request.\n\t// Optional. Default values MethodFromHeader(echo.HeaderXHTTPMethodOverride).\n\tGetter MethodOverrideGetter\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "DefaultMethodOverrideConfig = MethodOverrideConfig{\n\tSkipper: DefaultSkipper,\n\tGetter:  MethodFromHeader(echo.HeaderXHTTPMethodOverride),\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        62,
        64
      ],
      "cover_details": {
        "line_cover_rate": 0.6153846153846154
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/slash.go:RemoveTrailingSlash",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlash"
        }
      ],
      "name": "RemoveTrailingSlash",
      "signature": "RemoveTrailingSlash () echo.MiddlewareFunc",
      "ground_truth": "func RemoveTrailingSlash() echo.MiddlewareFunc {\n\treturn RemoveTrailingSlashWithConfig(TrailingSlashConfig{})\n}",
      "function_comment": "// RemoveTrailingSlash returns a root level (before router) middleware which removes\n// a trailing slash from the request URI.\n//\n// Usage `Echo#Pre(RemoveTrailingSlash())`",
      "function_statement": "// RemoveTrailingSlash returns a root level (before router) middleware which removes\n// a trailing slash from the request URI.\n//\n// Usage `Echo#Pre(RemoveTrailingSlash())`",
      "start_line": 78,
      "end_line": 80,
      "file_path": "./middleware/slash.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "func RemoveTrailingSlashWithConfig(config TrailingSlashConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultTrailingSlashConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\turl := req.URL\n\t\t\tpath := url.Path\n\t\t\tqs := c.QueryString()\n\t\t\tl := len(path) - 1\n\t\t\tif l \u003e 0 \u0026\u0026 strings.HasSuffix(path, \"/\") {\n\t\t\t\tpath = path[:l]\n\t\t\t\turi := path\n\t\t\t\tif qs != \"\" {\n\t\t\t\t\turi += \"?\" + qs\n\t\t\t\t}\n\n\t\t\t\t// Redirect\n\t\t\t\tif config.RedirectCode != 0 {\n\t\t\t\t\treturn c.Redirect(config.RedirectCode, sanitizeURI(uri))\n\t\t\t\t}\n\n\t\t\t\t// Forward\n\t\t\t\treq.RequestURI = uri\n\t\t\t\turl.Path = path\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "TrailingSlashConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional, but when provided the request is redirected using this code.\n\tRedirectCode int `yaml:\"redirect_code\"`\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        78,
        79,
        80
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int8",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Int8",
      "signature": "(b *ValueBinder) Int8 (sourceParam string, dest *int8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int8(sourceParam string, dest *int8) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 8, false)\n}",
      "function_comment": "// Int8 binds parameter to int8 variable",
      "function_statement": "// Int8 binds parameter to int8 variable",
      "start_line": 484,
      "end_line": 486,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        484,
        485,
        486
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:XMLBlob",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        }
      ],
      "name": "XMLBlob",
      "signature": "(c *context) XMLBlob (code int, b []byte) (err error)",
      "ground_truth": "func (c *context) XMLBlob(code int, b []byte) (err error) {\n\tc.writeContentType(MIMEApplicationXMLCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tif _, err = c.response.Write([]byte(xml.Header)); err != nil {\n\t\treturn\n\t}\n\t_, err = c.response.Write(b)\n\treturn\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 566,
      "end_line": 574,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMEApplicationXMLCharsetUTF8        = MIMEApplicationXML + \"; \" + charsetUTF8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Write(b []byte) (n int, err error) {\n\tif !r.Committed {\n\t\tif r.Status == 0 {\n\t\t\tr.Status = http.StatusOK\n\t\t}\n\t\tr.WriteHeader(r.Status)\n\t}\n\tn, err = r.Writer.Write(b)\n\tr.Size += int64(n)\n\tfor _, fn := range r.afterFuncs {\n\t\tfn()\n\t}\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/xml/marshal.go",
          "code_snippet": "Header = `\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e` + \"\\n\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        566,
        567,
        568,
        569,
        572,
        573
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Use",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        }
      ],
      "name": "Use",
      "signature": "(e *Echo) Use (middleware ...MiddlewareFunc)",
      "ground_truth": "func (e *Echo) Use(middleware ...MiddlewareFunc) {\n\te.middleware = append(e.middleware, middleware...)\n}",
      "function_comment": "// Use adds middleware to the chain which is run after router.",
      "function_statement": "// Use adds middleware to the chain which is run after router.",
      "start_line": 472,
      "end_line": 474,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        472,
        473,
        474
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:TrustLinkLocal",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLinkLocal"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLoopback"
        }
      ],
      "name": "TrustLinkLocal",
      "signature": "TrustLinkLocal (v bool) TrustOption",
      "ground_truth": "func TrustLinkLocal(v bool) TrustOption {\n\treturn func(c *ipChecker) {\n\t\tc.trustLinkLocal = v\n\t}\n}",
      "function_comment": "// TrustLinkLocal configures if you trust link-local address (default: true).",
      "function_statement": "// TrustLinkLocal configures if you trust link-local address (default: true).",
      "start_line": 154,
      "end_line": 158,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "ipChecker struct {\n\ttrustExtraRanges []*net.IPNet\n\ttrustLoopback    bool\n\ttrustLinkLocal   bool\n\ttrustPrivateNet  bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        154,
        155,
        156,
        157
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint32s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustUint32s",
      "signature": "(b *ValueBinder) MustUint32s (sourceParam string, dest *[]uint32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint32s(sourceParam string, dest *[]uint32) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustUint32s requires parameter value to exist to bind to uint32 slice variable. Returns error when value does not exist",
      "function_statement": "// MustUint32s requires parameter value to exist to bind to uint32 slice variable. Returns error when value does not exist",
      "start_line": 865,
      "end_line": 867,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        865,
        866,
        867
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:HEAD",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        }
      ],
      "name": "HEAD",
      "signature": "(e *Echo) HEAD (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) HEAD(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodHead, path, h, m...)\n}",
      "function_comment": "// HEAD registers a new HEAD route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// HEAD registers a new HEAD route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 496,
      "end_line": 498,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        496,
        497,
        498
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/cors.go:CORSWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORSWithConfig_AllowMethods"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginSubdomain"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCorsHeaders"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORS"
        }
      ],
      "name": "CORSWithConfig",
      "signature": "CORSWithConfig (config CORSConfig) echo.MiddlewareFunc",
      "ground_truth": "func CORSWithConfig(config CORSConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultCORSConfig.Skipper\n\t}\n\tif len(config.AllowOrigins) == 0 {\n\t\tconfig.AllowOrigins = DefaultCORSConfig.AllowOrigins\n\t}\n\thasCustomAllowMethods := true\n\tif len(config.AllowMethods) == 0 {\n\t\thasCustomAllowMethods = false\n\t\tconfig.AllowMethods = DefaultCORSConfig.AllowMethods\n\t}\n\n\tallowOriginPatterns := make([]*regexp.Regexp, 0, len(config.AllowOrigins))\n\tfor _, origin := range config.AllowOrigins {\n\t\tif origin == \"*\" {\n\t\t\tcontinue // \"*\" is handled differently and does not need regexp\n\t\t}\n\t\tpattern := regexp.QuoteMeta(origin)\n\t\tpattern = strings.ReplaceAll(pattern, \"\\\\*\", \".*\")\n\t\tpattern = strings.ReplaceAll(pattern, \"\\\\?\", \".\")\n\t\tpattern = \"^\" + pattern + \"$\"\n\n\t\tre, err := regexp.Compile(pattern)\n\t\tif err != nil {\n\t\t\t// this is to preserve previous behaviour - invalid patterns were just ignored.\n\t\t\t// If we would turn this to panic, users with invalid patterns\n\t\t\t// would have applications crashing in production due unrecovered panic.\n\t\t\t// TODO: this should be turned to error/panic in `v5`\n\t\t\tcontinue\n\t\t}\n\t\tallowOriginPatterns = append(allowOriginPatterns, re)\n\t}\n\n\tallowMethods := strings.Join(config.AllowMethods, \",\")\n\tallowHeaders := strings.Join(config.AllowHeaders, \",\")\n\texposeHeaders := strings.Join(config.ExposeHeaders, \",\")\n\n\tmaxAge := \"0\"\n\tif config.MaxAge \u003e 0 {\n\t\tmaxAge = strconv.Itoa(config.MaxAge)\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\torigin := req.Header.Get(echo.HeaderOrigin)\n\t\t\tallowOrigin := \"\"\n\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderOrigin)\n\n\t\t\t// Preflight request is an OPTIONS request, using three HTTP request headers: Access-Control-Request-Method,\n\t\t\t// Access-Control-Request-Headers, and the Origin header. See: https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n\t\t\t// For simplicity we just consider method type and later `Origin` header.\n\t\t\tpreflight := req.Method == http.MethodOptions\n\n\t\t\t// Although router adds special handler in case of OPTIONS method we avoid calling next for OPTIONS in this middleware\n\t\t\t// as CORS requests do not have cookies / authentication headers by default, so we could get stuck in auth\n\t\t\t// middlewares by calling next(c).\n\t\t\t// But we still want to send `Allow` header as response in case of Non-CORS OPTIONS request as router default\n\t\t\t// handler does.\n\t\t\trouterAllowMethods := \"\"\n\t\t\tif preflight {\n\t\t\t\ttmpAllowMethods, ok := c.Get(echo.ContextKeyHeaderAllow).(string)\n\t\t\t\tif ok \u0026\u0026 tmpAllowMethods != \"\" {\n\t\t\t\t\trouterAllowMethods = tmpAllowMethods\n\t\t\t\t\tc.Response().Header().Set(echo.HeaderAllow, routerAllowMethods)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// No Origin provided. This is (probably) not request from actual browser - proceed executing middleware chain\n\t\t\tif origin == \"\" {\n\t\t\t\tif !preflight {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn c.NoContent(http.StatusNoContent)\n\t\t\t}\n\n\t\t\tif config.AllowOriginFunc != nil {\n\t\t\t\tallowed, err := config.AllowOriginFunc(origin)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tif allowed {\n\t\t\t\t\tallowOrigin = origin\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Check allowed origins\n\t\t\t\tfor _, o := range config.AllowOrigins {\n\t\t\t\t\tif o == \"*\" \u0026\u0026 config.AllowCredentials \u0026\u0026 config.UnsafeWildcardOriginWithAllowCredentials {\n\t\t\t\t\t\tallowOrigin = origin\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif o == \"*\" || o == origin {\n\t\t\t\t\t\tallowOrigin = o\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif matchSubdomain(origin, o) {\n\t\t\t\t\t\tallowOrigin = origin\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcheckPatterns := false\n\t\t\t\tif allowOrigin == \"\" {\n\t\t\t\t\t// to avoid regex cost by invalid (long) domains (253 is domain name max limit)\n\t\t\t\t\tif len(origin) \u003c= (253+3+5) \u0026\u0026 strings.Contains(origin, \"://\") {\n\t\t\t\t\t\tcheckPatterns = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif checkPatterns {\n\t\t\t\t\tfor _, re := range allowOriginPatterns {\n\t\t\t\t\t\tif match := re.MatchString(origin); match {\n\t\t\t\t\t\t\tallowOrigin = origin\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Origin not allowed\n\t\t\tif allowOrigin == \"\" {\n\t\t\t\tif !preflight {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn c.NoContent(http.StatusNoContent)\n\t\t\t}\n\n\t\t\tres.Header().Set(echo.HeaderAccessControlAllowOrigin, allowOrigin)\n\t\t\tif config.AllowCredentials {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowCredentials, \"true\")\n\t\t\t}\n\n\t\t\t// Simple request\n\t\t\tif !preflight {\n\t\t\t\tif exposeHeaders != \"\" {\n\t\t\t\t\tres.Header().Set(echo.HeaderAccessControlExposeHeaders, exposeHeaders)\n\t\t\t\t}\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\t// Preflight request\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderAccessControlRequestMethod)\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderAccessControlRequestHeaders)\n\n\t\t\tif !hasCustomAllowMethods \u0026\u0026 routerAllowMethods != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowMethods, routerAllowMethods)\n\t\t\t} else {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowMethods, allowMethods)\n\t\t\t}\n\n\t\t\tif allowHeaders != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowHeaders, allowHeaders)\n\t\t\t} else {\n\t\t\t\th := req.Header.Get(echo.HeaderAccessControlRequestHeaders)\n\t\t\t\tif h != \"\" {\n\t\t\t\t\tres.Header().Set(echo.HeaderAccessControlAllowHeaders, h)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif config.MaxAge != 0 {\n\t\t\t\tres.Header().Set(echo.HeaderAccessControlMaxAge, maxAge)\n\t\t\t}\n\t\t\treturn c.NoContent(http.StatusNoContent)\n\t\t}\n\t}\n}",
      "function_comment": "// CORSWithConfig returns a CORS middleware with config.\n// See: [CORS].",
      "function_statement": "// CORSWithConfig returns a CORS middleware with config.\n// See: [CORS].",
      "start_line": 136,
      "end_line": 307,
      "file_path": "./middleware/cors.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/cors.go",
          "code_snippet": "CORSConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// AllowOrigins determines the value of the Access-Control-Allow-Origin\n\t// response header.  This header defines a list of origins that may access the\n\t// resource.  The wildcard characters '*' and '?' are supported and are\n\t// converted to regex fragments '.*' and '.' accordingly.\n\t//\n\t// Security: use extreme caution when handling the origin, and carefully\n\t// validate any logic. Remember that attackers may register hostile domain names.\n\t// See https://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\n\t//\n\t// Optional. Default value []string{\"*\"}.\n\t//\n\t// See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\n\tAllowOrigins []string `yaml:\"allow_origins\"`\n\n\t// AllowOriginFunc is a custom function to validate the origin. It takes the\n\t// origin as an argument and returns true if allowed or false otherwise. If\n\t// an error is returned, it is returned by the handler. If this option is\n\t// set, AllowOrigins is ignored.\n\t//\n\t// Security: use extreme caution when handling the origin, and carefully\n\t// validate any logic. Remember that attackers may register hostile domain names.\n\t// See https://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\n\t//\n\t// Optional.\n\tAllowOriginFunc func(origin string) (bool, error) `yaml:\"-\"`\n\n\t// AllowMethods determines the value of the Access-Control-Allow-Methods\n\t// response header.  This header specified the list of methods allowed when\n\t// accessing the resource.  This is used in response to a preflight request.\n\t//\n\t// Optional. Default value DefaultCORSConfig.AllowMethods.\n\t// If `allowMethods` is left empty, this middleware will fill for preflight\n\t// request `Access-Control-Allow-Methods` header value\n\t// from `Allow` header that echo.Router set into context.\n\t//\n\t// See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\n\tAllowMethods []string `yaml:\"allow_methods\"`\n\n\t// AllowHeaders determines the value of the Access-Control-Allow-Headers\n\t// response header.  This header is used in response to a preflight request to\n\t// indicate which HTTP headers can be used when making the actual request.\n\t//\n\t// Optional. Default value []string{}.\n\t//\n\t// See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers\n\tAllowHeaders []string `yaml:\"allow_headers\"`\n\n\t// AllowCredentials determines the value of the\n\t// Access-Control-Allow-Credentials response header.  This header indicates\n\t// whether or not the response to the request can be exposed when the\n\t// credentials mode (Request.credentials) is true. When used as part of a\n\t// response to a preflight request, this indicates whether or not the actual\n\t// request can be made using credentials.  See also\n\t// [MDN: Access-Control-Allow-Credentials].\n\t//\n\t// Optional. Default value false, in which case the header is not set.\n\t//\n\t// Security: avoid using `AllowCredentials = true` with `AllowOrigins = *`.\n\t// See \"Exploiting CORS misconfigurations for Bitcoins and bounties\",\n\t// https://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\n\t//\n\t// See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\n\tAllowCredentials bool `yaml:\"allow_credentials\"`\n\n\t// UnsafeWildcardOriginWithAllowCredentials UNSAFE/INSECURE: allows wildcard '*' origin to be used with AllowCredentials\n\t// flag. In that case we consider any origin allowed and send it back to the client with `Access-Control-Allow-Origin` header.\n\t//\n\t// This is INSECURE and potentially leads to [cross-origin](https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties)\n\t// attacks. See: https://github.com/labstack/echo/issues/2400 for discussion on the subject.\n\t//\n\t// Optional. Default value is false.\n\tUnsafeWildcardOriginWithAllowCredentials bool `yaml:\"unsafe_wildcard_origin_with_allow_credentials\"`\n\n\t// ExposeHeaders determines the value of Access-Control-Expose-Headers, which\n\t// defines a list of headers that clients are allowed to access.\n\t//\n\t// Optional. Default value []string{}, in which case the header is not set.\n\t//\n\t// See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Header\n\tExposeHeaders []string `yaml:\"expose_headers\"`\n\n\t// MaxAge determines the value of the Access-Control-Max-Age response header.\n\t// This header indicates how long (in seconds) the results of a preflight\n\t// request can be cached.\n\t// The header is set only if MaxAge != 0, negative value sends \"0\" which instructs browsers not to cache that response.\n\t//\n\t// Optional. Default value 0 - meaning header is not sent.\n\t//\n\t// See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age\n\tMaxAge int `yaml:\"max_age\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/cors.go",
          "code_snippet": "DefaultCORSConfig = CORSConfig{\n\tSkipper:      DefaultSkipper,\n\tAllowOrigins: []string{\"*\"},\n\tAllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderOrigin              = \"Origin\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderVary                = \"Vary\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "ContextKeyHeaderAllow = \"echo_header_allow\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAllow               = \"Allow\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "func matchSubdomain(domain, pattern string) bool {\n\tif !matchScheme(domain, pattern) {\n\t\treturn false\n\t}\n\tdidx := strings.Index(domain, \"://\")\n\tpidx := strings.Index(pattern, \"://\")\n\tif didx == -1 || pidx == -1 {\n\t\treturn false\n\t}\n\tdomAuth := domain[didx+3:]\n\t// to avoid long loop by invalid long domain\n\tif len(domAuth) \u003e 253 {\n\t\treturn false\n\t}\n\tpatAuth := pattern[pidx+3:]\n\n\tdomComp := strings.Split(domAuth, \".\")\n\tpatComp := strings.Split(patAuth, \".\")\n\tfor i := len(domComp)/2 - 1; i \u003e= 0; i-- {\n\t\topp := len(domComp) - 1 - i\n\t\tdomComp[i], domComp[opp] = domComp[opp], domComp[i]\n\t}\n\tfor i := len(patComp)/2 - 1; i \u003e= 0; i-- {\n\t\topp := len(patComp) - 1 - i\n\t\tpatComp[i], patComp[opp] = patComp[opp], patComp[i]\n\t}\n\n\tfor i, v := range domComp {\n\t\tif len(patComp) \u003c= i {\n\t\t\treturn false\n\t\t}\n\t\tp := patComp[i]\n\t\tif p == \"*\" {\n\t\t\treturn true\n\t\t}\n\t\tif p != v {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlAllowOrigin      = \"Access-Control-Allow-Origin\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlAllowCredentials = \"Access-Control-Allow-Credentials\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlExposeHeaders    = \"Access-Control-Expose-Headers\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlRequestMethod    = \"Access-Control-Request-Method\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlRequestHeaders   = \"Access-Control-Request-Headers\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlAllowMethods     = \"Access-Control-Allow-Methods\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlAllowHeaders     = \"Access-Control-Allow-Headers\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAccessControlMaxAge           = \"Access-Control-Max-Age\"",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "Regexp struct {\n\texpr           string       // as passed to Compile\n\tprog           *syntax.Prog // compiled program\n\tonepass        *onePassProg // onepass program or nil\n\tnumSubexp      int\n\tmaxBitStateLen int\n\tsubexpNames    []string\n\tprefix         string         // required prefix in unanchored matches\n\tprefixBytes    []byte         // prefix, as a []byte\n\tprefixRune     rune           // first rune in prefix\n\tprefixEnd      uint32         // pc for last rune in prefix\n\tmpool          int            // pool for machines\n\tmatchcap       int            // size of recorded match lengths\n\tprefixComplete bool           // prefix is the entire regexp\n\tcond           syntax.EmptyOp // empty-width conditions required at start of match\n\tminInputLen    int            // minimum length of the input in bytes\n\n\t// This field can be modified by the Longest method,\n\t// but it is otherwise read-only.\n\tlongest bool // whether regexp prefers leftmost-longest match\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "func QuoteMeta(s string) string {\n\t// A byte loop is correct because all metacharacters are ASCII.\n\tvar i int\n\tfor i = 0; i \u003c len(s); i++ {\n\t\tif special(s[i]) {\n\t\t\tbreak\n\t\t}\n\t}\n\t// No meta characters found, so return original string.\n\tif i \u003e= len(s) {\n\t\treturn s\n\t}\n\n\tb := make([]byte, 2*len(s)-i)\n\tcopy(b, s[:i])\n\tj := i\n\tfor ; i \u003c len(s); i++ {\n\t\tif special(s[i]) {\n\t\t\tb[j] = '\\\\'\n\t\t\tj++\n\t\t}\n\t\tb[j] = s[i]\n\t\tj++\n\t}\n\treturn string(b[:j])\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ReplaceAll(s, old, new string) string {\n\treturn Replace(s, old, new, -1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "func Compile(expr string) (*Regexp, error) {\n\treturn compile(expr, syntax.Perl, false)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Join(elems []string, sep string) string {\n\tswitch len(elems) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn elems[0]\n\t}\n\n\tvar n int\n\tif len(sep) \u003e 0 {\n\t\tif len(sep) \u003e= maxInt/(len(elems)-1) {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(sep) * (len(elems) - 1)\n\t}\n\tfor _, elem := range elems {\n\t\tif len(elem) \u003e maxInt-n {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(elem)\n\t}\n\n\tvar b Builder\n\tb.Grow(n)\n\tb.WriteString(elems[0])\n\tfor _, s := range elems[1:] {\n\t\tb.WriteString(sep)\n\t\tb.WriteString(s)\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/itoa.go",
          "code_snippet": "func Itoa(i int) string {\n\treturn FormatInt(int64(i), 10)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Add(key, value string) {\n\ttextproto.MIMEHeader(h).Add(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusNoContent            = 204",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Contains(s, substr string) bool {\n\treturn Index(s, substr) \u003e= 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/regexp/regexp.go",
          "code_snippet": "func (re *Regexp) MatchString(s string) bool {\n\treturn re.doMatch(nil, nil, s)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        151,
        152,
        153,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        168,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        180,
        181,
        182,
        183,
        184,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        213,
        214,
        215,
        216,
        217,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        235,
        236,
        237,
        239,
        240,
        241,
        245,
        246,
        247,
        248,
        249,
        250,
        252,
        253,
        254,
        255,
        256,
        263,
        264,
        265,
        266,
        267,
        270,
        271,
        272,
        273,
        276,
        277,
        280,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        293,
        295,
        296,
        297,
        298,
        299,
        301,
        302,
        303,
        304
      ],
      "cover_details": {
        "line_cover_rate": 0.7732558139534884
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:redirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestNonWWWRedirectWithConfig"
        }
      ],
      "name": "redirect",
      "signature": "redirect (config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc",
      "ground_truth": "func redirect(config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRedirectConfig.Skipper\n\t}\n\tif config.Code == 0 {\n\t\tconfig.Code = DefaultRedirectConfig.Code\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq, scheme := c.Request(), c.Scheme()\n\t\t\thost := req.Host\n\t\t\tif ok, url := cb(scheme, host, req.RequestURI); ok {\n\t\t\t\treturn c.Redirect(config.Code, url)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// NonWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.",
      "function_statement": "// NonWWWRedirectWithConfig returns an HTTPSRedirect middleware with config.",
      "start_line": 132,
      "end_line": 155,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "RedirectConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional. Default value http.StatusMovedPermanently.\n\tCode int `yaml:\"code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "redirectLogic func(scheme, host, uri string) (ok bool, url string)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "DefaultRedirectConfig = RedirectConfig{\n\tSkipper: DefaultSkipper,\n\tCode:    http.StatusMovedPermanently,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        140,
        141,
        142,
        143,
        144,
        146,
        147,
        148,
        149,
        150,
        152
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int32s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Int32s",
      "signature": "(b *ValueBinder) Int32s (sourceParam string, dest *[]int32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int32s(sourceParam string, dest *[]int32) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Int32s binds parameter to slice of int32",
      "function_statement": "// Int32s binds parameter to slice of int32",
      "start_line": 632,
      "end_line": 634,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        632,
        633,
        634
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:SetInternal",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        }
      ],
      "name": "SetInternal",
      "signature": "(he *HTTPError) SetInternal (err error) *HTTPError",
      "ground_truth": "func (he *HTTPError) SetInternal(err error) *HTTPError {\n\the.Internal = err\n\treturn he\n}",
      "function_comment": "// SetInternal sets error to HTTPError.Internal",
      "function_statement": "// SetInternal sets error to HTTPError.Internal",
      "start_line": 904,
      "end_line": 907,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        904,
        905,
        906,
        907
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt64",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustInt64",
      "signature": "(b *ValueBinder) MustInt64 (sourceParam string, dest *int64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt64(sourceParam string, dest *int64) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 64, true)\n}",
      "function_comment": "// MustInt64 requires parameter value to exist to bind to int64 variable. Returns error when value does not exist",
      "function_statement": "// MustInt64 requires parameter value to exist to bind to int64 variable. Returns error when value does not exist",
      "start_line": 459,
      "end_line": 461,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        459,
        460,
        461
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:String",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        }
      ],
      "name": "String",
      "signature": "(b *ValueBinder) String (sourceParam string, dest *string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) String(sourceParam string, dest *string) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\treturn b\n\t}\n\t*dest = value\n\treturn b\n}",
      "function_comment": "// String binds parameter to string variable",
      "function_statement": "// String binds parameter to string variable",
      "start_line": 238,
      "end_line": 249,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        238,
        239,
        240,
        241,
        243,
        244,
        245,
        246,
        247,
        248
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:TextUnmarshaler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        }
      ],
      "name": "TextUnmarshaler",
      "signature": "(b *ValueBinder) TextUnmarshaler (sourceParam string, dest encoding.TextUnmarshaler) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) TextUnmarshaler(sourceParam string, dest encoding.TextUnmarshaler) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\ttmp := b.ValueFunc(sourceParam)\n\tif tmp == \"\" {\n\t\treturn b\n\t}\n\n\tif err := dest.UnmarshalText([]byte(tmp)); err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"failed to bind field value to encoding.TextUnmarshaler interface\", err))\n\t}\n\treturn b\n}",
      "function_comment": "// TextUnmarshaler binds parameter to destination implementing encoding.TextUnmarshaler interface",
      "function_statement": "// TextUnmarshaler binds parameter to destination implementing encoding.TextUnmarshaler interface",
      "start_line": 368,
      "end_line": 382,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/encoding.go",
          "code_snippet": "TextUnmarshaler interface {\n\tUnmarshalText(text []byte) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        368,
        369,
        370,
        371,
        373,
        374,
        375,
        376,
        378,
        379,
        380,
        381
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:ExtractIPFromRealIPHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        }
      ],
      "name": "ExtractIPFromRealIPHeader",
      "signature": "ExtractIPFromRealIPHeader (options ...TrustOption) IPExtractor",
      "ground_truth": "func ExtractIPFromRealIPHeader(options ...TrustOption) IPExtractor {\n\tchecker := newIPChecker(options)\n\treturn func(req *http.Request) string {\n\t\tdirectIP := extractIP(req)\n\t\trealIP := req.Header.Get(HeaderXRealIP)\n\t\tif realIP == \"\" {\n\t\t\treturn directIP\n\t\t}\n\n\t\tif checker.trust(net.ParseIP(directIP)) {\n\t\t\trealIP = strings.TrimPrefix(realIP, \"[\")\n\t\t\trealIP = strings.TrimSuffix(realIP, \"]\")\n\t\t\tif rIP := net.ParseIP(realIP); rIP != nil {\n\t\t\t\treturn realIP\n\t\t\t}\n\t\t}\n\n\t\treturn directIP\n\t}\n}",
      "function_comment": "// ExtractIPFromRealIPHeader extracts IP address using x-real-ip header.\n// Use this if you put proxy which uses this header.",
      "function_statement": "// ExtractIPFromRealIPHeader extracts IP address using x-real-ip header.\n// Use this if you put proxy which uses this header.",
      "start_line": 234,
      "end_line": 253,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "IPExtractor func(*http.Request) string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func newIPChecker(configs []TrustOption) *ipChecker {\n\tchecker := \u0026ipChecker{trustLoopback: true, trustLinkLocal: true, trustPrivateNet: true}\n\tfor _, configure := range configs {\n\t\tconfigure(checker)\n\t}\n\treturn checker\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func extractIP(req *http.Request) string {\n\thost, _, err := net.SplitHostPort(req.RemoteAddr)\n\tif err != nil {\n\t\tif net.ParseIP(req.RemoteAddr) != nil {\n\t\t\treturn req.RemoteAddr\n\t\t}\n\t\treturn \"\"\n\t}\n\treturn host\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXRealIP             = \"X-Real-Ip\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func (c *ipChecker) trust(ip net.IP) bool {\n\tif c.trustLoopback \u0026\u0026 ip.IsLoopback() {\n\t\treturn true\n\t}\n\tif c.trustLinkLocal \u0026\u0026 ip.IsLinkLocalUnicast() {\n\t\treturn true\n\t}\n\tif c.trustPrivateNet \u0026\u0026 isPrivateIPRange(ip) {\n\t\treturn true\n\t}\n\tfor _, trustedRange := range c.trustExtraRanges {\n\t\tif trustedRange.Contains(ip) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func ParseIP(s string) IP {\n\tif addr, valid := parseIP(s); valid {\n\t\treturn IP(addr[:])\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimPrefix(s, prefix string) string {\n\treturn stringslite.TrimPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimSuffix(s, suffix string) string {\n\treturn stringslite.TrimSuffix(s, suffix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        243,
        244,
        245,
        246,
        247,
        248,
        251
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustDurations",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        }
      ],
      "name": "MustDurations",
      "signature": "(b *ValueBinder) MustDurations (sourceParam string, dest *[]time.Duration) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustDurations(sourceParam string, dest *[]time.Duration) *ValueBinder {\n\treturn b.durationsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustDurations requires parameter values to exist to bind to slice of time.Duration variables. Returns error when values does not exist",
      "function_statement": "// MustDurations requires parameter values to exist to bind to slice of time.Duration variables. Returns error when values does not exist",
      "start_line": 1198,
      "end_line": 1200,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) durationsValue(sourceParam string, dest *[]time.Duration, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.durations(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1198,
        1199,
        1200
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context_fs.go:fsFile",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        }
      ],
      "name": "fsFile",
      "signature": "fsFile (c Context, file string, filesystem fs.FS) error",
      "ground_truth": "func fsFile(c Context, file string, filesystem fs.FS) error {\n\tf, err := filesystem.Open(file)\n\tif err != nil {\n\t\treturn ErrNotFound\n\t}\n\tdefer f.Close()\n\n\tfi, _ := f.Stat()\n\tif fi.IsDir() {\n\t\tfile = filepath.ToSlash(filepath.Join(file, indexPage)) // ToSlash is necessary for Windows. fs.Open and os.Open are different in that aspect.\n\t\tf, err = filesystem.Open(file)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\t\tdefer f.Close()\n\t\tif fi, err = f.Stat(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tff, ok := f.(io.ReadSeeker)\n\tif !ok {\n\t\treturn errors.New(\"file does not implement io.ReadSeeker\")\n\t}\n\thttp.ServeContent(c.Response(), c.Request(), fi.Name(), fi.ModTime(), ff)\n\treturn nil\n}",
      "function_comment": "// FileFS serves file from given file system.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths",
      "function_statement": "// FileFS serves file from given file system.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths",
      "start_line": 27,
      "end_line": 52,
      "file_path": "./context_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrNotFound                      = NewHTTPError(http.StatusNotFound)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "indexPage     = \"index.html\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "File interface {\n\tStat() (FileInfo, error)\n\tRead([]byte) (int, error)\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FileInfo interface {\n\tName() string       // base name of the file\n\tSize() int64        // length in bytes for regular files; system-dependent for others\n\tMode() FileMode     // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool        // abbreviation for Mode().IsDir()\n\tSys() any           // underlying data source (can return nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func ToSlash(path string) string {\n\treturn filepathlite.ToSlash(path)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func Join(elem ...string) string {\n\treturn join(elem)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "ReadSeeker interface {\n\tReader\n\tSeeker\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker) {\n\tsizeFunc := func() (int64, error) {\n\t\tsize, err := content.Seek(0, io.SeekEnd)\n\t\tif err != nil {\n\t\t\treturn 0, errSeeker\n\t\t}\n\t\t_, err = content.Seek(0, io.SeekStart)\n\t\tif err != nil {\n\t\t\treturn 0, errSeeker\n\t\t}\n\t\treturn size, nil\n\t}\n\tserveContent(w, req, name, modtime, sizeFunc, content)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        46,
        47,
        50,
        51
      ],
      "cover_details": {
        "line_cover_rate": 0.7692307692307693
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:Before",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        }
      ],
      "name": "Before",
      "signature": "(r *Response) Before (fn func())",
      "ground_truth": "func (r *Response) Before(fn func()) {\n\tr.beforeFuncs = append(r.beforeFuncs, fn)\n}",
      "function_comment": "// Before registers a function which is called just before the response is written.",
      "function_statement": "// Before registers a function which is called just before the response is written.",
      "start_line": 43,
      "end_line": 45,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:OPTIONS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "OPTIONS",
      "signature": "(g *Group) OPTIONS (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) OPTIONS(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodOptions, path, h, m...)\n}",
      "function_comment": "// OPTIONS implements `Echo#OPTIONS()` for sub-routes within the Group.",
      "function_statement": "// OPTIONS implements `Echo#OPTIONS()` for sub-routes within the Group.",
      "start_line": 56,
      "end_line": 58,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodOptions = \"OPTIONS\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        56,
        57,
        58
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:StaticFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        }
      ],
      "name": "StaticFS",
      "signature": "(e *Echo) StaticFS (pathPrefix string, filesystem fs.FS) *Route",
      "ground_truth": "func (e *Echo) StaticFS(pathPrefix string, filesystem fs.FS) *Route {\n\treturn e.Add(\n\t\thttp.MethodGet,\n\t\tpathPrefix+\"*\",\n\t\tStaticDirectoryHandler(filesystem, false),\n\t)\n}",
      "function_comment": "// StaticFS registers a new route with path prefix to serve static files from the provided file system.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n// including `assets/images` as their prefix.",
      "function_statement": "// StaticFS registers a new route with path prefix to serve static files from the provided file system.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n// including `assets/images` as their prefix.",
      "start_line": 47,
      "end_line": 53,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func StaticDirectoryHandler(fileSystem fs.FS, disablePathUnescaping bool) HandlerFunc {\n\treturn func(c Context) error {\n\t\tp := c.Param(\"*\")\n\t\tif !disablePathUnescaping { // when router is already unescaping we do not want to do is twice\n\t\t\ttmpPath, err := url.PathUnescape(p)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to unescape path variable: %w\", err)\n\t\t\t}\n\t\t\tp = tmpPath\n\t\t}\n\n\t\t// fs.FS.Open() already assumes that file names are relative to FS root path and considers name with prefix `/` as invalid\n\t\tname := filepath.ToSlash(filepath.Clean(strings.TrimPrefix(p, \"/\")))\n\t\tfi, err := fs.Stat(fileSystem, name)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\n\t\t// If the request is for a directory and does not end with \"/\"\n\t\tp = c.Request().URL.Path // path must not be empty.\n\t\tif fi.IsDir() \u0026\u0026 len(p) \u003e 0 \u0026\u0026 p[len(p)-1] != '/' {\n\t\t\t// Redirect to ends with \"/\"\n\t\t\treturn c.Redirect(http.StatusMovedPermanently, sanitizeURI(p+\"/\"))\n\t\t}\n\t\treturn fsFile(c, name, fileSystem)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        47,
        48,
        49,
        50,
        51,
        52,
        53
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:BodyDumpWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDump"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpFails"
        }
      ],
      "name": "BodyDumpWithConfig",
      "signature": "BodyDumpWithConfig (config BodyDumpConfig) echo.MiddlewareFunc",
      "ground_truth": "func BodyDumpWithConfig(config BodyDumpConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Handler == nil {\n\t\tpanic(\"echo: body-dump middleware requires a handler function\")\n\t}\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBodyDumpConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\t// Request\n\t\t\treqBody := []byte{}\n\t\t\tif c.Request().Body != nil { // Read\n\t\t\t\treqBody, _ = io.ReadAll(c.Request().Body)\n\t\t\t}\n\t\t\tc.Request().Body = io.NopCloser(bytes.NewBuffer(reqBody)) // Reset\n\n\t\t\t// Response\n\t\t\tresBody := new(bytes.Buffer)\n\t\t\tmw := io.MultiWriter(c.Response().Writer, resBody)\n\t\t\twriter := \u0026bodyDumpResponseWriter{Writer: mw, ResponseWriter: c.Response().Writer}\n\t\t\tc.Response().Writer = writer\n\n\t\t\tif err = next(c); err != nil {\n\t\t\t\tc.Error(err)\n\t\t\t}\n\n\t\t\t// Callback\n\t\t\tconfig.Handler(c, reqBody, resBody.Bytes())\n\n\t\t\treturn\n\t\t}\n\t}\n}",
      "function_comment": "// BodyDumpWithConfig returns a BodyDump middleware with config.\n// See: `BodyDump()`.",
      "function_statement": "// BodyDumpWithConfig returns a BodyDump middleware with config.\n// See: `BodyDump()`.",
      "start_line": 52,
      "end_line": 90,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "BodyDumpConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Handler receives request and response payload.\n\t// Required.\n\tHandler BodyDumpHandler\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "DefaultBodyDumpConfig = BodyDumpConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "bodyDumpResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func ReadAll(r Reader) ([]byte, error) {\n\tb := make([]byte, 0, 512)\n\tfor {\n\t\tn, err := r.Read(b[len(b):cap(b)])\n\t\tb = b[:len(b)+n]\n\t\tif err != nil {\n\t\t\tif err == EOF {\n\t\t\t\terr = nil\n\t\t\t}\n\t\t\treturn b, err\n\t\t}\n\n\t\tif len(b) == cap(b) {\n\t\t\t// Add more capacity (let append pick how much).\n\t\t\tb = append(b, 0)[:len(b)]\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func NopCloser(r Reader) ReadCloser {\n\tif _, ok := r.(WriterTo); ok {\n\t\treturn nopCloserWriterTo{r}\n\t}\n\treturn nopCloser{r}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func NewBuffer(buf []byte) *Buffer { return \u0026Buffer{buf: buf} }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/multi.go",
          "code_snippet": "func MultiWriter(writers ...Writer) Writer {\n\tallWriters := make([]Writer, 0, len(writers))\n\tfor _, w := range writers {\n\t\tif mw, ok := w.(*multiWriter); ok {\n\t\t\tallWriters = append(allWriters, mw.writers...)\n\t\t} else {\n\t\t\tallWriters = append(allWriters, w)\n\t\t}\n\t}\n\treturn \u0026multiWriter{allWriters}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        52,
        53,
        54,
        55,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        85,
        86,
        87
      ],
      "cover_details": {
        "line_cover_rate": 0.7692307692307693
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:GzipWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturnedInvalidConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        }
      ],
      "name": "GzipWithConfig",
      "signature": "GzipWithConfig (config GzipConfig) echo.MiddlewareFunc",
      "ground_truth": "func GzipWithConfig(config GzipConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultGzipConfig.Skipper\n\t}\n\tif config.Level == 0 {\n\t\tconfig.Level = DefaultGzipConfig.Level\n\t}\n\tif config.MinLength \u003c 0 {\n\t\tconfig.MinLength = DefaultGzipConfig.MinLength\n\t}\n\n\tpool := gzipCompressPool(config)\n\tbpool := bufferPool()\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tres := c.Response()\n\t\t\tres.Header().Add(echo.HeaderVary, echo.HeaderAcceptEncoding)\n\t\t\tif strings.Contains(c.Request().Header.Get(echo.HeaderAcceptEncoding), gzipScheme) {\n\t\t\t\ti := pool.Get()\n\t\t\t\tw, ok := i.(*gzip.Writer)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, i.(error).Error())\n\t\t\t\t}\n\t\t\t\trw := res.Writer\n\t\t\t\tw.Reset(rw)\n\n\t\t\t\tbuf := bpool.Get().(*bytes.Buffer)\n\t\t\t\tbuf.Reset()\n\n\t\t\t\tgrw := \u0026gzipResponseWriter{Writer: w, ResponseWriter: rw, minLength: config.MinLength, buffer: buf}\n\t\t\t\tdefer func() {\n\t\t\t\t\t// There are different reasons for cases when we have not yet written response to the client and now need to do so.\n\t\t\t\t\t// a) handler response had only response code and no response body (ala 404 or redirects etc). Response code need to be written now.\n\t\t\t\t\t// b) body is shorter than our minimum length threshold and being buffered currently and needs to be written\n\t\t\t\t\tif !grw.wroteBody {\n\t\t\t\t\t\tif res.Header().Get(echo.HeaderContentEncoding) == gzipScheme {\n\t\t\t\t\t\t\tres.Header().Del(echo.HeaderContentEncoding)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif grw.wroteHeader {\n\t\t\t\t\t\t\trw.WriteHeader(grw.code)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// We have to reset response to it's pristine state when\n\t\t\t\t\t\t// nothing is written to body or error is returned.\n\t\t\t\t\t\t// See issue #424, #407.\n\t\t\t\t\t\tres.Writer = rw\n\t\t\t\t\t\tw.Reset(io.Discard)\n\t\t\t\t\t} else if !grw.minLengthExceeded {\n\t\t\t\t\t\t// Write uncompressed response\n\t\t\t\t\t\tres.Writer = rw\n\t\t\t\t\t\tif grw.wroteHeader {\n\t\t\t\t\t\t\tgrw.ResponseWriter.WriteHeader(grw.code)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgrw.buffer.WriteTo(rw)\n\t\t\t\t\t\tw.Reset(io.Discard)\n\t\t\t\t\t}\n\t\t\t\t\tw.Close()\n\t\t\t\t\tbpool.Put(buf)\n\t\t\t\t\tpool.Put(w)\n\t\t\t\t}()\n\t\t\t\tres.Writer = grw\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.\n// See: `Gzip()`.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.\n// See: `Gzip()`.",
      "start_line": 72,
      "end_line": 142,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "GzipConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Gzip compression level.\n\t// Optional. Default value -1.\n\tLevel int `yaml:\"level\"`\n\n\t// Length threshold before gzip compression is applied.\n\t// Optional. Default value 0.\n\t//\n\t// Most of the time you will not need to change the default. Compressing\n\t// a short response might increase the transmitted data because of the\n\t// gzip format overhead. Compressing the response will also consume CPU\n\t// and time on the server and the client (for decompressing). Depending on\n\t// your use case such a threshold might be useful.\n\t//\n\t// See also:\n\t// https://webmasters.stackexchange.com/questions/31750/what-is-recommended-minimum-object-size-for-gzip-performance-benefits\n\tMinLength int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "DefaultGzipConfig = GzipConfig{\n\tSkipper:   DefaultSkipper,\n\tLevel:     -1,\n\tMinLength: 0,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "func gzipCompressPool(config GzipConfig) sync.Pool {\n\treturn sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\tw, err := gzip.NewWriterLevel(io.Discard, config.Level)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn w\n\t\t},\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "func bufferPool() sync.Pool {\n\treturn sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\tb := \u0026bytes.Buffer{}\n\t\t\treturn b\n\t\t},\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderVary                = \"Vary\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAcceptEncoding = \"Accept-Encoding\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipScheme = \"gzip\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n\twroteHeader       bool\n\twroteBody         bool\n\tminLength         int\n\tminLengthExceeded bool\n\tbuffer            *bytes.Buffer\n\tcode              int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentEncoding     = \"Content-Encoding\"",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Add(key, value string) {\n\ttextproto.MIMEHeader(h).Add(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Contains(s, substr string) bool {\n\treturn Index(s, substr) \u003e= 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gzip.go",
          "code_snippet": "Writer struct {\n\tHeader      // written at first call to Write, Flush, or Close\n\tw           io.Writer\n\tlevel       int\n\twroteHeader bool\n\tclosed      bool\n\tbuf         [10]byte\n\tcompressor  *flate.Writer\n\tdigest      uint32 // CRC-32, IEEE polynomial (section 8)\n\tsize        uint32 // Uncompressed size (section 2.3.1)\n\terr         error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusInternalServerError           = 500",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gzip.go",
          "code_snippet": "func (z *Writer) Reset(w io.Writer) {\n\tz.init(w, z.level)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Reset() {\n\tb.buf = b.buf[:0]\n\tb.off = 0\n\tb.lastRead = opInvalid\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Del(key string) {\n\ttextproto.MIMEHeader(h).Del(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Discard Writer = discard{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteTo(w io.Writer) (n int64, err error) {\n\tb.lastRead = opInvalid\n\tif nBytes := b.Len(); nBytes \u003e 0 {\n\t\tm, e := w.Write(b.buf[b.off:])\n\t\tif m \u003e nBytes {\n\t\t\tpanic(\"bytes.Buffer.WriteTo: invalid Write count\")\n\t\t}\n\t\tb.off += m\n\t\tn = int64(m)\n\t\tif e != nil {\n\t\t\treturn n, e\n\t\t}\n\t\t// all bytes should have been written, by definition of\n\t\t// Write method in io.Writer\n\t\tif m != nBytes {\n\t\t\treturn n, io.ErrShortWrite\n\t\t}\n\t}\n\t// Buffer is now empty; reset.\n\tb.Reset()\n\treturn n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gzip.go",
          "code_snippet": "func (z *Writer) Close() error {\n\tif z.err != nil {\n\t\treturn z.err\n\t}\n\tif z.closed {\n\t\treturn nil\n\t}\n\tz.closed = true\n\tif !z.wroteHeader {\n\t\tz.Write(nil)\n\t\tif z.err != nil {\n\t\t\treturn z.err\n\t\t}\n\t}\n\tz.err = z.compressor.Close()\n\tif z.err != nil {\n\t\treturn z.err\n\t}\n\tle.PutUint32(z.buf[:4], z.digest)\n\tle.PutUint32(z.buf[4:8], z.size)\n\t_, z.err = z.w.Write(z.buf[:8])\n\treturn z.err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        84,
        85,
        86,
        87,
        88,
        89,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        116,
        117,
        118,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        133,
        134,
        135,
        137,
        139
      ],
      "cover_details": {
        "line_cover_rate": 0.7605633802816901
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/context_timeout.go:ContextTimeoutWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutCanHandleContextDeadlineOnNextHandler"
        }
      ],
      "name": "ContextTimeoutWithConfig",
      "signature": "ContextTimeoutWithConfig (config ContextTimeoutConfig) echo.MiddlewareFunc",
      "ground_truth": "func ContextTimeoutWithConfig(config ContextTimeoutConfig) echo.MiddlewareFunc {\n\tmw, err := config.ToMiddleware()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn mw\n}",
      "function_comment": "// ContextTimeoutWithConfig returns a Timeout middleware with config.",
      "function_statement": "// ContextTimeoutWithConfig returns a Timeout middleware with config.",
      "start_line": 33,
      "end_line": 39,
      "file_path": "./middleware/context_timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/context_timeout.go",
          "code_snippet": "ContextTimeoutConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// ErrorHandler is a function when error arises in middleware execution.\n\tErrorHandler func(err error, c echo.Context) error\n\n\t// Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n\tTimeout time.Duration\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/context_timeout.go",
          "code_snippet": "func (config ContextTimeoutConfig) ToMiddleware() (echo.MiddlewareFunc, error) {\n\tif config.Timeout == 0 {\n\t\treturn nil, errors.New(\"timeout must be set\")\n\t}\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultSkipper\n\t}\n\tif config.ErrorHandler == nil {\n\t\tconfig.ErrorHandler = func(err error, c echo.Context) error {\n\t\t\tif err != nil \u0026\u0026 errors.Is(err, context.DeadlineExceeded) {\n\t\t\t\treturn echo.ErrServiceUnavailable.WithInternal(err)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\ttimeoutContext, cancel := context.WithTimeout(c.Request().Context(), config.Timeout)\n\t\t\tdefer cancel()\n\n\t\t\tc.SetRequest(c.Request().WithContext(timeoutContext))\n\n\t\t\tif err := next(c); err != nil {\n\t\t\t\treturn config.ErrorHandler(err, c)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}, nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        38
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/csrf.go:CSRF",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        }
      ],
      "name": "CSRF",
      "signature": "CSRF () echo.MiddlewareFunc",
      "ground_truth": "func CSRF() echo.MiddlewareFunc {\n\tc := DefaultCSRFConfig\n\treturn CSRFWithConfig(c)\n}",
      "function_comment": "// CSRF returns a Cross-Site Request Forgery (CSRF) middleware.\n// See: https://en.wikipedia.org/wiki/Cross-site_request_forgery",
      "function_statement": "// CSRF returns a Cross-Site Request Forgery (CSRF) middleware.\n// See: https://en.wikipedia.org/wiki/Cross-site_request_forgery",
      "start_line": 89,
      "end_line": 92,
      "file_path": "./middleware/csrf.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/csrf.go",
          "code_snippet": "DefaultCSRFConfig = CSRFConfig{\n\tSkipper:        DefaultSkipper,\n\tTokenLength:    32,\n\tTokenLookup:    \"header:\" + echo.HeaderXCSRFToken,\n\tContextKey:     \"csrf\",\n\tCookieName:     \"_csrf\",\n\tCookieMaxAge:   86400,\n\tCookieSameSite: http.SameSiteDefaultMode,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/csrf.go",
          "code_snippet": "func CSRFWithConfig(config CSRFConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultCSRFConfig.Skipper\n\t}\n\tif config.TokenLength == 0 {\n\t\tconfig.TokenLength = DefaultCSRFConfig.TokenLength\n\t}\n\n\tif config.TokenLookup == \"\" {\n\t\tconfig.TokenLookup = DefaultCSRFConfig.TokenLookup\n\t}\n\tif config.ContextKey == \"\" {\n\t\tconfig.ContextKey = DefaultCSRFConfig.ContextKey\n\t}\n\tif config.CookieName == \"\" {\n\t\tconfig.CookieName = DefaultCSRFConfig.CookieName\n\t}\n\tif config.CookieMaxAge == 0 {\n\t\tconfig.CookieMaxAge = DefaultCSRFConfig.CookieMaxAge\n\t}\n\tif config.CookieSameSite == http.SameSiteNoneMode {\n\t\tconfig.CookieSecure = true\n\t}\n\n\textractors, cErr := CreateExtractors(config.TokenLookup)\n\tif cErr != nil {\n\t\tpanic(cErr)\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\ttoken := \"\"\n\t\t\tif k, err := c.Cookie(config.CookieName); err != nil {\n\t\t\t\ttoken = randomString(config.TokenLength)\n\t\t\t} else {\n\t\t\t\ttoken = k.Value // Reuse token\n\t\t\t}\n\n\t\t\tswitch c.Request().Method {\n\t\t\tcase http.MethodGet, http.MethodHead, http.MethodOptions, http.MethodTrace:\n\t\t\tdefault:\n\t\t\t\t// Validate token only for requests which are not defined as 'safe' by RFC7231\n\t\t\t\tvar lastExtractorErr error\n\t\t\t\tvar lastTokenErr error\n\t\t\touter:\n\t\t\t\tfor _, extractor := range extractors {\n\t\t\t\t\tclientTokens, err := extractor(c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlastExtractorErr = err\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tfor _, clientToken := range clientTokens {\n\t\t\t\t\t\tif validateCSRFToken(token, clientToken) {\n\t\t\t\t\t\t\tlastTokenErr = nil\n\t\t\t\t\t\t\tlastExtractorErr = nil\n\t\t\t\t\t\t\tbreak outer\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastTokenErr = ErrCSRFInvalid\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar finalErr error\n\t\t\t\tif lastTokenErr != nil {\n\t\t\t\t\tfinalErr = lastTokenErr\n\t\t\t\t} else if lastExtractorErr != nil {\n\t\t\t\t\t// ugly part to preserve backwards compatible errors. someone could rely on them\n\t\t\t\t\tif lastExtractorErr == errQueryExtractorValueMissing {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, \"missing csrf token in the query string\")\n\t\t\t\t\t} else if lastExtractorErr == errFormExtractorValueMissing {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, \"missing csrf token in the form parameter\")\n\t\t\t\t\t} else if lastExtractorErr == errHeaderExtractorValueMissing {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, \"missing csrf token in request header\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastExtractorErr = echo.NewHTTPError(http.StatusBadRequest, lastExtractorErr.Error())\n\t\t\t\t\t}\n\t\t\t\t\tfinalErr = lastExtractorErr\n\t\t\t\t}\n\n\t\t\t\tif finalErr != nil {\n\t\t\t\t\tif config.ErrorHandler != nil {\n\t\t\t\t\t\treturn config.ErrorHandler(finalErr, c)\n\t\t\t\t\t}\n\t\t\t\t\treturn finalErr\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set CSRF cookie\n\t\t\tcookie := new(http.Cookie)\n\t\t\tcookie.Name = config.CookieName\n\t\t\tcookie.Value = token\n\t\t\tif config.CookiePath != \"\" {\n\t\t\t\tcookie.Path = config.CookiePath\n\t\t\t}\n\t\t\tif config.CookieDomain != \"\" {\n\t\t\t\tcookie.Domain = config.CookieDomain\n\t\t\t}\n\t\t\tif config.CookieSameSite != http.SameSiteDefaultMode {\n\t\t\t\tcookie.SameSite = config.CookieSameSite\n\t\t\t}\n\t\t\tcookie.Expires = time.Now().Add(time.Duration(config.CookieMaxAge) * time.Second)\n\t\t\tcookie.Secure = config.CookieSecure\n\t\t\tcookie.HttpOnly = config.CookieHTTPOnly\n\t\t\tc.SetCookie(cookie)\n\n\t\t\t// Store token in the context\n\t\t\tc.Set(config.ContextKey, token)\n\n\t\t\t// Protect clients from caching the response\n\t\t\tc.Response().Header().Add(echo.HeaderVary, echo.HeaderCookie)\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        89,
        90,
        91,
        92
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:setFloatField",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        }
      ],
      "name": "setFloatField",
      "signature": "setFloatField (value string, bitSize int, field reflect.Value) error",
      "ground_truth": "func setFloatField(value string, bitSize int, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"0.0\"\n\t}\n\tfloatVal, err := strconv.ParseFloat(value, bitSize)\n\tif err == nil {\n\t\tfield.SetFloat(floatVal)\n\t}\n\treturn err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 433,
      "end_line": 442,
      "file_path": "./bind.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atof.go",
          "code_snippet": "func ParseFloat(s string, bitSize int) (float64, error) {\n\tf, n, err := parseFloatPrefix(s, bitSize)\n\tif n != len(s) \u0026\u0026 (err == nil || err.(*NumError).Err != ErrSyntax) {\n\t\treturn 0, syntaxError(fnParseFloat, s)\n\t}\n\treturn f, err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) SetFloat(x float64) {\n\tv.mustBeAssignable()\n\tswitch k := v.kind(); k {\n\tdefault:\n\t\tpanic(\u0026ValueError{\"reflect.Value.SetFloat\", v.kind()})\n\tcase Float32:\n\t\t*(*float32)(v.ptr) = float32(x)\n\tcase Float64:\n\t\t*(*float64)(v.ptr) = x\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        433,
        434,
        437,
        438,
        439,
        440,
        441
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int32",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Int32",
      "signature": "(b *ValueBinder) Int32 (sourceParam string, dest *int32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int32(sourceParam string, dest *int32) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 32, false)\n}",
      "function_comment": "// Int32 binds parameter to int32 variable",
      "function_statement": "// Int32 binds parameter to int32 variable",
      "start_line": 464,
      "end_line": 466,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        464,
        465,
        466
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Byte",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Byte",
      "signature": "(b *ValueBinder) Byte (sourceParam string, dest *byte) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Byte(sourceParam string, dest *byte) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 8, false)\n}",
      "function_comment": "// Byte binds parameter to byte variable",
      "function_statement": "// Byte binds parameter to byte variable",
      "start_line": 712,
      "end_line": 714,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        712,
        713,
        714
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:StartH2CServer",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        }
      ],
      "name": "StartH2CServer",
      "signature": "(e *Echo) StartH2CServer (address string, h2s *http2.Server) error",
      "ground_truth": "func (e *Echo) StartH2CServer(address string, h2s *http2.Server) error {\n\te.startupMutex.Lock()\n\t// Setup\n\ts := e.Server\n\ts.Addr = address\n\te.colorer.SetOutput(e.Logger.Output())\n\ts.ErrorLog = e.StdLogger\n\ts.Handler = h2c.NewHandler(e, h2s)\n\tif e.Debug {\n\t\te.Logger.SetLevel(log.DEBUG)\n\t}\n\n\tif !e.HideBanner {\n\t\te.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n\t}\n\n\tif e.Listener == nil {\n\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\tif err != nil {\n\t\t\te.startupMutex.Unlock()\n\t\t\treturn err\n\t\t}\n\t\te.Listener = l\n\t}\n\tif !e.HidePort {\n\t\te.colorer.Printf(\"⇨ http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n\t}\n\te.startupMutex.Unlock()\n\treturn s.Serve(e.Listener)\n}",
      "function_comment": "// StartH2CServer starts a custom http/2 server with h2c (HTTP/2 Cleartext).",
      "function_statement": "// StartH2CServer starts a custom http/2 server with h2c (HTTP/2 Cleartext).",
      "start_line": 833,
      "end_line": 862,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "banner = `\n   ____    __\n  / __/___/ /  ___\n / _// __/ _ \\/ _ \\\n/___/\\__/_//_/\\___/ %s\nHigh performance, minimalist Go web framework\n%s\n____________________________________O/_______\n                                    O\\\n`",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Version = \"4.13.4\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "website = \"https://echo.labstack.com\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func newListener(address, network string) (*tcpKeepAliveListener, error) {\n\tif network != \"tcp\" \u0026\u0026 network != \"tcp4\" \u0026\u0026 network != \"tcp6\" {\n\t\treturn nil, ErrInvalidListenerNetwork\n\t}\n\tl, err := net.Listen(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026tcpKeepAliveListener{l.(*net.TCPListener)}, nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) SetOutput(w io.Writer) {\n\tc.output = w\n\tif w, ok := w.(*os.File); !ok || !isatty.IsTerminal(w.Fd()) {\n\t\tc.disabled = true\n\t}\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/log/log.go",
          "code_snippet": "DEBUG Lvl = iota + 1",
          "ref_module": "log"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Printf(format string, args ...interface{}) {\n\tfmt.Fprintf(c.output, format, args...)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Red(msg interface{}, styles ...string) string {\n\treturn red(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Blue(msg interface{}, styles ...string) string {\n\treturn blue(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Green(msg interface{}, styles ...string) string {\n\treturn green(msg, styles, c)\n}",
          "ref_module": "color"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/net@v0.43.0/http2/server.go",
          "code_snippet": "Server struct {\n\t// MaxHandlers limits the number of http.Handler ServeHTTP goroutines\n\t// which may run at a time over all connections.\n\t// Negative or zero no limit.\n\t// TODO: implement\n\tMaxHandlers int\n\n\t// MaxConcurrentStreams optionally specifies the number of\n\t// concurrent streams that each client may have open at a\n\t// time. This is unrelated to the number of http.Handler goroutines\n\t// which may be active globally, which is MaxHandlers.\n\t// If zero, MaxConcurrentStreams defaults to at least 100, per\n\t// the HTTP/2 spec's recommendations.\n\tMaxConcurrentStreams uint32\n\n\t// MaxDecoderHeaderTableSize optionally specifies the http2\n\t// SETTINGS_HEADER_TABLE_SIZE to send in the initial settings frame. It\n\t// informs the remote endpoint of the maximum size of the header compression\n\t// table used to decode header blocks, in octets. If zero, the default value\n\t// of 4096 is used.\n\tMaxDecoderHeaderTableSize uint32\n\n\t// MaxEncoderHeaderTableSize optionally specifies an upper limit for the\n\t// header compression table used for encoding request headers. Received\n\t// SETTINGS_HEADER_TABLE_SIZE settings are capped at this limit. If zero,\n\t// the default value of 4096 is used.\n\tMaxEncoderHeaderTableSize uint32\n\n\t// MaxReadFrameSize optionally specifies the largest frame\n\t// this server is willing to read. A valid value is between\n\t// 16k and 16M, inclusive. If zero or otherwise invalid, a\n\t// default value is used.\n\tMaxReadFrameSize uint32\n\n\t// PermitProhibitedCipherSuites, if true, permits the use of\n\t// cipher suites prohibited by the HTTP/2 spec.\n\tPermitProhibitedCipherSuites bool\n\n\t// IdleTimeout specifies how long until idle clients should be\n\t// closed with a GOAWAY frame. PING frames are not considered\n\t// activity for the purposes of IdleTimeout.\n\t// If zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// ReadIdleTimeout is the timeout after which a health check using a ping\n\t// frame will be carried out if no frame is received on the connection.\n\t// If zero, no health check is performed.\n\tReadIdleTimeout time.Duration\n\n\t// PingTimeout is the timeout after which the connection will be closed\n\t// if a response to a ping is not received.\n\t// If zero, a default of 15 seconds is used.\n\tPingTimeout time.Duration\n\n\t// WriteByteTimeout is the timeout after which a connection will be\n\t// closed if no data can be written to it. The timeout begins when data is\n\t// available to write, and is extended whenever any bytes are written.\n\t// If zero or negative, there is no timeout.\n\tWriteByteTimeout time.Duration\n\n\t// MaxUploadBufferPerConnection is the size of the initial flow\n\t// control window for each connections. The HTTP/2 spec does not\n\t// allow this to be smaller than 65535 or larger than 2^32-1.\n\t// If the value is outside this range, a default value will be\n\t// used instead.\n\tMaxUploadBufferPerConnection int32\n\n\t// MaxUploadBufferPerStream is the size of the initial flow control\n\t// window for each stream. The HTTP/2 spec does not allow this to\n\t// be larger than 2^32-1. If the value is zero or larger than the\n\t// maximum, a default value will be used instead.\n\tMaxUploadBufferPerStream int32\n\n\t// NewWriteScheduler constructs a write scheduler for a connection.\n\t// If nil, a default scheduler is chosen.\n\tNewWriteScheduler func() WriteScheduler\n\n\t// CountError, if non-nil, is called on HTTP/2 server errors.\n\t// It's intended to increment a metric for monitoring, such\n\t// as an expvar or Prometheus metric.\n\t// The errType consists of only ASCII word characters.\n\tCountError func(errType string)\n\n\t// Internal state. This is a pointer (rather than embedded directly)\n\t// so that we don't embed a Mutex in this struct, which will make the\n\t// struct non-copyable, which might break some callers.\n\tstate *serverInternalState\n\n\t// Synchronization group used for testing.\n\t// Outside of tests, this is nil.\n\tgroup synctestGroupInterface\n}",
          "ref_module": "http2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/net@v0.43.0/http2/h2c/h2c.go",
          "code_snippet": "func NewHandler(h http.Handler, s *http2.Server) http.Handler {\n\treturn \u0026h2cHandler{\n\t\tHandler: h,\n\t\ts:       s,\n\t}\n}",
          "ref_module": "h2c"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Listener interface {\n\t// Accept waits for and returns the next connection to the listener.\n\tAccept() (Conn, error)\n\n\t// Close closes the listener.\n\t// Any blocked Accept operations will be unblocked and return errors.\n\tClose() error\n\n\t// Addr returns the listener's network address.\n\tAddr() Addr\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Serve(l net.Listener) error {\n\tif fn := testHookServerServe; fn != nil {\n\t\tfn(srv, l) // call hook with unwrapped listener\n\t}\n\n\torigListener := l\n\tl = \u0026onceCloseListener{Listener: l}\n\tdefer l.Close()\n\n\tif err := srv.setupHTTP2_Serve(); err != nil {\n\t\treturn err\n\t}\n\n\tif !srv.trackListener(\u0026l, true) {\n\t\treturn ErrServerClosed\n\t}\n\tdefer srv.trackListener(\u0026l, false)\n\n\tbaseCtx := context.Background()\n\tif srv.BaseContext != nil {\n\t\tbaseCtx = srv.BaseContext(origListener)\n\t\tif baseCtx == nil {\n\t\t\tpanic(\"BaseContext returned a nil context\")\n\t\t}\n\t}\n\n\tvar tempDelay time.Duration // how long to sleep on accept failure\n\n\tctx := context.WithValue(baseCtx, ServerContextKey, srv)\n\tfor {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif srv.shuttingDown() {\n\t\t\t\treturn ErrServerClosed\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok \u0026\u0026 ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay \u003e max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\tsrv.logf(\"http: Accept error: %v; retrying in %v\", err, tempDelay)\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tconnCtx := ctx\n\t\tif cc := srv.ConnContext; cc != nil {\n\t\t\tconnCtx = cc(connCtx, rw)\n\t\t\tif connCtx == nil {\n\t\t\t\tpanic(\"ConnContext returned nil\")\n\t\t\t}\n\t\t}\n\t\ttempDelay = 0\n\t\tc := srv.newConn(rw)\n\t\tc.setState(c.rwc, StateNew, runHooks) // before Serve can return\n\t\tgo c.serve(connCtx)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        833,
        834,
        835,
        836,
        837,
        838,
        839,
        840,
        841,
        842,
        843,
        845,
        846,
        847,
        849,
        850,
        851,
        852,
        853,
        854,
        855,
        857,
        858,
        859,
        860,
        861
      ],
      "cover_details": {
        "line_cover_rate": 0.8666666666666667
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:applyMiddleware",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        }
      ],
      "name": "applyMiddleware",
      "signature": "applyMiddleware (h HandlerFunc, middleware ...MiddlewareFunc) HandlerFunc",
      "ground_truth": "func applyMiddleware(h HandlerFunc, middleware ...MiddlewareFunc) HandlerFunc {\n\tfor i := len(middleware) - 1; i \u003e= 0; i-- {\n\t\th = middleware[i](h)\n\t}\n\treturn h\n}",
      "function_comment": "// // PathUnescape is wraps `url.PathUnescape`\n// func PathUnescape(s string) (string, error) {\n// \treturn url.PathUnescape(s)\n// }\n// tcpKeepAliveListener sets TCP keep-alive timeouts on accepted\n// connections. It's used by ListenAndServe and ListenAndServeTLS so\n// dead TCP connections (e.g. closing laptop mid-download) eventually",
      "function_statement": "// // PathUnescape is wraps `url.PathUnescape`\n// func PathUnescape(s string) (string, error) {\n// \treturn url.PathUnescape(s)\n// }\n// tcpKeepAliveListener sets TCP keep-alive timeouts on accepted\n// connections. It's used by ListenAndServe and ListenAndServeTLS so\n// dead TCP connections (e.g. closing laptop mid-download) eventually",
      "start_line": 1010,
      "end_line": 1015,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1010,
        1011,
        1012,
        1013,
        1014
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:File",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        }
      ],
      "name": "File",
      "signature": "(e *Echo) File (path, file string, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) File(path, file string, m ...MiddlewareFunc) *Route {\n\treturn e.file(path, file, e.GET, m...)\n}",
      "function_comment": "// File registers a new route with path to serve a static file with optional route-level middleware.",
      "function_statement": "// File registers a new route with path to serve a static file with optional route-level middleware.",
      "start_line": 571,
      "end_line": 573,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (common) file(path, file string, get func(string, HandlerFunc, ...MiddlewareFunc) *Route,\n\tm ...MiddlewareFunc) *Route {\n\treturn get(path, func(c Context) error {\n\t\treturn c.File(file)\n\t}, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) GET(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodGet, path, h, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        571,
        572,
        573
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:WriteHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDump"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpFails"
        }
      ],
      "name": "WriteHeader",
      "signature": "(w *bodyDumpResponseWriter) WriteHeader (code int)",
      "ground_truth": "func (w *bodyDumpResponseWriter) WriteHeader(code int) {\n\tw.ResponseWriter.WriteHeader(code)\n}",
      "function_comment": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "function_statement": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "start_line": 92,
      "end_line": 94,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "bodyDumpResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint16",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Uint16",
      "signature": "(b *ValueBinder) Uint16 (sourceParam string, dest *uint16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint16(sourceParam string, dest *uint16) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 16, false)\n}",
      "function_comment": "// Uint16 binds parameter to uint16 variable",
      "function_statement": "// Uint16 binds parameter to uint16 variable",
      "start_line": 692,
      "end_line": 694,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        692,
        693,
        694
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_SetHandler"
        }
      ],
      "name": "SetHandler",
      "signature": "(c *context) SetHandler (h HandlerFunc)",
      "ground_truth": "func (c *context) SetHandler(h HandlerFunc) {\n\tc.handler = h\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 631,
      "end_line": 633,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        631,
        632,
        633
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Unwrap",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestHTTPError_Unwrap"
        }
      ],
      "name": "Unwrap",
      "signature": "(he *HTTPError) Unwrap () error",
      "ground_truth": "func (he *HTTPError) Unwrap() error {\n\treturn he.Internal\n}",
      "function_comment": "// Unwrap satisfies the Go 1.13 error wrapper interface.",
      "function_statement": "// Unwrap satisfies the Go 1.13 error wrapper interface.",
      "start_line": 919,
      "end_line": 921,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HTTPError struct {\n\tInternal error       `json:\"-\"` // Stores the error returned by an external dependency\n\tMessage  interface{} `json:\"message\"`\n\tCode     int         `json:\"-\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        919,
        920,
        921
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/util.go:matchSubdomain",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginSubdomain"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCorsHeaders"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "Test_matchSubdomain"
        }
      ],
      "name": "matchSubdomain",
      "signature": "matchSubdomain (domain, pattern string) bool",
      "ground_truth": "func matchSubdomain(domain, pattern string) bool {\n\tif !matchScheme(domain, pattern) {\n\t\treturn false\n\t}\n\tdidx := strings.Index(domain, \"://\")\n\tpidx := strings.Index(pattern, \"://\")\n\tif didx == -1 || pidx == -1 {\n\t\treturn false\n\t}\n\tdomAuth := domain[didx+3:]\n\t// to avoid long loop by invalid long domain\n\tif len(domAuth) \u003e 253 {\n\t\treturn false\n\t}\n\tpatAuth := pattern[pidx+3:]\n\n\tdomComp := strings.Split(domAuth, \".\")\n\tpatComp := strings.Split(patAuth, \".\")\n\tfor i := len(domComp)/2 - 1; i \u003e= 0; i-- {\n\t\topp := len(domComp) - 1 - i\n\t\tdomComp[i], domComp[opp] = domComp[opp], domComp[i]\n\t}\n\tfor i := len(patComp)/2 - 1; i \u003e= 0; i-- {\n\t\topp := len(patComp) - 1 - i\n\t\tpatComp[i], patComp[opp] = patComp[opp], patComp[i]\n\t}\n\n\tfor i, v := range domComp {\n\t\tif len(patComp) \u003c= i {\n\t\t\treturn false\n\t\t}\n\t\tp := patComp[i]\n\t\tif p == \"*\" {\n\t\t\treturn true\n\t\t}\n\t\tif p != v {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}",
      "function_comment": "// matchSubdomain compares authority with wildcard",
      "function_statement": "// matchSubdomain compares authority with wildcard",
      "start_line": 21,
      "end_line": 61,
      "file_path": "./middleware/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "func matchScheme(domain, pattern string) bool {\n\tdidx := strings.Index(domain, \":\")\n\tpidx := strings.Index(pattern, \":\")\n\treturn didx != -1 \u0026\u0026 pidx != -1 \u0026\u0026 domain[:didx] == pattern[:pidx]\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Index(s, substr string) int {\n\treturn stringslite.Index(s, substr)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Split(s, sep string) []string { return genSplit(s, sep, 0, -1) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58
      ],
      "cover_details": {
        "line_cover_rate": 0.8536585365853658
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:Hijack",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipResponseWriter_CanHijack"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipResponseWriter_CanNotHijack"
        }
      ],
      "name": "Hijack",
      "signature": "(w *gzipResponseWriter) Hijack () (net.Conn, *bufio.ReadWriter, error)",
      "ground_truth": "func (w *gzipResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n\treturn http.NewResponseController(w.ResponseWriter).Hijack()\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 200,
      "end_line": 202,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n\twroteHeader       bool\n\twroteBody         bool\n\tminLength         int\n\tminLengthExceeded bool\n\tbuffer            *bytes.Buffer\n\tcode              int\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Conn interface {\n\t// Read reads data from the connection.\n\t// Read can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetReadDeadline.\n\tRead(b []byte) (n int, err error)\n\n\t// Write writes data to the connection.\n\t// Write can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetWriteDeadline.\n\tWrite(b []byte) (n int, err error)\n\n\t// Close closes the connection.\n\t// Any blocked Read or Write operations will be unblocked and return errors.\n\tClose() error\n\n\t// LocalAddr returns the local network address, if known.\n\tLocalAddr() Addr\n\n\t// RemoteAddr returns the remote network address, if known.\n\tRemoteAddr() Addr\n\n\t// SetDeadline sets the read and write deadlines associated\n\t// with the connection. It is equivalent to calling both\n\t// SetReadDeadline and SetWriteDeadline.\n\t//\n\t// A deadline is an absolute time after which I/O operations\n\t// fail instead of blocking. The deadline applies to all future\n\t// and pending I/O, not just the immediately following call to\n\t// Read or Write. After a deadline has been exceeded, the\n\t// connection can be refreshed by setting a deadline in the future.\n\t//\n\t// If the deadline is exceeded a call to Read or Write or to other\n\t// I/O methods will return an error that wraps os.ErrDeadlineExceeded.\n\t// This can be tested using errors.Is(err, os.ErrDeadlineExceeded).\n\t// The error's Timeout method will return true, but note that there\n\t// are other possible errors for which the Timeout method will\n\t// return true even if the deadline has not been exceeded.\n\t//\n\t// An idle timeout can be implemented by repeatedly extending\n\t// the deadline after successful Read or Write calls.\n\t//\n\t// A zero value for t means I/O operations will not time out.\n\tSetDeadline(t time.Time) error\n\n\t// SetReadDeadline sets the deadline for future Read calls\n\t// and any currently-blocked Read call.\n\t// A zero value for t means Read will not time out.\n\tSetReadDeadline(t time.Time) error\n\n\t// SetWriteDeadline sets the deadline for future Write calls\n\t// and any currently-blocked Write call.\n\t// Even if write times out, it may return n \u003e 0, indicating that\n\t// some of the data was successfully written.\n\t// A zero value for t means Write will not time out.\n\tSetWriteDeadline(t time.Time) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bufio/bufio.go",
          "code_snippet": "ReadWriter struct {\n\t*Reader\n\t*Writer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func (c *ResponseController) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n\trw := c.rw\n\tfor {\n\t\tswitch t := rw.(type) {\n\t\tcase Hijacker:\n\t\t\treturn t.Hijack()\n\t\tcase rwUnwrapper:\n\t\t\trw = t.Unwrap()\n\t\tdefault:\n\t\t\treturn nil, nil, errNotSupported()\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func NewResponseController(rw ResponseWriter) *ResponseController {\n\treturn \u0026ResponseController{rw}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        200,
        201,
        202
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:valuesFromParam",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromParam"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        }
      ],
      "name": "valuesFromParam",
      "signature": "valuesFromParam (param string) ValuesExtractor",
      "ground_truth": "func valuesFromParam(param string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tresult := make([]string, 0)\n\t\tparamVales := c.ParamValues()\n\t\tfor i, p := range c.ParamNames() {\n\t\t\tif param == p {\n\t\t\t\tresult = append(result, paramVales[i])\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif len(result) == 0 {\n\t\t\treturn nil, errParamExtractorValueMissing\n\t\t}\n\t\treturn result, nil\n\t}\n}",
      "function_comment": "// valuesFromParam returns a function that extracts values from the url param string.",
      "function_statement": "// valuesFromParam returns a function that extracts values from the url param string.",
      "start_line": 148,
      "end_line": 165,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "extractorLimit = 20",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errParamExtractorValueMissing = errors.New(\"missing value in path params\")",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        160,
        161,
        162,
        163
      ],
      "cover_details": {
        "line_cover_rate": 0.7222222222222222
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:newDefaultFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_FlushPanics"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "newDefaultFS",
      "signature": "newDefaultFS () *defaultFS",
      "ground_truth": "func newDefaultFS() *defaultFS {\n\tdir, _ := os.Getwd()\n\treturn \u0026defaultFS{\n\t\tprefix: dir,\n\t\tfs:     nil,\n\t}\n}",
      "function_comment": "// defaultFS exists to preserve pre v4.7.0 behaviour where files were open by `os.Open`.\n// v4.7 introduced `echo.Filesystem` field which is Go1.16+ `fs.Fs` interface.\n// Difference between `os.Open` and `fs.Open` is that FS does not allow opening path that start with `.`, `..` or `/`\n// etc. For example previously you could have `../images` in your application but `fs := os.DirFS(\"./\")` would not\n// allow you to use `fs.Open(\"../images\")` and this would break all old applications that rely on being able to\n// traverse up from current executable run path.",
      "function_statement": "// defaultFS exists to preserve pre v4.7.0 behaviour where files were open by `os.Open`.\n// v4.7 introduced `echo.Filesystem` field which is Go1.16+ `fs.Fs` interface.\n// Difference between `os.Open` and `fs.Open` is that FS does not allow opening path that start with `.`, `..` or `/`\n// etc. For example previously you could have `../images` in your application but `fs := os.DirFS(\"./\")` would not\n// allow you to use `fs.Open(\"../images\")` and this would break all old applications that rely on being able to\n// traverse up from current executable run path.",
      "start_line": 109,
      "end_line": 115,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "defaultFS struct {\n\tfs     fs.FS\n\tprefix string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/os/getwd.go",
          "code_snippet": "func Getwd() (dir string, err error) {\n\tif runtime.GOOS == \"windows\" || runtime.GOOS == \"plan9\" {\n\t\treturn syscall.Getwd()\n\t}\n\n\t// Clumsy but widespread kludge:\n\t// if $PWD is set and matches \".\", use it.\n\tdot, err := statNolog(\".\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdir = Getenv(\"PWD\")\n\tif len(dir) \u003e 0 \u0026\u0026 dir[0] == '/' {\n\t\td, err := statNolog(dir)\n\t\tif err == nil \u0026\u0026 SameFile(dot, d) {\n\t\t\treturn dir, nil\n\t\t}\n\t}\n\n\t// If the operating system provides a Getwd call, use it.\n\t// Otherwise, we're trying to find our way back to \".\".\n\tif syscall.ImplementsGetwd {\n\t\tvar (\n\t\t\ts string\n\t\t\te error\n\t\t)\n\t\tfor {\n\t\t\ts, e = syscall.Getwd()\n\t\t\tif e != syscall.EINTR {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn s, NewSyscallError(\"getwd\", e)\n\t}\n\n\t// Apply same kludge but to cached dir instead of $PWD.\n\tgetwdCache.Lock()\n\tdir = getwdCache.dir\n\tgetwdCache.Unlock()\n\tif len(dir) \u003e 0 {\n\t\td, err := statNolog(dir)\n\t\tif err == nil \u0026\u0026 SameFile(dot, d) {\n\t\t\treturn dir, nil\n\t\t}\n\t}\n\n\t// Root is a special case because it has no parent\n\t// and ends in a slash.\n\troot, err := statNolog(\"/\")\n\tif err != nil {\n\t\t// Can't stat root - no hope.\n\t\treturn \"\", err\n\t}\n\tif SameFile(root, dot) {\n\t\treturn \"/\", nil\n\t}\n\n\t// General algorithm: find name in parent\n\t// and then find name of parent. Each iteration\n\t// adds /name to the beginning of dir.\n\tdir = \"\"\n\tfor parent := \"..\"; ; parent = \"../\" + parent {\n\t\tif len(parent) \u003e= 1024 { // Sanity check\n\t\t\treturn \"\", syscall.ENAMETOOLONG\n\t\t}\n\t\tfd, err := openFileNolog(parent, O_RDONLY, 0)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\n\t\tfor {\n\t\t\tnames, err := fd.Readdirnames(100)\n\t\t\tif err != nil {\n\t\t\t\tfd.Close()\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tfor _, name := range names {\n\t\t\t\td, _ := lstatNolog(parent + \"/\" + name)\n\t\t\t\tif SameFile(d, dot) {\n\t\t\t\t\tdir = \"/\" + name + dir\n\t\t\t\t\tgoto Found\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tFound:\n\t\tpd, err := fd.Stat()\n\t\tfd.Close()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif SameFile(pd, root) {\n\t\t\tbreak\n\t\t}\n\t\t// Set up for next round.\n\t\tdot = pd\n\t}\n\n\t// Save answer as hint to avoid the expensive path next time.\n\tgetwdCache.Lock()\n\tgetwdCache.dir = dir\n\tgetwdCache.Unlock()\n\n\treturn dir, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        109,
        110,
        111,
        112,
        113,
        114,
        115
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:boolValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        }
      ],
      "name": "boolValue",
      "signature": "(b *ValueBinder) boolValue (sourceParam string, dest *bool, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) boolValue(sourceParam string, dest *bool, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.bool(sourceParam, value, dest)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 909,
      "end_line": 922,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) bool(sourceParam string, value string, dest *bool) *ValueBinder {\n\tn, err := strconv.ParseBool(value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to bool\", err))\n\t\treturn b\n\t}\n\n\t*dest = n\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        909,
        910,
        911,
        912,
        914,
        915,
        916,
        917,
        918,
        919,
        921
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:ReleaseContext",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        }
      ],
      "name": "ReleaseContext",
      "signature": "(e *Echo) ReleaseContext (c Context)",
      "ground_truth": "func (e *Echo) ReleaseContext(c Context) {\n\te.pool.Put(c)\n}",
      "function_comment": "// ReleaseContext returns the `Context` instance back to the pool.\n// You must call it after `AcquireContext()`.",
      "function_statement": "// ReleaseContext returns the `Context` instance back to the pool.\n// You must call it after `AcquireContext()`.",
      "start_line": 642,
      "end_line": 644,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        642,
        643,
        644
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:Write",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        }
      ],
      "name": "Write",
      "signature": "(w *gzipResponseWriter) Write (b []byte) (int, error)",
      "ground_truth": "func (w *gzipResponseWriter) Write(b []byte) (int, error) {\n\tif w.Header().Get(echo.HeaderContentType) == \"\" {\n\t\tw.Header().Set(echo.HeaderContentType, http.DetectContentType(b))\n\t}\n\tw.wroteBody = true\n\n\tif !w.minLengthExceeded {\n\t\tn, err := w.buffer.Write(b)\n\n\t\tif w.buffer.Len() \u003e= w.minLength {\n\t\t\tw.minLengthExceeded = true\n\n\t\t\t// The minimum length is exceeded, add Content-Encoding header and write the header\n\t\t\tw.Header().Set(echo.HeaderContentEncoding, gzipScheme) // Issue #806\n\t\t\tif w.wroteHeader {\n\t\t\t\tw.ResponseWriter.WriteHeader(w.code)\n\t\t\t}\n\n\t\t\treturn w.Writer.Write(w.buffer.Bytes())\n\t\t}\n\n\t\treturn n, err\n\t}\n\n\treturn w.Writer.Write(b)\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 153,
      "end_line": 178,
      "file_path": "./middleware/compress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n\twroteHeader       bool\n\twroteBody         bool\n\tminLength         int\n\tminLengthExceeded bool\n\tbuffer            *bytes.Buffer\n\tcode              int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentType         = \"Content-Type\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentEncoding     = \"Content-Encoding\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "gzipScheme = \"gzip\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/sniff.go",
          "code_snippet": "func DetectContentType(data []byte) string {\n\tif len(data) \u003e sniffLen {\n\t\tdata = data[:sniffLen]\n\t}\n\n\t// Index of the first non-whitespace byte in data.\n\tfirstNonWS := 0\n\tfor ; firstNonWS \u003c len(data) \u0026\u0026 isWS(data[firstNonWS]); firstNonWS++ {\n\t}\n\n\tfor _, sig := range sniffSignatures {\n\t\tif ct := sig.match(data, firstNonWS); ct != \"\" {\n\t\t\treturn ct\n\t\t}\n\t}\n\n\treturn \"application/octet-stream\" // fallback\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Write(p []byte) (n int, err error) {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(len(p))\n\tif !ok {\n\t\tm = b.grow(len(p))\n\t}\n\treturn copy(b.buf[m:], p), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Len() int { return len(b.buf) - b.off }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        171,
        174,
        177
      ],
      "cover_details": {
        "line_cover_rate": 0.7692307692307693
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Int64",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Int64",
      "signature": "(b *ValueBinder) Int64 (sourceParam string, dest *int64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Int64(sourceParam string, dest *int64) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 64, false)\n}",
      "function_comment": "// Int64 binds parameter to int64 variable",
      "function_statement": "// Int64 binds parameter to int64 variable",
      "start_line": 454,
      "end_line": 456,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        454,
        455,
        456
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Duration",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        }
      ],
      "name": "Duration",
      "signature": "(b *ValueBinder) Duration (sourceParam string, dest *time.Duration) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Duration(sourceParam string, dest *time.Duration) *ValueBinder {\n\treturn b.duration(sourceParam, dest, false)\n}",
      "function_comment": "// Duration binds parameter to time.Duration variable",
      "function_statement": "// Duration binds parameter to time.Duration variable",
      "start_line": 1162,
      "end_line": 1164,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) duration(sourceParam string, dest *time.Duration, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tt, err := time.ParseDuration(value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Duration\", err))\n\t\treturn b\n\t}\n\t*dest = t\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Duration int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1162,
        1163,
        1164
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt8s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustInt8s",
      "signature": "(b *ValueBinder) MustInt8s (sourceParam string, dest *[]int8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt8s(sourceParam string, dest *[]int8) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustInt8s requires parameter value to exist to bind to int8 slice variable. Returns error when value does not exist",
      "function_statement": "// MustInt8s requires parameter value to exist to bind to int8 slice variable. Returns error when value does not exist",
      "start_line": 657,
      "end_line": 659,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        657,
        658,
        659
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustString",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        }
      ],
      "name": "MustString",
      "signature": "(b *ValueBinder) MustString (sourceParam string, dest *string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustString(sourceParam string, dest *string) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\treturn b\n\t}\n\t*dest = value\n\treturn b\n}",
      "function_comment": "// MustString requires parameter value to exist to bind to string variable. Returns error when value does not exist",
      "function_statement": "// MustString requires parameter value to exist to bind to string variable. Returns error when value does not exist",
      "start_line": 252,
      "end_line": 264,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        252,
        253,
        254,
        255,
        257,
        258,
        259,
        260,
        261,
        262,
        263
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:Flush",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanNotFlush"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanFlush"
        }
      ],
      "name": "Flush",
      "signature": "(w *bodyDumpResponseWriter) Flush ()",
      "ground_truth": "func (w *bodyDumpResponseWriter) Flush() {\n\terr := http.NewResponseController(w.ResponseWriter).Flush()\n\tif err != nil \u0026\u0026 errors.Is(err, http.ErrNotSupported) {\n\t\tpanic(errors.New(\"response writer flushing is not supported\"))\n\t}\n}",
      "function_comment": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "function_statement": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "start_line": 100,
      "end_line": 105,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "bodyDumpResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func (c *ResponseController) Flush() error {\n\trw := c.rw\n\tfor {\n\t\tswitch t := rw.(type) {\n\t\tcase interface{ FlushError() error }:\n\t\t\treturn t.FlushError()\n\t\tcase Flusher:\n\t\t\tt.Flush()\n\t\t\treturn nil\n\t\tcase rwUnwrapper:\n\t\t\trw = t.Unwrap()\n\t\tdefault:\n\t\t\treturn errNotSupported()\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func NewResponseController(rw ResponseWriter) *ResponseController {\n\treturn \u0026ResponseController{rw}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/wrap.go",
          "code_snippet": "func Is(err, target error) bool {\n\tif err == nil || target == nil {\n\t\treturn err == target\n\t}\n\n\tisComparable := reflectlite.TypeOf(target).Comparable()\n\treturn is(err, target, isComparable)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "ErrNotSupported = \u0026ProtocolError{\"feature not supported\"}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        100,
        101,
        102,
        103
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_limit.go:Read",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitReader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig"
        }
      ],
      "name": "Read",
      "signature": "(r *limitedReader) Read (b []byte) (n int, err error)",
      "ground_truth": "func (r *limitedReader) Read(b []byte) (n int, err error) {\n\tn, err = r.reader.Read(b)\n\tr.read += int64(n)\n\tif r.read \u003e r.limit {\n\t\treturn n, echo.ErrStatusRequestEntityTooLarge\n\t}\n\treturn\n}",
      "function_comment": "// BodyLimitWithConfig returns a BodyLimit middleware with config.",
      "function_statement": "// BodyLimitWithConfig returns a BodyLimit middleware with config.",
      "start_line": 90,
      "end_line": 97,
      "file_path": "./middleware/body_limit.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "limitedReader struct {\n\tBodyLimitConfig\n\treader io.ReadCloser\n\tread   int64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "BodyLimitConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Maximum allowed size for a request body, it can be specified\n\t// as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n\tLimit string `yaml:\"limit\"`\n\tlimit int64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrStatusRequestEntityTooLarge   = NewHTTPError(http.StatusRequestEntityTooLarge)",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        90,
        91,
        92,
        93,
        94,
        95,
        96
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:setWithProperType",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        }
      ],
      "name": "setWithProperType",
      "signature": "setWithProperType (valueKind reflect.Kind, val string, structField reflect.Value) error",
      "ground_truth": "func setWithProperType(valueKind reflect.Kind, val string, structField reflect.Value) error {\n\t// But also call it here, in case we're dealing with an array of BindUnmarshalers\n\t// Note: format tag not available in this context, so empty string is passed\n\tif ok, err := unmarshalInputToField(valueKind, val, structField, \"\"); ok {\n\t\treturn err\n\t}\n\n\tswitch valueKind {\n\tcase reflect.Ptr:\n\t\treturn setWithProperType(structField.Elem().Kind(), val, structField.Elem())\n\tcase reflect.Int:\n\t\treturn setIntField(val, 0, structField)\n\tcase reflect.Int8:\n\t\treturn setIntField(val, 8, structField)\n\tcase reflect.Int16:\n\t\treturn setIntField(val, 16, structField)\n\tcase reflect.Int32:\n\t\treturn setIntField(val, 32, structField)\n\tcase reflect.Int64:\n\t\treturn setIntField(val, 64, structField)\n\tcase reflect.Uint:\n\t\treturn setUintField(val, 0, structField)\n\tcase reflect.Uint8:\n\t\treturn setUintField(val, 8, structField)\n\tcase reflect.Uint16:\n\t\treturn setUintField(val, 16, structField)\n\tcase reflect.Uint32:\n\t\treturn setUintField(val, 32, structField)\n\tcase reflect.Uint64:\n\t\treturn setUintField(val, 64, structField)\n\tcase reflect.Bool:\n\t\treturn setBoolField(val, structField)\n\tcase reflect.Float32:\n\t\treturn setFloatField(val, 32, structField)\n\tcase reflect.Float64:\n\t\treturn setFloatField(val, 64, structField)\n\tcase reflect.String:\n\t\tstructField.SetString(val)\n\tdefault:\n\t\treturn errors.New(\"unknown type\")\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 308,
      "end_line": 350,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func unmarshalInputToField(valueKind reflect.Kind, val string, field reflect.Value, formatTag string) (bool, error) {\n\tif valueKind == reflect.Ptr {\n\t\tif field.IsNil() {\n\t\t\tfield.Set(reflect.New(field.Type().Elem()))\n\t\t}\n\t\tfield = field.Elem()\n\t}\n\n\tfieldIValue := field.Addr().Interface()\n\n\t// Handle time.Time with custom format tag\n\tif formatTag != \"\" {\n\t\tif _, isTime := fieldIValue.(*time.Time); isTime {\n\t\t\tt, err := time.Parse(formatTag, val)\n\t\t\tif err != nil {\n\t\t\t\treturn true, err\n\t\t\t}\n\t\t\tfield.Set(reflect.ValueOf(t))\n\t\t\treturn true, nil\n\t\t}\n\t}\n\n\tswitch unmarshaler := fieldIValue.(type) {\n\tcase BindUnmarshaler:\n\t\treturn true, unmarshaler.UnmarshalParam(val)\n\tcase encoding.TextUnmarshaler:\n\t\treturn true, unmarshaler.UnmarshalText([]byte(val))\n\t}\n\n\treturn false, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func setIntField(value string, bitSize int, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"0\"\n\t}\n\tintVal, err := strconv.ParseInt(value, 10, bitSize)\n\tif err == nil {\n\t\tfield.SetInt(intVal)\n\t}\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func setUintField(value string, bitSize int, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"0\"\n\t}\n\tuintVal, err := strconv.ParseUint(value, 10, bitSize)\n\tif err == nil {\n\t\tfield.SetUint(uintVal)\n\t}\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func setBoolField(value string, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"false\"\n\t}\n\tboolVal, err := strconv.ParseBool(value)\n\tif err == nil {\n\t\tfield.SetBool(boolVal)\n\t}\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func setFloatField(value string, bitSize int, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"0.0\"\n\t}\n\tfloatVal, err := strconv.ParseFloat(value, bitSize)\n\tif err == nil {\n\t\tfield.SetFloat(floatVal)\n\t}\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Kind uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Kind() Kind {\n\treturn v.kind()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Elem() Value {\n\tk := v.kind()\n\tswitch k {\n\tcase Interface:\n\t\tvar eface any\n\t\tif v.typ().NumMethod() == 0 {\n\t\t\teface = *(*any)(v.ptr)\n\t\t} else {\n\t\t\teface = (any)(*(*interface {\n\t\t\t\tM()\n\t\t\t})(v.ptr))\n\t\t}\n\t\tx := unpackEface(eface)\n\t\tif x.flag != 0 {\n\t\t\tx.flag |= v.flag.ro()\n\t\t}\n\t\treturn x\n\tcase Pointer:\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tif v.typ().IfaceIndir() {\n\t\t\t\t// This is a pointer to a not-in-heap object. ptr points to a uintptr\n\t\t\t\t// in the heap. That uintptr is the address of a not-in-heap object.\n\t\t\t\t// In general, pointers to not-in-heap objects can be total junk.\n\t\t\t\t// But Elem() is asking to dereference it, so the user has asserted\n\t\t\t\t// that at least it is a valid pointer (not just an integer stored in\n\t\t\t\t// a pointer slot). So let's check, to make sure that it isn't a pointer\n\t\t\t\t// that the runtime will crash on if it sees it during GC or write barriers.\n\t\t\t\t// Since it is a not-in-heap pointer, all pointers to the heap are\n\t\t\t\t// forbidden! That makes the test pretty easy.\n\t\t\t\t// See issue 48399.\n\t\t\t\tif !verifyNotInHeapPtr(*(*uintptr)(ptr)) {\n\t\t\t\t\tpanic(\"reflect: reflect.Value.Elem on an invalid notinheap pointer\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\t// The returned value's address is v's value.\n\t\tif ptr == nil {\n\t\t\treturn Value{}\n\t\t}\n\t\ttt := (*ptrType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tfl := v.flag\u0026flagRO | flagIndir | flagAddr\n\t\tfl |= flag(typ.Kind())\n\t\treturn Value{typ, ptr, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Elem\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "String",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) SetString(x string) {\n\tv.mustBeAssignable()\n\tv.mustBe(String)\n\t*(*string)(v.ptr) = x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        308,
        309,
        310,
        311,
        312,
        313,
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        349
      ],
      "cover_details": {
        "line_cover_rate": 0.9302325581395349
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:createExtractors",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_panicsOnInvalidLookup"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuth"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_ContinueOnIgnoredError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "createExtractors",
      "signature": "createExtractors (lookups string, authScheme string) ([]ValuesExtractor, error)",
      "ground_truth": "func createExtractors(lookups string, authScheme string) ([]ValuesExtractor, error) {\n\tif lookups == \"\" {\n\t\treturn nil, nil\n\t}\n\tsources := strings.Split(lookups, \",\")\n\tvar extractors = make([]ValuesExtractor, 0)\n\tfor _, source := range sources {\n\t\tparts := strings.Split(source, \":\")\n\t\tif len(parts) \u003c 2 {\n\t\t\treturn nil, fmt.Errorf(\"extractor source for lookup could not be split into needed parts: %v\", source)\n\t\t}\n\n\t\tswitch parts[0] {\n\t\tcase \"query\":\n\t\t\textractors = append(extractors, valuesFromQuery(parts[1]))\n\t\tcase \"param\":\n\t\t\textractors = append(extractors, valuesFromParam(parts[1]))\n\t\tcase \"cookie\":\n\t\t\textractors = append(extractors, valuesFromCookie(parts[1]))\n\t\tcase \"form\":\n\t\t\textractors = append(extractors, valuesFromForm(parts[1]))\n\t\tcase \"header\":\n\t\t\tprefix := \"\"\n\t\t\tif len(parts) \u003e 2 {\n\t\t\t\tprefix = parts[2]\n\t\t\t} else if authScheme != \"\" \u0026\u0026 parts[1] == echo.HeaderAuthorization {\n\t\t\t\t// backwards compatibility for JWT and KeyAuth:\n\t\t\t\t// * we only apply this fix to Authorization as header we use and uses prefixes like \"Bearer \u003ctoken-value\u003e\" etc\n\t\t\t\t// * previously header extractor assumed that auth-scheme/prefix had a space as suffix we need to retain that\n\t\t\t\t//   behaviour for default values and Authorization header.\n\t\t\t\tprefix = authScheme\n\t\t\t\tif !strings.HasSuffix(prefix, \" \") {\n\t\t\t\t\tprefix += \" \"\n\t\t\t\t}\n\t\t\t}\n\t\t\textractors = append(extractors, valuesFromHeader(parts[1], prefix))\n\t\t}\n\t}\n\treturn extractors, nil\n}",
      "function_comment": "// CreateExtractors creates ValuesExtractors from given lookups.\n// Lookups is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n// to extract key from the request.\n// Possible values:\n//   - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n//     `\u003ccut-prefix\u003e` is argument value to cut/trim prefix of the extracted value. This is useful if header\n//     value has static prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we\n//     want to cut is `\u003cauth-scheme\u003e ` note the space at the end.\n//     In case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove is `Basic `.\n//   - \"query:\u003cname\u003e\"\n//   - \"param:\u003cname\u003e\"\n//   - \"form:\u003cname\u003e\"\n//   - \"cookie:\u003cname\u003e\"\n//\n// Multiple sources example:",
      "function_statement": "// CreateExtractors creates ValuesExtractors from given lookups.\n// Lookups is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n// to extract key from the request.\n// Possible values:\n//   - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n//     `\u003ccut-prefix\u003e` is argument value to cut/trim prefix of the extracted value. This is useful if header\n//     value has static prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we\n//     want to cut is `\u003cauth-scheme\u003e ` note the space at the end.\n//     In case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove is `Basic `.\n//   - \"query:\u003cname\u003e\"\n//   - \"param:\u003cname\u003e\"\n//   - \"form:\u003cname\u003e\"\n//   - \"cookie:\u003cname\u003e\"\n//\n// Multiple sources example:",
      "start_line": 50,
      "end_line": 89,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func valuesFromQuery(param string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tresult := c.QueryParams()[param]\n\t\tif len(result) == 0 {\n\t\t\treturn nil, errQueryExtractorValueMissing\n\t\t} else if len(result) \u003e extractorLimit-1 {\n\t\t\tresult = result[:extractorLimit]\n\t\t}\n\t\treturn result, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func valuesFromParam(param string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tresult := make([]string, 0)\n\t\tparamVales := c.ParamValues()\n\t\tfor i, p := range c.ParamNames() {\n\t\t\tif param == p {\n\t\t\t\tresult = append(result, paramVales[i])\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif len(result) == 0 {\n\t\t\treturn nil, errParamExtractorValueMissing\n\t\t}\n\t\treturn result, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func valuesFromCookie(name string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tcookies := c.Cookies()\n\t\tif len(cookies) == 0 {\n\t\t\treturn nil, errCookieExtractorValueMissing\n\t\t}\n\n\t\tresult := make([]string, 0)\n\t\tfor i, cookie := range cookies {\n\t\t\tif name == cookie.Name {\n\t\t\t\tresult = append(result, cookie.Value)\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif len(result) == 0 {\n\t\t\treturn nil, errCookieExtractorValueMissing\n\t\t}\n\t\treturn result, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func valuesFromForm(name string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tif c.Request().Form == nil {\n\t\t\t_ = c.Request().ParseMultipartForm(32 \u003c\u003c 20) // same what `c.Request().FormValue(name)` does\n\t\t}\n\t\tvalues := c.Request().Form[name]\n\t\tif len(values) == 0 {\n\t\t\treturn nil, errFormExtractorValueMissing\n\t\t}\n\t\tif len(values) \u003e extractorLimit-1 {\n\t\t\tvalues = values[:extractorLimit]\n\t\t}\n\t\tresult := append([]string{}, values...)\n\t\treturn result, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAuthorization       = \"Authorization\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func valuesFromHeader(header string, valuePrefix string) ValuesExtractor {\n\tprefixLen := len(valuePrefix)\n\t// standard library parses http.Request header keys in canonical form but we may provide something else so fix this\n\theader = textproto.CanonicalMIMEHeaderKey(header)\n\treturn func(c echo.Context) ([]string, error) {\n\t\tvalues := c.Request().Header.Values(header)\n\t\tif len(values) == 0 {\n\t\t\treturn nil, errHeaderExtractorValueMissing\n\t\t}\n\n\t\tresult := make([]string, 0)\n\t\tfor i, value := range values {\n\t\t\tif prefixLen == 0 {\n\t\t\t\tresult = append(result, value)\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif len(value) \u003e prefixLen \u0026\u0026 strings.EqualFold(value[:prefixLen], valuePrefix) {\n\t\t\t\tresult = append(result, value[prefixLen:])\n\t\t\t\tif i \u003e= extractorLimit-1 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif len(result) == 0 {\n\t\t\tif prefixLen \u003e 0 {\n\t\t\t\treturn nil, errHeaderExtractorValueInvalid\n\t\t\t}\n\t\t\treturn nil, errHeaderExtractorValueMissing\n\t\t}\n\t\treturn result, nil\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Split(s, sep string) []string { return genSplit(s, sep, 0, -1) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasSuffix(s, suffix string) bool {\n\treturn stringslite.HasSuffix(s, suffix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        50,
        51,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        85,
        88
      ],
      "cover_details": {
        "line_cover_rate": 0.825
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:proxyRaw",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        }
      ],
      "name": "proxyRaw",
      "signature": "proxyRaw (t *ProxyTarget, c echo.Context, config ProxyConfig) http.Handler",
      "ground_truth": "func proxyRaw(t *ProxyTarget, c echo.Context, config ProxyConfig) http.Handler {\n\tvar dialFunc func(ctx context.Context, network, addr string) (net.Conn, error)\n\tif transport, ok := config.Transport.(*http.Transport); ok {\n\t\tif transport.TLSClientConfig != nil {\n\t\t\td := tls.Dialer{\n\t\t\t\tConfig: transport.TLSClientConfig,\n\t\t\t}\n\t\t\tdialFunc = d.DialContext\n\t\t}\n\t}\n\tif dialFunc == nil {\n\t\tvar d net.Dialer\n\t\tdialFunc = d.DialContext\n\t}\n\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tin, _, err := c.Response().Hijack()\n\t\tif err != nil {\n\t\t\tc.Set(\"_error\", fmt.Errorf(\"proxy raw, hijack error=%w, url=%s\", err, t.URL))\n\t\t\treturn\n\t\t}\n\t\tdefer in.Close()\n\t\tout, err := dialFunc(c.Request().Context(), \"tcp\", t.URL.Host)\n\t\tif err != nil {\n\t\t\tc.Set(\"_error\", echo.NewHTTPError(http.StatusBadGateway, fmt.Sprintf(\"proxy raw, dial error=%v, url=%s\", err, t.URL)))\n\t\t\treturn\n\t\t}\n\n\t\t// Write header\n\t\terr = r.Write(out)\n\t\tif err != nil {\n\t\t\tc.Set(\"_error\", echo.NewHTTPError(http.StatusBadGateway, fmt.Sprintf(\"proxy raw, request header copy error=%v, url=%s\", err, t.URL)))\n\t\t\treturn\n\t\t}\n\n\t\terrCh := make(chan error, 2)\n\t\tcp := func(dst io.Writer, src io.Reader) {\n\t\t\t_, err = io.Copy(dst, src)\n\t\t\terrCh \u003c- err\n\t\t}\n\n\t\tgo cp(out, in)\n\t\tgo cp(in, out)\n\t\terr = \u003c-errCh\n\t\tif err != nil \u0026\u0026 err != io.EOF {\n\t\t\tc.Set(\"_error\", fmt.Errorf(\"proxy raw, copy body error=%w, url=%s\", err, t.URL))\n\t\t}\n\t})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 134,
      "end_line": 182,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Balancer defines a load balancing technique.\n\t// Required.\n\tBalancer ProxyBalancer\n\n\t// RetryCount defines the number of times a failed proxied request should be retried\n\t// using the next available ProxyTarget. Defaults to 0, meaning requests are never retried.\n\tRetryCount int\n\n\t// RetryFilter defines a function used to determine if a failed request to a\n\t// ProxyTarget should be retried. The RetryFilter will only be called when the number\n\t// of previous retries is less than RetryCount. If the function returns true, the\n\t// request will be retried. The provided error indicates the reason for the request\n\t// failure. When the ProxyTarget is unavailable, the error will be an instance of\n\t// echo.HTTPError with a Code of http.StatusBadGateway. In all other cases, the error\n\t// will indicate an internal error in the Proxy middleware. When a RetryFilter is not\n\t// specified, all requests that fail with http.StatusBadGateway will be retried. A custom\n\t// RetryFilter can be provided to only retry specific requests. Note that RetryFilter is\n\t// only called when the request to the target fails, or an internal error in the Proxy\n\t// middleware has occurred. Successful requests that return a non-200 response code cannot\n\t// be retried.\n\tRetryFilter func(c echo.Context, e error) bool\n\n\t// ErrorHandler defines a function which can be used to return custom errors from\n\t// the Proxy middleware. ErrorHandler is only invoked when there has been\n\t// either an internal error in the Proxy middleware or the ProxyTarget is\n\t// unavailable. Due to the way requests are proxied, ErrorHandler is not invoked\n\t// when a ProxyTarget returns a non-200 response. In these cases, the response\n\t// is already written so errors cannot be modified. ErrorHandler is only\n\t// invoked after all retry attempts have been exhausted.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n\t// retrieved by index e.g. $1, $2 and so on.\n\t// Examples:\n\t// \"/old\":              \"/new\",\n\t// \"/api/*\":            \"/$1\",\n\t// \"/js/*\":             \"/public/javascripts/$1\",\n\t// \"/users/*/orders/*\": \"/user/$1/order/$2\",\n\tRewrite map[string]string\n\n\t// RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n\t// Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n\t// Example:\n\t// \"^/old/[0.9]+/\":     \"/new\",\n\t// \"^/api/.+?/(.*)\":    \"/v2/$1\",\n\tRegexRewrite map[*regexp.Regexp]string\n\n\t// Context key to store selected ProxyTarget into context.\n\t// Optional. Default value \"target\".\n\tContextKey string\n\n\t// To customize the transport to remote.\n\t// Examples: If custom TLS certificates are required.\n\tTransport http.RoundTripper\n\n\t// ModifyResponse defines function to modify response from ProxyTarget.\n\tModifyResponse func(*http.Response) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n\treturn http.NewResponseController(r.Writer).Hijack()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// Canceled if the context was canceled\n\t// or DeadlineExceeded if the context's deadline passed.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Conn interface {\n\t// Read reads data from the connection.\n\t// Read can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetReadDeadline.\n\tRead(b []byte) (n int, err error)\n\n\t// Write writes data to the connection.\n\t// Write can be made to time out and return an error after a fixed\n\t// time limit; see SetDeadline and SetWriteDeadline.\n\tWrite(b []byte) (n int, err error)\n\n\t// Close closes the connection.\n\t// Any blocked Read or Write operations will be unblocked and return errors.\n\tClose() error\n\n\t// LocalAddr returns the local network address, if known.\n\tLocalAddr() Addr\n\n\t// RemoteAddr returns the remote network address, if known.\n\tRemoteAddr() Addr\n\n\t// SetDeadline sets the read and write deadlines associated\n\t// with the connection. It is equivalent to calling both\n\t// SetReadDeadline and SetWriteDeadline.\n\t//\n\t// A deadline is an absolute time after which I/O operations\n\t// fail instead of blocking. The deadline applies to all future\n\t// and pending I/O, not just the immediately following call to\n\t// Read or Write. After a deadline has been exceeded, the\n\t// connection can be refreshed by setting a deadline in the future.\n\t//\n\t// If the deadline is exceeded a call to Read or Write or to other\n\t// I/O methods will return an error that wraps os.ErrDeadlineExceeded.\n\t// This can be tested using errors.Is(err, os.ErrDeadlineExceeded).\n\t// The error's Timeout method will return true, but note that there\n\t// are other possible errors for which the Timeout method will\n\t// return true even if the deadline has not been exceeded.\n\t//\n\t// An idle timeout can be implemented by repeatedly extending\n\t// the deadline after successful Read or Write calls.\n\t//\n\t// A zero value for t means I/O operations will not time out.\n\tSetDeadline(t time.Time) error\n\n\t// SetReadDeadline sets the deadline for future Read calls\n\t// and any currently-blocked Read call.\n\t// A zero value for t means Read will not time out.\n\tSetReadDeadline(t time.Time) error\n\n\t// SetWriteDeadline sets the deadline for future Write calls\n\t// and any currently-blocked Write call.\n\t// Even if write times out, it may return n \u003e 0, indicating that\n\t// some of the data was successfully written.\n\t// A zero value for t means Write will not time out.\n\tSetWriteDeadline(t time.Time) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/transport.go",
          "code_snippet": "Transport struct {\n\tidleMu       sync.Mutex\n\tcloseIdle    bool                                // user has requested to close all idle conns\n\tidleConn     map[connectMethodKey][]*persistConn // most recently used at end\n\tidleConnWait map[connectMethodKey]wantConnQueue  // waiting getConns\n\tidleLRU      connLRU\n\n\treqMu       sync.Mutex\n\treqCanceler map[*Request]context.CancelCauseFunc\n\n\taltMu    sync.Mutex   // guards changing altProto only\n\taltProto atomic.Value // of nil or map[string]RoundTripper, key is URI scheme\n\n\tconnsPerHostMu   sync.Mutex\n\tconnsPerHost     map[connectMethodKey]int\n\tconnsPerHostWait map[connectMethodKey]wantConnQueue // waiting getConns\n\tdialsInProgress  wantConnQueue\n\n\t// Proxy specifies a function to return a proxy for a given\n\t// Request. If the function returns a non-nil error, the\n\t// request is aborted with the provided error.\n\t//\n\t// The proxy type is determined by the URL scheme. \"http\",\n\t// \"https\", \"socks5\", and \"socks5h\" are supported. If the scheme is empty,\n\t// \"http\" is assumed.\n\t// \"socks5\" is treated the same as \"socks5h\".\n\t//\n\t// If the proxy URL contains a userinfo subcomponent,\n\t// the proxy request will pass the username and password\n\t// in a Proxy-Authorization header.\n\t//\n\t// If Proxy is nil or returns a nil *URL, no proxy is used.\n\tProxy func(*Request) (*url.URL, error)\n\n\t// OnProxyConnectResponse is called when the Transport gets an HTTP response from\n\t// a proxy for a CONNECT request. It's called before the check for a 200 OK response.\n\t// If it returns an error, the request fails with that error.\n\tOnProxyConnectResponse func(ctx context.Context, proxyURL *url.URL, connectReq *Request, connectRes *Response) error\n\n\t// DialContext specifies the dial function for creating unencrypted TCP connections.\n\t// If DialContext is nil (and the deprecated Dial below is also nil),\n\t// then the transport dials using package net.\n\t//\n\t// DialContext runs concurrently with calls to RoundTrip.\n\t// A RoundTrip call that initiates a dial may end up using\n\t// a connection dialed previously when the earlier connection\n\t// becomes idle before the later DialContext completes.\n\tDialContext func(ctx context.Context, network, addr string) (net.Conn, error)\n\n\t// Dial specifies the dial function for creating unencrypted TCP connections.\n\t//\n\t// Dial runs concurrently with calls to RoundTrip.\n\t// A RoundTrip call that initiates a dial may end up using\n\t// a connection dialed previously when the earlier connection\n\t// becomes idle before the later Dial completes.\n\t//\n\t// Deprecated: Use DialContext instead, which allows the transport\n\t// to cancel dials as soon as they are no longer needed.\n\t// If both are set, DialContext takes priority.\n\tDial func(network, addr string) (net.Conn, error)\n\n\t// DialTLSContext specifies an optional dial function for creating\n\t// TLS connections for non-proxied HTTPS requests.\n\t//\n\t// If DialTLSContext is nil (and the deprecated DialTLS below is also nil),\n\t// DialContext and TLSClientConfig are used.\n\t//\n\t// If DialTLSContext is set, the Dial and DialContext hooks are not used for HTTPS\n\t// requests and the TLSClientConfig and TLSHandshakeTimeout\n\t// are ignored. The returned net.Conn is assumed to already be\n\t// past the TLS handshake.\n\tDialTLSContext func(ctx context.Context, network, addr string) (net.Conn, error)\n\n\t// DialTLS specifies an optional dial function for creating\n\t// TLS connections for non-proxied HTTPS requests.\n\t//\n\t// Deprecated: Use DialTLSContext instead, which allows the transport\n\t// to cancel dials as soon as they are no longer needed.\n\t// If both are set, DialTLSContext takes priority.\n\tDialTLS func(network, addr string) (net.Conn, error)\n\n\t// TLSClientConfig specifies the TLS configuration to use with\n\t// tls.Client.\n\t// If nil, the default configuration is used.\n\t// If non-nil, HTTP/2 support may not be enabled by default.\n\tTLSClientConfig *tls.Config\n\n\t// TLSHandshakeTimeout specifies the maximum amount of time to\n\t// wait for a TLS handshake. Zero means no timeout.\n\tTLSHandshakeTimeout time.Duration\n\n\t// DisableKeepAlives, if true, disables HTTP keep-alives and\n\t// will only use the connection to the server for a single\n\t// HTTP request.\n\t//\n\t// This is unrelated to the similarly named TCP keep-alives.\n\tDisableKeepAlives bool\n\n\t// DisableCompression, if true, prevents the Transport from\n\t// requesting compression with an \"Accept-Encoding: gzip\"\n\t// request header when the Request contains no existing\n\t// Accept-Encoding value. If the Transport requests gzip on\n\t// its own and gets a gzipped response, it's transparently\n\t// decoded in the Response.Body. However, if the user\n\t// explicitly requested gzip it is not automatically\n\t// uncompressed.\n\tDisableCompression bool\n\n\t// MaxIdleConns controls the maximum number of idle (keep-alive)\n\t// connections across all hosts. Zero means no limit.\n\tMaxIdleConns int\n\n\t// MaxIdleConnsPerHost, if non-zero, controls the maximum idle\n\t// (keep-alive) connections to keep per-host. If zero,\n\t// DefaultMaxIdleConnsPerHost is used.\n\tMaxIdleConnsPerHost int\n\n\t// MaxConnsPerHost optionally limits the total number of\n\t// connections per host, including connections in the dialing,\n\t// active, and idle states. On limit violation, dials will block.\n\t//\n\t// Zero means no limit.\n\tMaxConnsPerHost int\n\n\t// IdleConnTimeout is the maximum amount of time an idle\n\t// (keep-alive) connection will remain idle before closing\n\t// itself.\n\t// Zero means no limit.\n\tIdleConnTimeout time.Duration\n\n\t// ResponseHeaderTimeout, if non-zero, specifies the amount of\n\t// time to wait for a server's response headers after fully\n\t// writing the request (including its body, if any). This\n\t// time does not include the time to read the response body.\n\tResponseHeaderTimeout time.Duration\n\n\t// ExpectContinueTimeout, if non-zero, specifies the amount of\n\t// time to wait for a server's first response headers after fully\n\t// writing the request headers if the request has an\n\t// \"Expect: 100-continue\" header. Zero means no timeout and\n\t// causes the body to be sent immediately, without\n\t// waiting for the server to approve.\n\t// This time does not include the time to send the request header.\n\tExpectContinueTimeout time.Duration\n\n\t// TLSNextProto specifies how the Transport switches to an\n\t// alternate protocol (such as HTTP/2) after a TLS ALPN\n\t// protocol negotiation. If Transport dials a TLS connection\n\t// with a non-empty protocol name and TLSNextProto contains a\n\t// map entry for that key (such as \"h2\"), then the func is\n\t// called with the request's authority (such as \"example.com\"\n\t// or \"example.com:1234\") and the TLS connection. The function\n\t// must return a RoundTripper that then handles the request.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(authority string, c *tls.Conn) RoundTripper\n\n\t// ProxyConnectHeader optionally specifies headers to send to\n\t// proxies during CONNECT requests.\n\t// To set the header dynamically, see GetProxyConnectHeader.\n\tProxyConnectHeader Header\n\n\t// GetProxyConnectHeader optionally specifies a func to return\n\t// headers to send to proxyURL during a CONNECT request to the\n\t// ip:port target.\n\t// If it returns an error, the Transport's RoundTrip fails with\n\t// that error. It can return (nil, nil) to not add headers.\n\t// If GetProxyConnectHeader is non-nil, ProxyConnectHeader is\n\t// ignored.\n\tGetProxyConnectHeader func(ctx context.Context, proxyURL *url.URL, target string) (Header, error)\n\n\t// MaxResponseHeaderBytes specifies a limit on how many\n\t// response bytes are allowed in the server's response\n\t// header.\n\t//\n\t// Zero means to use a default limit.\n\tMaxResponseHeaderBytes int64\n\n\t// WriteBufferSize specifies the size of the write buffer used\n\t// when writing to the transport.\n\t// If zero, a default (currently 4KB) is used.\n\tWriteBufferSize int\n\n\t// ReadBufferSize specifies the size of the read buffer used\n\t// when reading from the transport.\n\t// If zero, a default (currently 4KB) is used.\n\tReadBufferSize int\n\n\t// nextProtoOnce guards initialization of TLSNextProto and\n\t// h2transport (via onceSetNextProtoDefaults)\n\tnextProtoOnce      sync.Once\n\th2transport        h2Transport // non-nil if http2 wired up\n\ttlsNextProtoWasNil bool        // whether TLSNextProto was nil when the Once fired\n\n\t// ForceAttemptHTTP2 controls whether HTTP/2 is enabled when a non-zero\n\t// Dial, DialTLS, or DialContext func or TLSClientConfig is provided.\n\t// By default, use of any those fields conservatively disables HTTP/2.\n\t// To use a custom dialer or TLS config and still attempt HTTP/2\n\t// upgrades, set this to true.\n\tForceAttemptHTTP2 bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/tls.go",
          "code_snippet": "Dialer struct {\n\t// NetDialer is the optional dialer to use for the TLS connections'\n\t// underlying TCP connections.\n\t// A nil NetDialer is equivalent to the net.Dialer zero value.\n\tNetDialer *net.Dialer\n\n\t// Config is the TLS configuration to use for new connections.\n\t// A nil configuration is equivalent to the zero\n\t// configuration; see the documentation of Config for the\n\t// defaults.\n\tConfig *Config\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/tls.go",
          "code_snippet": "func (d *Dialer) DialContext(ctx context.Context, network, addr string) (net.Conn, error) {\n\tc, err := dial(ctx, d.netDialer(), network, addr, d.Config)\n\tif err != nil {\n\t\t// Don't return c (a typed nil) in an interface.\n\t\treturn nil, err\n\t}\n\treturn c, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/dial.go",
          "code_snippet": "Dialer struct {\n\t// Timeout is the maximum amount of time a dial will wait for\n\t// a connect to complete. If Deadline is also set, it may fail\n\t// earlier.\n\t//\n\t// The default is no timeout.\n\t//\n\t// When using TCP and dialing a host name with multiple IP\n\t// addresses, the timeout may be divided between them.\n\t//\n\t// With or without a timeout, the operating system may impose\n\t// its own earlier timeout. For instance, TCP timeouts are\n\t// often around 3 minutes.\n\tTimeout time.Duration\n\n\t// Deadline is the absolute point in time after which dials\n\t// will fail. If Timeout is set, it may fail earlier.\n\t// Zero means no deadline, or dependent on the operating system\n\t// as with the Timeout option.\n\tDeadline time.Time\n\n\t// LocalAddr is the local address to use when dialing an\n\t// address. The address must be of a compatible type for the\n\t// network being dialed.\n\t// If nil, a local address is automatically chosen.\n\tLocalAddr Addr\n\n\t// DualStack previously enabled RFC 6555 Fast Fallback\n\t// support, also known as \"Happy Eyeballs\", in which IPv4 is\n\t// tried soon if IPv6 appears to be misconfigured and\n\t// hanging.\n\t//\n\t// Deprecated: Fast Fallback is enabled by default. To\n\t// disable, set FallbackDelay to a negative value.\n\tDualStack bool\n\n\t// FallbackDelay specifies the length of time to wait before\n\t// spawning a RFC 6555 Fast Fallback connection. That is, this\n\t// is the amount of time to wait for IPv6 to succeed before\n\t// assuming that IPv6 is misconfigured and falling back to\n\t// IPv4.\n\t//\n\t// If zero, a default delay of 300ms is used.\n\t// A negative value disables Fast Fallback support.\n\tFallbackDelay time.Duration\n\n\t// KeepAlive specifies the interval between keep-alive\n\t// probes for an active network connection.\n\t//\n\t// KeepAlive is ignored if KeepAliveConfig.Enable is true.\n\t//\n\t// If zero, keep-alive probes are sent with a default value\n\t// (currently 15 seconds), if supported by the protocol and operating\n\t// system. Network protocols or operating systems that do\n\t// not support keep-alive ignore this field.\n\t// If negative, keep-alive probes are disabled.\n\tKeepAlive time.Duration\n\n\t// KeepAliveConfig specifies the keep-alive probe configuration\n\t// for an active network connection, when supported by the\n\t// protocol and operating system.\n\t//\n\t// If KeepAliveConfig.Enable is true, keep-alive probes are enabled.\n\t// If KeepAliveConfig.Enable is false and KeepAlive is negative,\n\t// keep-alive probes are disabled.\n\tKeepAliveConfig KeepAliveConfig\n\n\t// Resolver optionally specifies an alternate resolver to use.\n\tResolver *Resolver\n\n\t// Cancel is an optional channel whose closure indicates that\n\t// the dial should be canceled. Not all types of dials support\n\t// cancellation.\n\t//\n\t// Deprecated: Use DialContext instead.\n\tCancel \u003c-chan struct{}\n\n\t// If Control is not nil, it is called after creating the network\n\t// connection but before actually dialing.\n\t//\n\t// Network and address parameters passed to Control function are not\n\t// necessarily the ones passed to Dial. For example, passing \"tcp\" to Dial\n\t// will cause the Control function to be called with \"tcp4\" or \"tcp6\".\n\t//\n\t// Control is ignored if ControlContext is not nil.\n\tControl func(network, address string, c syscall.RawConn) error\n\n\t// If ControlContext is not nil, it is called after creating the network\n\t// connection but before actually dialing.\n\t//\n\t// Network and address parameters passed to ControlContext function are not\n\t// necessarily the ones passed to Dial. For example, passing \"tcp\" to Dial\n\t// will cause the ControlContext function to be called with \"tcp4\" or \"tcp6\".\n\t//\n\t// If ControlContext is not nil, Control is ignored.\n\tControlContext func(ctx context.Context, network, address string, c syscall.RawConn) error\n\n\t// If mptcpStatus is set to a value allowing Multipath TCP (MPTCP) to be\n\t// used, any call to Dial with \"tcp(4|6)\" as network will use MPTCP if\n\t// supported by the operating system.\n\tmptcpStatus mptcpStatus\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/dial.go",
          "code_snippet": "func (d *Dialer) DialContext(ctx context.Context, network, address string) (Conn, error) {\n\tif ctx == nil {\n\t\tpanic(\"nil context\")\n\t}\n\tdeadline := d.deadline(ctx, time.Now())\n\tif !deadline.IsZero() {\n\t\ttestHookStepTime()\n\t\tif d, ok := ctx.Deadline(); !ok || deadline.Before(d) {\n\t\t\tsubCtx, cancel := context.WithDeadline(ctx, deadline)\n\t\t\tdefer cancel()\n\t\t\tctx = subCtx\n\t\t}\n\t}\n\tif oldCancel := d.Cancel; oldCancel != nil {\n\t\tsubCtx, cancel := context.WithCancel(ctx)\n\t\tdefer cancel()\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase \u003c-oldCancel:\n\t\t\t\tcancel()\n\t\t\tcase \u003c-subCtx.Done():\n\t\t\t}\n\t\t}()\n\t\tctx = subCtx\n\t}\n\n\t// Shadow the nettrace (if any) during resolve so Connect events don't fire for DNS lookups.\n\tresolveCtx := ctx\n\tif trace, _ := ctx.Value(nettrace.TraceKey{}).(*nettrace.Trace); trace != nil {\n\t\tshadow := *trace\n\t\tshadow.ConnectStart = nil\n\t\tshadow.ConnectDone = nil\n\t\tresolveCtx = context.WithValue(resolveCtx, nettrace.TraceKey{}, \u0026shadow)\n\t}\n\n\taddrs, err := d.resolver().resolveAddrList(resolveCtx, \"dial\", network, address, d.LocalAddr)\n\tif err != nil {\n\t\treturn nil, \u0026OpError{Op: \"dial\", Net: network, Source: nil, Addr: nil, Err: err}\n\t}\n\n\tsd := \u0026sysDialer{\n\t\tDialer:  *d,\n\t\tnetwork: network,\n\t\taddress: address,\n\t}\n\n\tvar primaries, fallbacks addrList\n\tif d.dualStack() \u0026\u0026 network == \"tcp\" {\n\t\tprimaries, fallbacks = addrs.partition(isIPv4)\n\t} else {\n\t\tprimaries = addrs\n\t}\n\n\treturn sd.dialParallel(ctx, primaries, fallbacks)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "HandlerFunc func(ResponseWriter, *Request)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Context() context.Context {\n\tif r.ctx != nil {\n\t\treturn r.ctx\n\t}\n\treturn context.Background()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusBadGateway                    = 502",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Write(w io.Writer) error {\n\treturn r.write(w, false, nil, nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func Copy(dst Writer, src Reader) (written int64, err error) {\n\treturn copyBuffer(dst, src, nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        144,
        145,
        146,
        147,
        149,
        150,
        151,
        155,
        156,
        157,
        163,
        164,
        169,
        170,
        171,
        172,
        173,
        175,
        176,
        177,
        178
      ],
      "cover_details": {
        "line_cover_rate": 0.6122448979591837
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group.go:PUT",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        }
      ],
      "name": "PUT",
      "signature": "(g *Group) PUT (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) PUT(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodPut, path, h, m...)\n}",
      "function_comment": "// PUT implements `Echo#PUT()` for sub-routes within the Group.",
      "function_statement": "// PUT implements `Echo#PUT()` for sub-routes within the Group.",
      "start_line": 71,
      "end_line": 73,
      "file_path": "./group.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\t// Combine into a new slice to avoid accidentally passing the same slice for\n\t// multiple routes, which would lead to later add() calls overwriting the\n\t// middleware from earlier calls.\n\tm := make([]MiddlewareFunc, 0, len(g.middleware)+len(middleware))\n\tm = append(m, g.middleware...)\n\tm = append(m, middleware...)\n\treturn g.echo.add(g.host, method, g.prefix+path, handler, m...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPut     = \"PUT\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        71,
        72,
        73
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:WWWRedirectWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectWWWRedirect"
        }
      ],
      "name": "WWWRedirectWithConfig",
      "signature": "WWWRedirectWithConfig (config RedirectConfig) echo.MiddlewareFunc",
      "ground_truth": "func WWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif !strings.HasPrefix(host, www) {\n\t\t\treturn true, scheme + \"://www.\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
      "function_comment": "// WWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `WWWRedirect()`.",
      "function_statement": "// WWWRedirectWithConfig returns an HTTPSRedirect middleware with config.\n// See `WWWRedirect()`.",
      "start_line": 104,
      "end_line": 111,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "RedirectConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional. Default value http.StatusMovedPermanently.\n\tCode int `yaml:\"code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func redirect(config RedirectConfig, cb redirectLogic) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRedirectConfig.Skipper\n\t}\n\tif config.Code == 0 {\n\t\tconfig.Code = DefaultRedirectConfig.Code\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq, scheme := c.Request(), c.Scheme()\n\t\t\thost := req.Host\n\t\t\tif ok, url := cb(scheme, host, req.RequestURI); ok {\n\t\t\t\treturn c.Redirect(config.Code, url)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "www = \"www.\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasPrefix(s, prefix string) bool {\n\treturn stringslite.HasPrefix(s, prefix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        104,
        105,
        106,
        107,
        108,
        109
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/request_id.go:generator",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestIDConfigDifferentHeader"
        }
      ],
      "name": "generator",
      "signature": "generator () string",
      "ground_truth": "func generator() string {\n\treturn randomString(32)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 73,
      "end_line": 75,
      "file_path": "./middleware/request_id.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/util.go",
          "code_snippet": "func randomString(length uint8) string {\n\treader := randomReaderPool.Get().(*bufio.Reader)\n\tdefer randomReaderPool.Put(reader)\n\n\tb := make([]byte, length)\n\tr := make([]byte, length+(length/4)) // perf: avoid read from rand.Reader many times\n\tvar i uint8 = 0\n\n\t// security note:\n\t// we can't just simply do b[i]=randomStringCharset[rb%len(randomStringCharset)],\n\t// len(len(randomStringCharset)) is 52, and rb is [0, 255], 256 = 52 * 4 + 48.\n\t// make the first 48 characters more possibly to be generated then others.\n\t// So we have to skip bytes when rb \u003e randomStringMaxByte\n\n\tfor {\n\t\t_, err := io.ReadFull(reader, r)\n\t\tif err != nil {\n\t\t\tpanic(\"unexpected error happened when reading from bufio.NewReader(crypto/rand.Reader)\")\n\t\t}\n\t\tfor _, rb := range r {\n\t\t\tif rb \u003e randomStringMaxByte {\n\t\t\t\t// Skip this number to avoid bias.\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tb[i] = randomStringCharset[rb%randomStringCharsetLen]\n\t\t\ti++\n\t\t\tif i == length {\n\t\t\t\treturn string(b)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        73,
        74,
        75
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:valuesFromForm",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromForm"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "valuesFromForm",
      "signature": "valuesFromForm (name string) ValuesExtractor",
      "ground_truth": "func valuesFromForm(name string) ValuesExtractor {\n\treturn func(c echo.Context) ([]string, error) {\n\t\tif c.Request().Form == nil {\n\t\t\t_ = c.Request().ParseMultipartForm(32 \u003c\u003c 20) // same what `c.Request().FormValue(name)` does\n\t\t}\n\t\tvalues := c.Request().Form[name]\n\t\tif len(values) == 0 {\n\t\t\treturn nil, errFormExtractorValueMissing\n\t\t}\n\t\tif len(values) \u003e extractorLimit-1 {\n\t\t\tvalues = values[:extractorLimit]\n\t\t}\n\t\tresult := append([]string{}, values...)\n\t\treturn result, nil\n\t}\n}",
      "function_comment": "// valuesFromForm returns a function that extracts values from the form field.",
      "function_statement": "// valuesFromForm returns a function that extracts values from the form field.",
      "start_line": 192,
      "end_line": 207,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "errFormExtractorValueMissing = errors.New(\"missing value in the form\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "extractorLimit = 20",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) ParseMultipartForm(maxMemory int64) error {\n\tif r.MultipartForm == multipartByReader {\n\t\treturn errors.New(\"http: multipart handled by MultipartReader\")\n\t}\n\tvar parseFormErr error\n\tif r.Form == nil {\n\t\t// Let errors in ParseForm fall through, and just\n\t\t// return it at the end.\n\t\tparseFormErr = r.ParseForm()\n\t}\n\tif r.MultipartForm != nil {\n\t\treturn nil\n\t}\n\n\tmr, err := r.multipartReader(false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tf, err := mr.ReadForm(maxMemory)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif r.PostForm == nil {\n\t\tr.PostForm = make(url.Values)\n\t}\n\tfor k, v := range f.Value {\n\t\tr.Form[k] = append(r.Form[k], v...)\n\t\t// r.PostForm should also be populated. See Issue 9305.\n\t\tr.PostForm[k] = append(r.PostForm[k], v...)\n\t}\n\n\tr.MultipartForm = f\n\n\treturn parseFormErr\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Response",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "Response",
      "signature": "(c *context) Response () *Response",
      "ground_truth": "func (c *context) Response() *Response {\n\treturn c.response\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 258,
      "end_line": 260,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        258,
        259,
        260
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Inline",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        }
      ],
      "name": "Inline",
      "signature": "(c *context) Inline (file, name string) error",
      "ground_truth": "func (c *context) Inline(file, name string) error {\n\treturn c.contentDisposition(file, name, \"inline\")\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 594,
      "end_line": 596,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) contentDisposition(file, name, dispositionType string) error {\n\tc.response.Header().Set(HeaderContentDisposition, fmt.Sprintf(`%s; filename=\"%s\"`, dispositionType, quoteEscaper.Replace(name)))\n\treturn c.File(file)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        594,
        595,
        596
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Validate",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        }
      ],
      "name": "Validate",
      "signature": "(c *context) Validate (i any) error",
      "ground_truth": "func (c *context) Validate(i any) error {\n\tif c.echo.Validator == nil {\n\t\treturn ErrValidatorNotRegistered\n\t}\n\treturn c.echo.Validator.Validate(i)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 453,
      "end_line": 458,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrValidatorNotRegistered = errors.New(\"validator not registered\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Validator interface {\n\tValidate(i interface{}) error\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        453,
        454,
        455,
        456,
        457
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Router",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        }
      ],
      "name": "Router",
      "signature": "(e *Echo) Router () *Router",
      "ground_truth": "func (e *Echo) Router() *Router {\n\treturn e.router\n}",
      "function_comment": "// Router returns the default router.",
      "function_statement": "// Router returns the default router.",
      "start_line": 402,
      "end_line": 404,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": "v4"
        }
      ],
      "covered_lines": [
        402,
        403,
        404
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Scheme",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Scheme"
        }
      ],
      "name": "Scheme",
      "signature": "(c *context) Scheme () string",
      "ground_truth": "func (c *context) Scheme() string {\n\t// Can't use `r.Request.URL.Scheme`\n\t// See: https://groups.google.com/forum/#!topic/golang-nuts/pMUkBlQBDF0\n\tif c.IsTLS() {\n\t\treturn \"https\"\n\t}\n\tif scheme := c.request.Header.Get(HeaderXForwardedProto); scheme != \"\" {\n\t\treturn scheme\n\t}\n\tif scheme := c.request.Header.Get(HeaderXForwardedProtocol); scheme != \"\" {\n\t\treturn scheme\n\t}\n\tif ssl := c.request.Header.Get(HeaderXForwardedSsl); ssl == \"on\" {\n\t\treturn \"https\"\n\t}\n\tif scheme := c.request.Header.Get(HeaderXUrlScheme); scheme != \"\" {\n\t\treturn scheme\n\t}\n\treturn \"http\"\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 275,
      "end_line": 294,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) IsTLS() bool {\n\treturn c.request.TLS != nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedProto     = \"X-Forwarded-Proto\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedProtocol  = \"X-Forwarded-Protocol\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedSsl       = \"X-Forwarded-Ssl\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXUrlScheme          = \"X-Url-Scheme\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293
      ],
      "cover_details": {
        "line_cover_rate": 0.95
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:findStaticChild",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "findStaticChild",
      "signature": "(n *node) findStaticChild (l byte) *node",
      "ground_truth": "func (n *node) findStaticChild(l byte) *node {\n\tfor _, c := range n.staticChildren {\n\t\tif c.label == l {\n\t\t\treturn c\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 431,
      "end_line": 438,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        431,
        432,
        433,
        434,
        435,
        437
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:createFilesystem",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_FlushPanics"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "createFilesystem",
      "signature": "createFilesystem () filesystem",
      "ground_truth": "func createFilesystem() filesystem {\n\treturn filesystem{\n\t\tFilesystem: newDefaultFS(),\n\t}\n}",
      "function_comment": "// SPDX-License-Identifier: MIT",
      "function_statement": "// SPDX-License-Identifier: MIT",
      "start_line": 26,
      "end_line": 30,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "filesystem struct {\n\t// Filesystem is file system used by Static and File handlers to access files.\n\t// Defaults to os.DirFS(\".\")\n\t//\n\t// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n\t// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n\t// including `assets/images` as their prefix.\n\tFilesystem fs.FS\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func newDefaultFS() *defaultFS {\n\tdir, _ := os.Getwd()\n\treturn \u0026defaultFS{\n\t\tprefix: dir,\n\t\tfs:     nil,\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        26,
        27,
        28,
        29,
        30
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:int",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "int",
      "signature": "(b *ValueBinder) int (sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) int(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseInt(value, 10, bitSize)\n\tif err != nil {\n\t\tif bitSize == 0 {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to int\", err))\n\t\t} else {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to int%v\", bitSize), err))\n\t\t}\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *int64:\n\t\t*d = n\n\tcase *int32:\n\t\t*d = int32(n)\n\tcase *int16:\n\t\t*d = int16(n)\n\tcase *int8:\n\t\t*d = int8(n)\n\tcase *int:\n\t\t*d = int(n)\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 519,
      "end_line": 543,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func ParseInt(s string, base int, bitSize int) (i int64, err error) {\n\tconst fnParseInt = \"ParseInt\"\n\n\tif s == \"\" {\n\t\treturn 0, syntaxError(fnParseInt, s)\n\t}\n\n\t// Pick off leading sign.\n\ts0 := s\n\tneg := false\n\tif s[0] == '+' {\n\t\ts = s[1:]\n\t} else if s[0] == '-' {\n\t\tneg = true\n\t\ts = s[1:]\n\t}\n\n\t// Convert unsigned and check range.\n\tvar un uint64\n\tun, err = ParseUint(s, base, bitSize)\n\tif err != nil \u0026\u0026 err.(*NumError).Err != ErrRange {\n\t\terr.(*NumError).Func = fnParseInt\n\t\terr.(*NumError).Num = stringslite.Clone(s0)\n\t\treturn 0, err\n\t}\n\n\tif bitSize == 0 {\n\t\tbitSize = IntSize\n\t}\n\n\tcutoff := uint64(1 \u003c\u003c uint(bitSize-1))\n\tif !neg \u0026\u0026 un \u003e= cutoff {\n\t\treturn int64(cutoff - 1), rangeError(fnParseInt, s0)\n\t}\n\tif neg \u0026\u0026 un \u003e cutoff {\n\t\treturn -int64(cutoff), rangeError(fnParseInt, s0)\n\t}\n\tn := int64(un)\n\tif neg {\n\t\tn = -n\n\t}\n\treturn n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        519,
        520,
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        530,
        531,
        532,
        533,
        534,
        535,
        536,
        537,
        538,
        539,
        540,
        542
      ],
      "cover_details": {
        "line_cover_rate": 0.84
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:times",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        }
      ],
      "name": "times",
      "signature": "(b *ValueBinder) times (sourceParam string, dest *[]time.Time, layout string, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) times(sourceParam string, dest *[]time.Time, layout string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\ttmp := make([]time.Time, len(values))\n\tfor i, v := range values {\n\t\tt, err := time.Parse(layout, v)\n\t\tif err != nil {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{v}, \"failed to bind field value to Time\", err))\n\t\t\tif b.failFast {\n\t\t\t\treturn b\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ttmp[i] = t\n\t}\n\tif b.errors == nil {\n\t\t*dest = tmp\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1130,
      "end_line": 1159,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "func Parse(layout, value string) (Time, error) {\n\t// Optimize for RFC3339 as it accounts for over half of all representations.\n\tif layout == RFC3339 || layout == RFC3339Nano {\n\t\tif t, ok := parseRFC3339(value, Local); ok {\n\t\t\treturn t, nil\n\t\t}\n\t}\n\treturn parse(layout, value, UTC, Local)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1130,
        1131,
        1132,
        1133,
        1135,
        1136,
        1137,
        1138,
        1139,
        1140,
        1143,
        1144,
        1145,
        1146,
        1147,
        1148,
        1149,
        1150,
        1151,
        1153,
        1155,
        1156,
        1157,
        1158
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:BindUnmarshaler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        }
      ],
      "name": "BindUnmarshaler",
      "signature": "(b *ValueBinder) BindUnmarshaler (sourceParam string, dest BindUnmarshaler) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) BindUnmarshaler(sourceParam string, dest BindUnmarshaler) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\ttmp := b.ValueFunc(sourceParam)\n\tif tmp == \"\" {\n\t\treturn b\n\t}\n\n\tif err := dest.UnmarshalParam(tmp); err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{tmp}, \"failed to bind field value to BindUnmarshaler interface\", err))\n\t}\n\treturn b\n}",
      "function_comment": "// BindUnmarshaler binds parameter to destination implementing BindUnmarshaler interface",
      "function_statement": "// BindUnmarshaler binds parameter to destination implementing BindUnmarshaler interface",
      "start_line": 296,
      "end_line": 310,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "BindUnmarshaler interface {\n\t// UnmarshalParam decodes and assigns a value from an form or query param.\n\tUnmarshalParam(param string) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        296,
        297,
        298,
        299,
        301,
        302,
        303,
        304,
        306,
        307,
        308,
        309
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint64s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustUint64s",
      "signature": "(b *ValueBinder) MustUint64s (sourceParam string, dest *[]uint64) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint64s(sourceParam string, dest *[]uint64) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustUint64s requires parameter value to exist to bind to uint64 slice variable. Returns error when value does not exist",
      "function_statement": "// MustUint64s requires parameter value to exist to bind to uint64 slice variable. Returns error when value does not exist",
      "start_line": 855,
      "end_line": 857,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        855,
        856,
        857
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:optionsMethodHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "optionsMethodHandler",
      "signature": "optionsMethodHandler (allowMethods string) func(c Context) error",
      "ground_truth": "func optionsMethodHandler(allowMethods string) func(c Context) error {\n\treturn func(c Context) error {\n\t\t// Note: we are not handling most of the CORS headers here. CORS is handled by CORS middleware\n\t\t// 'OPTIONS' method RFC: https://httpwg.org/specs/rfc7231.html#OPTIONS\n\t\t// 'Allow' header RFC: https://datatracker.ietf.org/doc/html/rfc7231#section-7.4.1\n\t\tc.Response().Header().Add(HeaderAllow, allowMethods)\n\t\treturn c.NoContent(http.StatusNoContent)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 524,
      "end_line": 532,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderAllow               = \"Allow\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Add(key, value string) {\n\ttextproto.MIMEHeader(h).Add(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusNoContent            = 204",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        524,
        525,
        526,
        527,
        528,
        529,
        530,
        531
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/method_override.go:MethodFromHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/basic_auth_test.go",
          "func_name": "TestBasicAuthRealm"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/basic_auth_test.go",
          "func_name": "TestBasicAuth"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDump"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpFails"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanNotFlush"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanFlush"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanUnwrap"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanHijack"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpResponseWriter_CanNotHijack"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitReader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig_Skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit_panicOnInvalidLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipResponseWriter_CanUnwrap"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipResponseWriter_CanHijack"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipResponseWriter_CanNotHijack"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturnedInvalidConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORSWithConfig_AllowMethods"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginSubdomain"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestCompressRequestWithoutDecompressMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressDefaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCorsHeaders"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressPoolError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromQuery"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromCookie"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromParam"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromForm"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestValuesFromHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_panicsOnEmptyValidator"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_panicsOnInvalidLookup"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuth"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/method_override_test.go",
          "func_name": "TestMethodOverride"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/middleware_test.go",
          "func_name": "TestRewriteURL"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_ContinueOnIgnoredError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplateWithTimeUnixMicro"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplateWithTimeUnixMilli"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerCustomTagFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestFailNextTarget"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestTargetProvider"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerIPAddress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLogger"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerCustomTimestamp"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyBalancerWithNoTargets"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter_panicBehaviour"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestModifyResponseUseContext"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_skipperNoSkip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultDenyHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_Allow"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_cleanupStaleVisitors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestNewRateLimiterMemoryStore"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_beforeFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverErrAbortHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecover"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithConfig_LogErrorFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithConfig_LogLevel"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithDisabled_ErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID_IDNotAltered"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestNonWWWRedirectWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestIDConfigDifferentHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig_missingOnLogValuesPanics"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteAfterRouting"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithCaret"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteWithConfigPreMiddleware_Issue1143"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithRegexRules"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteReplacementEscaping"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlash"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic_GroupWithStatic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_beforeNextFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/secure_test.go",
          "func_name": "TestSecure"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlash"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_LogValuesFuncError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_ID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_logError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_headerIsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_HandleError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "Test_matchScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "Test_matchSubdomain"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic_CustomFS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "TestRandomString"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/util_test.go",
          "func_name": "TestRandomStringBias"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_allFields"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "MethodFromHeader",
      "signature": "MethodFromHeader (header string) MethodOverrideGetter",
      "ground_truth": "func MethodFromHeader(header string) MethodOverrideGetter {\n\treturn func(c echo.Context) string {\n\t\treturn c.Request().Header.Get(header)\n\t}\n}",
      "function_comment": "// MethodFromHeader is a `MethodOverrideGetter` that gets overridden method from\n// the request header.",
      "function_statement": "// MethodFromHeader is a `MethodOverrideGetter` that gets overridden method from\n// the request header.",
      "start_line": 71,
      "end_line": 75,
      "file_path": "./middleware/method_override.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "MethodOverrideGetter func(echo.Context) string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        71,
        72,
        73,
        74
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:setBoolField",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        }
      ],
      "name": "setBoolField",
      "signature": "setBoolField (value string, field reflect.Value) error",
      "ground_truth": "func setBoolField(value string, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"false\"\n\t}\n\tboolVal, err := strconv.ParseBool(value)\n\tif err == nil {\n\t\tfield.SetBool(boolVal)\n\t}\n\treturn err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 422,
      "end_line": 431,
      "file_path": "./bind.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atob.go",
          "code_snippet": "func ParseBool(str string) (bool, error) {\n\tswitch str {\n\tcase \"1\", \"t\", \"T\", \"true\", \"TRUE\", \"True\":\n\t\treturn true, nil\n\tcase \"0\", \"f\", \"F\", \"false\", \"FALSE\", \"False\":\n\t\treturn false, nil\n\t}\n\treturn false, syntaxError(\"ParseBool\", str)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) SetBool(x bool) {\n\tv.mustBeAssignable()\n\tv.mustBe(Bool)\n\t*(*bool)(v.ptr) = x\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        422,
        423,
        426,
        427,
        428,
        429,
        430
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:customFunc",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        }
      ],
      "name": "customFunc",
      "signature": "(b *ValueBinder) customFunc (sourceParam string, customFunc func(values []string) []error, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) customFunc(sourceParam string, customFunc func(values []string) []error, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tif errs := customFunc(values); errs != nil {\n\t\tb.errors = append(b.errors, errs...)\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 219,
      "end_line": 235,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        219,
        220,
        221,
        222,
        224,
        225,
        226,
        227,
        228,
        229,
        231,
        232,
        233,
        234
      ],
      "cover_details": {
        "line_cover_rate": 0.8235294117647058
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint8s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustUint8s",
      "signature": "(b *ValueBinder) MustUint8s (sourceParam string, dest *[]uint8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint8s(sourceParam string, dest *[]uint8) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustUint8s requires parameter value to exist to bind to uint8 slice variable. Returns error when value does not exist",
      "function_statement": "// MustUint8s requires parameter value to exist to bind to uint8 slice variable. Returns error when value does not exist",
      "start_line": 885,
      "end_line": 887,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        885,
        886,
        887
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:time",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        }
      ],
      "name": "time",
      "signature": "(b *ValueBinder) time (sourceParam string, dest *time.Time, layout string, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) time(sourceParam string, dest *time.Time, layout string, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\tt, err := time.Parse(layout, value)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\t*dest = t\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1099,
      "end_line": 1118,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "func Parse(layout, value string) (Time, error) {\n\t// Optimize for RFC3339 as it accounts for over half of all representations.\n\tif layout == RFC3339 || layout == RFC3339Nano {\n\t\tif t, ok := parseRFC3339(value, Local); ok {\n\t\t\treturn t, nil\n\t\t}\n\t}\n\treturn parse(layout, value, UTC, Local)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1099,
        1100,
        1101,
        1102,
        1104,
        1105,
        1106,
        1107,
        1108,
        1109,
        1111,
        1112,
        1113,
        1114,
        1115,
        1116,
        1117
      ],
      "cover_details": {
        "line_cover_rate": 0.85
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:JSON",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "JSON",
      "signature": "(c *context) JSON (code int, i any) (err error)",
      "ground_truth": "func (c *context) JSON(code int, i any) (err error) {\n\tindent := \"\"\n\tif _, pretty := c.QueryParams()[\"pretty\"]; c.echo.Debug || pretty {\n\t\tindent = defaultIndent\n\t}\n\treturn c.json(code, i, indent)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 508,
      "end_line": 514,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) QueryParams() url.Values {\n\tif c.query == nil {\n\t\tc.query = c.request.URL.Query()\n\t}\n\treturn c.query\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "defaultIndent = \"  \"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) json(code int, i any, indent string) error {\n\tc.writeContentType(MIMEApplicationJSON)\n\tc.response.Status = code\n\treturn c.echo.JSONSerializer.Serialize(c, i, indent)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        508,
        509,
        510,
        511,
        512,
        513
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/logger.go:LoggerWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplateWithTimeUnixMicro"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplateWithTimeUnixMilli"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerCustomTagFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerIPAddress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLogger"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerCustomTimestamp"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "LoggerWithConfig",
      "signature": "LoggerWithConfig (config LoggerConfig) echo.MiddlewareFunc",
      "ground_truth": "func LoggerWithConfig(config LoggerConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultLoggerConfig.Skipper\n\t}\n\tif config.Format == \"\" {\n\t\tconfig.Format = DefaultLoggerConfig.Format\n\t}\n\tif config.Output == nil {\n\t\tconfig.Output = DefaultLoggerConfig.Output\n\t}\n\n\tconfig.template = fasttemplate.New(config.Format, \"${\", \"}\")\n\tconfig.colorer = color.New()\n\tconfig.colorer.SetOutput(config.Output)\n\tconfig.pool = \u0026sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\treturn bytes.NewBuffer(make([]byte, 256))\n\t\t},\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (err error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\tstart := time.Now()\n\t\t\tif err = next(c); err != nil {\n\t\t\t\tc.Error(err)\n\t\t\t}\n\t\t\tstop := time.Now()\n\t\t\tbuf := config.pool.Get().(*bytes.Buffer)\n\t\t\tbuf.Reset()\n\t\t\tdefer config.pool.Put(buf)\n\n\t\t\tif _, err = config.template.ExecuteFunc(buf, func(w io.Writer, tag string) (int, error) {\n\t\t\t\tswitch tag {\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tif config.CustomTagFunc == nil {\n\t\t\t\t\t\treturn 0, nil\n\t\t\t\t\t}\n\t\t\t\t\treturn config.CustomTagFunc(c, buf)\n\t\t\t\tcase \"time_unix\":\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().Unix(), 10))\n\t\t\t\tcase \"time_unix_milli\":\n\t\t\t\t\t// go 1.17 or later, it supports time#UnixMilli()\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().UnixNano()/1000000, 10))\n\t\t\t\tcase \"time_unix_micro\":\n\t\t\t\t\t// go 1.17 or later, it supports time#UnixMicro()\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().UnixNano()/1000, 10))\n\t\t\t\tcase \"time_unix_nano\":\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(time.Now().UnixNano(), 10))\n\t\t\t\tcase \"time_rfc3339\":\n\t\t\t\t\treturn buf.WriteString(time.Now().Format(time.RFC3339))\n\t\t\t\tcase \"time_rfc3339_nano\":\n\t\t\t\t\treturn buf.WriteString(time.Now().Format(time.RFC3339Nano))\n\t\t\t\tcase \"time_custom\":\n\t\t\t\t\treturn buf.WriteString(time.Now().Format(config.CustomTimeFormat))\n\t\t\t\tcase \"id\":\n\t\t\t\t\tid := req.Header.Get(echo.HeaderXRequestID)\n\t\t\t\t\tif id == \"\" {\n\t\t\t\t\t\tid = res.Header().Get(echo.HeaderXRequestID)\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(id)\n\t\t\t\tcase \"remote_ip\":\n\t\t\t\t\treturn buf.WriteString(c.RealIP())\n\t\t\t\tcase \"host\":\n\t\t\t\t\treturn buf.WriteString(req.Host)\n\t\t\t\tcase \"uri\":\n\t\t\t\t\treturn buf.WriteString(req.RequestURI)\n\t\t\t\tcase \"method\":\n\t\t\t\t\treturn buf.WriteString(req.Method)\n\t\t\t\tcase \"path\":\n\t\t\t\t\tp := req.URL.Path\n\t\t\t\t\tif p == \"\" {\n\t\t\t\t\t\tp = \"/\"\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(p)\n\t\t\t\tcase \"route\":\n\t\t\t\t\treturn buf.WriteString(c.Path())\n\t\t\t\tcase \"protocol\":\n\t\t\t\t\treturn buf.WriteString(req.Proto)\n\t\t\t\tcase \"referer\":\n\t\t\t\t\treturn buf.WriteString(req.Referer())\n\t\t\t\tcase \"user_agent\":\n\t\t\t\t\treturn buf.WriteString(req.UserAgent())\n\t\t\t\tcase \"status\":\n\t\t\t\t\tn := res.Status\n\t\t\t\t\ts := config.colorer.Green(n)\n\t\t\t\t\tswitch {\n\t\t\t\t\tcase n \u003e= 500:\n\t\t\t\t\t\ts = config.colorer.Red(n)\n\t\t\t\t\tcase n \u003e= 400:\n\t\t\t\t\t\ts = config.colorer.Yellow(n)\n\t\t\t\t\tcase n \u003e= 300:\n\t\t\t\t\t\ts = config.colorer.Cyan(n)\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(s)\n\t\t\t\tcase \"error\":\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t// Error may contain invalid JSON e.g. `\"`\n\t\t\t\t\t\tb, _ := json.Marshal(err.Error())\n\t\t\t\t\t\tb = b[1 : len(b)-1]\n\t\t\t\t\t\treturn buf.Write(b)\n\t\t\t\t\t}\n\t\t\t\tcase \"latency\":\n\t\t\t\t\tl := stop.Sub(start)\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(int64(l), 10))\n\t\t\t\tcase \"latency_human\":\n\t\t\t\t\treturn buf.WriteString(stop.Sub(start).String())\n\t\t\t\tcase \"bytes_in\":\n\t\t\t\t\tcl := req.Header.Get(echo.HeaderContentLength)\n\t\t\t\t\tif cl == \"\" {\n\t\t\t\t\t\tcl = \"0\"\n\t\t\t\t\t}\n\t\t\t\t\treturn buf.WriteString(cl)\n\t\t\t\tcase \"bytes_out\":\n\t\t\t\t\treturn buf.WriteString(strconv.FormatInt(res.Size, 10))\n\t\t\t\tdefault:\n\t\t\t\t\tswitch {\n\t\t\t\t\tcase strings.HasPrefix(tag, \"header:\"):\n\t\t\t\t\t\treturn buf.Write([]byte(c.Request().Header.Get(tag[7:])))\n\t\t\t\t\tcase strings.HasPrefix(tag, \"query:\"):\n\t\t\t\t\t\treturn buf.Write([]byte(c.QueryParam(tag[6:])))\n\t\t\t\t\tcase strings.HasPrefix(tag, \"form:\"):\n\t\t\t\t\t\treturn buf.Write([]byte(c.FormValue(tag[5:])))\n\t\t\t\t\tcase strings.HasPrefix(tag, \"cookie:\"):\n\t\t\t\t\t\tcookie, err := c.Cookie(tag[7:])\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\treturn buf.Write([]byte(cookie.Value))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0, nil\n\t\t\t}); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif config.Output == nil {\n\t\t\t\t_, err = c.Logger().Output().Write(buf.Bytes())\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = config.Output.Write(buf.Bytes())\n\t\t\treturn\n\t\t}\n\t}\n}",
      "function_comment": "// LoggerWithConfig returns a Logger middleware with custom configuration.\n//\n// This function allows you to customize all aspects of request logging including:\n//   - Log format and fields\n//   - Output destination\n//   - Time formatting\n//   - Custom tags and logic\n//   - Request filtering\n//\n// See LoggerConfig documentation for detailed configuration examples and options.\n//\n// Example:\n//\n//\te.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n//\t\tFormat: \"${time_rfc3339} ${status} ${method} ${uri} ${latency_human}\\n\",\n//\t\tOutput: customLogWriter,\n//\t\tSkipper: func(c echo.Context) bool {\n//\t\t\treturn c.Request().URL.Path == \"/health\"\n//\t\t},\n//\t}))",
      "function_statement": "// LoggerWithConfig returns a Logger middleware with custom configuration.\n//\n// This function allows you to customize all aspects of request logging including:\n//   - Log format and fields\n//   - Output destination\n//   - Time formatting\n//   - Custom tags and logic\n//   - Request filtering\n//\n// See LoggerConfig documentation for detailed configuration examples and options.\n//\n// Example:\n//\n//\te.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n//\t\tFormat: \"${time_rfc3339} ${status} ${method} ${uri} ${latency_human}\\n\",\n//\t\tOutput: customLogWriter,\n//\t\tSkipper: func(c echo.Context) bool {\n//\t\t\treturn c.Request().URL.Path == \"/health\"\n//\t\t},\n//\t}))",
      "start_line": 262,
      "end_line": 411,
      "file_path": "./middleware/logger.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/logger.go",
          "code_snippet": "LoggerConfig struct {\n\t// Skipper defines a function to skip middleware.\n\t// Use this to exclude certain requests from logging (e.g., health checks).\n\t//\n\t// Example:\n\t//\tSkipper: func(c echo.Context) bool {\n\t//\t\treturn c.Request().URL.Path == \"/health\"\n\t//\t},\n\tSkipper Skipper\n\n\t// Format defines the logging format using template tags.\n\t// Tags are enclosed in ${} and replaced with actual values.\n\t// See the detailed tag documentation above for all available options.\n\t//\n\t// Default: JSON format with common fields\n\t// Example: \"${time_rfc3339_nano} ${status} ${method} ${uri} ${latency_human}\\n\"\n\tFormat string `yaml:\"format\"`\n\n\t// CustomTimeFormat specifies the time format used by ${time_custom} tag.\n\t// Uses Go's reference time: Mon Jan 2 15:04:05 MST 2006\n\t//\n\t// Default: \"2006-01-02 15:04:05.00000\"\n\t// Example: \"2006-01-02 15:04:05\" or \"15:04:05.000\"\n\tCustomTimeFormat string `yaml:\"custom_time_format\"`\n\n\t// CustomTagFunc is called when ${custom} tag is encountered.\n\t// Use this to add application-specific information to logs.\n\t// The function should write valid content for your log format.\n\t//\n\t// Example:\n\t//\tCustomTagFunc: func(c echo.Context, buf *bytes.Buffer) (int, error) {\n\t//\t\tuserID := getUserFromContext(c)\n\t//\t\treturn buf.WriteString(`\"user_id\":\"` + userID + `\"`)\n\t//\t},\n\tCustomTagFunc func(c echo.Context, buf *bytes.Buffer) (int, error)\n\n\t// Output specifies where logs are written.\n\t// Can be any io.Writer: files, buffers, network connections, etc.\n\t//\n\t// Default: os.Stdout\n\t// Example: Custom file, syslog, or external logging service\n\tOutput io.Writer\n\n\ttemplate *fasttemplate.Template\n\tcolorer  *color.Color\n\tpool     *sync.Pool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/logger.go",
          "code_snippet": "DefaultLoggerConfig = LoggerConfig{\n\tSkipper: DefaultSkipper,\n\tFormat: `{\"time\":\"${time_rfc3339_nano}\",\"id\":\"${id}\",\"remote_ip\":\"${remote_ip}\",` +\n\t\t`\"host\":\"${host}\",\"method\":\"${method}\",\"uri\":\"${uri}\",\"user_agent\":\"${user_agent}\",` +\n\t\t`\"status\":${status},\"error\":\"${error}\",\"latency\":${latency},\"latency_human\":\"${latency_human}\"` +\n\t\t`,\"bytes_in\":${bytes_in},\"bytes_out\":${bytes_out}}` + \"\\n\",\n\tCustomTimeFormat: \"2006-01-02 15:04:05.00000\",\n\tcolorer:          color.New(),\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXRequestID          = \"X-Request-Id\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentLength       = \"Content-Length\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": "v4"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/valyala/fasttemplate@v1.2.2/template.go",
          "code_snippet": "func New(template, startTag, endTag string) *Template {\n\tt, err := NewTemplate(template, startTag, endTag)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn t\n}",
          "ref_module": "fasttemplate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func New() (c *Color) {\n\tc = new(Color)\n\tc.SetOutput(colorable.NewColorableStdout())\n\treturn\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) SetOutput(w io.Writer) {\n\tc.output = w\n\tif w, ok := w.(*os.File); !ok || !isatty.IsTerminal(w.Fd()) {\n\t\tc.disabled = true\n\t}\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/valyala/fasttemplate@v1.2.2/template.go",
          "code_snippet": "func (t *Template) ExecuteFunc(w io.Writer, f TagFunc) (int64, error) {\n\tvar nn int64\n\n\tn := len(t.texts) - 1\n\tif n == -1 {\n\t\tni, err := w.Write(unsafeString2Bytes(t.template))\n\t\treturn int64(ni), err\n\t}\n\n\tfor i := 0; i \u003c n; i++ {\n\t\tni, err := w.Write(t.texts[i])\n\t\tnn += int64(ni)\n\t\tif err != nil {\n\t\t\treturn nn, err\n\t\t}\n\n\t\tni, err = f(w, t.tags[i])\n\t\tnn += int64(ni)\n\t\tif err != nil {\n\t\t\treturn nn, err\n\t\t}\n\t}\n\tni, err := w.Write(t.texts[n])\n\tnn += int64(ni)\n\treturn nn, err\n}",
          "ref_module": "fasttemplate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Green(msg interface{}, styles ...string) string {\n\treturn green(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Red(msg interface{}, styles ...string) string {\n\treturn red(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Yellow(msg interface{}, styles ...string) string {\n\treturn yellow(msg, styles, c)\n}",
          "ref_module": "color"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/color/color.go",
          "code_snippet": "func (c *Color) Cyan(msg interface{}, styles ...string) string {\n\treturn cyan(msg, styles, c)\n}",
          "ref_module": "color"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func NewBuffer(buf []byte) *Buffer { return \u0026Buffer{buf: buf} }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := now()\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Reset() {\n\tb.buf = b.buf[:0]\n\tb.off = 0\n\tb.lastRead = opInvalid\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteString(s string) (n int, err error) {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(len(s))\n\tif !ok {\n\t\tm = b.grow(len(s))\n\t}\n\treturn copy(b.buf[m:], s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/itoa.go",
          "code_snippet": "func FormatInt(i int64, base int) string {\n\tif fastSmalls \u0026\u0026 0 \u003c= i \u0026\u0026 i \u003c nSmalls \u0026\u0026 base == 10 {\n\t\treturn small(int(i))\n\t}\n\t_, s := formatBits(nil, uint64(i), base, i \u003c 0, false)\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Unix() int64 {\n\treturn t.unixSec()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) UnixNano() int64 {\n\treturn (t.unixSec())*1e9 + int64(t.nsec())\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "func (t Time) Format(layout string) string {\n\tconst bufSize = 64\n\tvar b []byte\n\tmax := len(layout) + 10\n\tif max \u003c bufSize {\n\t\tvar buf [bufSize]byte\n\t\tb = buf[:0]\n\t} else {\n\t\tb = make([]byte, 0, max)\n\t}\n\tb = t.AppendFormat(b, layout)\n\treturn string(b)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "RFC3339     = \"2006-01-02T15:04:05Z07:00\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/format.go",
          "code_snippet": "RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Referer() string {\n\treturn r.Header.Get(\"Referer\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) UserAgent() string {\n\treturn r.Header.Get(\"User-Agent\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/encoding/json/encode.go",
          "code_snippet": "func Marshal(v any) ([]byte, error) {\n\te := newEncodeState()\n\tdefer encodeStatePool.Put(e)\n\n\terr := e.marshal(v, encOpts{escapeHTML: true})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := append([]byte(nil), e.Bytes()...)\n\n\treturn buf, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Write(p []byte) (n int, err error) {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(len(p))\n\tif !ok {\n\t\tm = b.grow(len(p))\n\t}\n\treturn copy(b.buf[m:], p), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Sub(u Time) Duration {\n\tif t.wall\u0026u.wall\u0026hasMonotonic != 0 {\n\t\treturn subMono(t.ext, u.ext)\n\t}\n\td := Duration(t.sec()-u.sec())*Second + Duration(t.nsec()-u.nsec())\n\t// Check for overflow or underflow.\n\tswitch {\n\tcase u.Add(d).Equal(t):\n\t\treturn d // d is correct\n\tcase t.Before(u):\n\t\treturn minDuration // t - u is negative out of range\n\tdefault:\n\t\treturn maxDuration // t - u is positive out of range\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (d Duration) String() string {\n\t// This is inlinable to take advantage of \"function outlining\".\n\t// Thus, the caller can decide whether a string must be heap allocated.\n\tvar arr [32]byte\n\tn := d.format(\u0026arr)\n\treturn string(arr[n:])\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasPrefix(s, prefix string) bool {\n\treturn stringslite.HasPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "Cookie struct {\n\tName   string\n\tValue  string\n\tQuoted bool // indicates whether the Value was originally quoted\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge\u003e0 means Max-Age attribute present and given in seconds\n\tMaxAge      int\n\tSecure      bool\n\tHttpOnly    bool\n\tSameSite    SameSite\n\tPartitioned bool\n\tRaw         string\n\tUnparsed    []string // Raw text of unparsed attribute-value pairs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        262,
        263,
        264,
        265,
        266,
        267,
        270,
        271,
        272,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        283,
        284,
        285,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        306,
        309,
        310,
        311,
        312,
        313,
        314,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        398,
        403,
        404,
        405,
        406,
        407,
        408
      ],
      "cover_details": {
        "line_cover_rate": 0.8133333333333334
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/request_id.go:RequestIDWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID_IDNotAltered"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestIDConfigDifferentHeader"
        }
      ],
      "name": "RequestIDWithConfig",
      "signature": "RequestIDWithConfig (config RequestIDConfig) echo.MiddlewareFunc",
      "ground_truth": "func RequestIDWithConfig(config RequestIDConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRequestIDConfig.Skipper\n\t}\n\tif config.Generator == nil {\n\t\tconfig.Generator = generator\n\t}\n\tif config.TargetHeader == \"\" {\n\t\tconfig.TargetHeader = echo.HeaderXRequestID\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\t\t\trid := req.Header.Get(config.TargetHeader)\n\t\t\tif rid == \"\" {\n\t\t\t\trid = config.Generator()\n\t\t\t}\n\t\t\tres.Header().Set(config.TargetHeader, rid)\n\t\t\tif config.RequestIDHandler != nil {\n\t\t\t\tconfig.RequestIDHandler(c, rid)\n\t\t\t}\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// RequestIDWithConfig returns a X-Request-ID middleware with config.",
      "function_statement": "// RequestIDWithConfig returns a X-Request-ID middleware with config.",
      "start_line": 39,
      "end_line": 71,
      "file_path": "./middleware/request_id.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_id.go",
          "code_snippet": "RequestIDConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Generator defines a function to generate an ID.\n\t// Optional. Defaults to generator for random string of length 32.\n\tGenerator func() string\n\n\t// RequestIDHandler defines a function which is executed for a request id.\n\tRequestIDHandler func(echo.Context, string)\n\n\t// TargetHeader defines what header to look for to populate the id\n\tTargetHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_id.go",
          "code_snippet": "DefaultRequestIDConfig = RequestIDConfig{\n\tSkipper:      DefaultSkipper,\n\tGenerator:    generator,\n\tTargetHeader: echo.HeaderXRequestID,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/request_id.go",
          "code_snippet": "func generator() string {\n\treturn randomString(32)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXRequestID          = \"X-Request-Id\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        68
      ],
      "cover_details": {
        "line_cover_rate": 0.7575757575757576
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uints",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Uints",
      "signature": "(b *ValueBinder) Uints (sourceParam string, dest *[]uint) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uints(sourceParam string, dest *[]uint) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Uints binds parameter to slice of uint",
      "function_statement": "// Uints binds parameter to slice of uint",
      "start_line": 890,
      "end_line": 892,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        890,
        891,
        892
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:Reverse",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        }
      ],
      "name": "Reverse",
      "signature": "(r *Router) Reverse (name string, params ...interface{}) string",
      "ground_truth": "func (r *Router) Reverse(name string, params ...interface{}) string {\n\turi := new(bytes.Buffer)\n\tln := len(params)\n\tn := 0\n\tfor _, route := range r.routes {\n\t\tif route.Name == name {\n\t\t\tfor i, l := 0, len(route.Path); i \u003c l; i++ {\n\t\t\t\thasBackslash := route.Path[i] == '\\\\'\n\t\t\t\tif hasBackslash \u0026\u0026 i+1 \u003c l \u0026\u0026 route.Path[i+1] == ':' {\n\t\t\t\t\ti++ // backslash before colon escapes that colon. in that case skip backslash\n\t\t\t\t}\n\t\t\t\tif n \u003c ln \u0026\u0026 (route.Path[i] == '*' || (!hasBackslash \u0026\u0026 route.Path[i] == ':')) {\n\t\t\t\t\t// in case of `*` wildcard or `:` (unescaped colon) param we replace everything till next slash or end of path\n\t\t\t\t\tfor ; i \u003c l \u0026\u0026 route.Path[i] != '/'; i++ {\n\t\t\t\t\t}\n\t\t\t\t\turi.WriteString(fmt.Sprintf(\"%v\", params[n]))\n\t\t\t\t\tn++\n\t\t\t\t}\n\t\t\t\tif i \u003c l {\n\t\t\t\t\turi.WriteByte(route.Path[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn uri.String()\n}",
      "function_comment": "// Reverse generates a URL from route name and provided parameters.",
      "function_statement": "// Reverse generates a URL from route name and provided parameters.",
      "start_line": 159,
      "end_line": 185,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteString(s string) (n int, err error) {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(len(s))\n\tif !ok {\n\t\tm = b.grow(len(s))\n\t}\n\treturn copy(b.buf[m:], s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteByte(c byte) error {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(1)\n\tif !ok {\n\t\tm = b.grow(1)\n\t}\n\tb.buf[m] = c\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) String() string {\n\tif b == nil {\n\t\t// Special case, useful in debugging.\n\t\treturn \"\u003cnil\u003e\"\n\t}\n\treturn string(b.buf[b.off:])\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        177,
        178,
        179,
        181,
        184
      ],
      "cover_details": {
        "line_cover_rate": 0.8148148148148148
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:TrustIPRange",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        }
      ],
      "name": "TrustIPRange",
      "signature": "TrustIPRange (ipRange *net.IPNet) TrustOption",
      "ground_truth": "func TrustIPRange(ipRange *net.IPNet) TrustOption {\n\treturn func(c *ipChecker) {\n\t\tc.trustExtraRanges = append(c.trustExtraRanges, ipRange)\n\t}\n}",
      "function_comment": "// TrustIPRange add trustable IP ranges using CIDR notation.",
      "function_statement": "// TrustIPRange add trustable IP ranges using CIDR notation.",
      "start_line": 168,
      "end_line": 172,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "ipChecker struct {\n\ttrustExtraRanges []*net.IPNet\n\ttrustLoopback    bool\n\ttrustLinkLocal   bool\n\ttrustPrivateNet  bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "IPNet struct {\n\tIP   IP     // network number\n\tMask IPMask // network mask\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        168,
        169,
        170,
        171
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:extractIP",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPDirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        }
      ],
      "name": "extractIP",
      "signature": "extractIP (req *http.Request) string",
      "ground_truth": "func extractIP(req *http.Request) string {\n\thost, _, err := net.SplitHostPort(req.RemoteAddr)\n\tif err != nil {\n\t\tif net.ParseIP(req.RemoteAddr) != nil {\n\t\t\treturn req.RemoteAddr\n\t\t}\n\t\treturn \"\"\n\t}\n\treturn host\n}",
      "function_comment": "// ExtractIPDirect extracts IP address using actual IP address.",
      "function_statement": "// ExtractIPDirect extracts IP address using actual IP address.",
      "start_line": 221,
      "end_line": 230,
      "file_path": "./ip.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ipsock.go",
          "code_snippet": "func SplitHostPort(hostport string) (host, port string, err error) {\n\tconst (\n\t\tmissingPort   = \"missing port in address\"\n\t\ttooManyColons = \"too many colons in address\"\n\t)\n\taddrErr := func(addr, why string) (host, port string, err error) {\n\t\treturn \"\", \"\", \u0026AddrError{Err: why, Addr: addr}\n\t}\n\tj, k := 0, 0\n\n\t// The port starts after the last colon.\n\ti := bytealg.LastIndexByteString(hostport, ':')\n\tif i \u003c 0 {\n\t\treturn addrErr(hostport, missingPort)\n\t}\n\n\tif hostport[0] == '[' {\n\t\t// Expect the first ']' just before the last ':'.\n\t\tend := bytealg.IndexByteString(hostport, ']')\n\t\tif end \u003c 0 {\n\t\t\treturn addrErr(hostport, \"missing ']' in address\")\n\t\t}\n\t\tswitch end + 1 {\n\t\tcase len(hostport):\n\t\t\t// There can't be a ':' behind the ']' now.\n\t\t\treturn addrErr(hostport, missingPort)\n\t\tcase i:\n\t\t\t// The expected result.\n\t\tdefault:\n\t\t\t// Either ']' isn't followed by a colon, or it is\n\t\t\t// followed by a colon that is not the last one.\n\t\t\tif hostport[end+1] == ':' {\n\t\t\t\treturn addrErr(hostport, tooManyColons)\n\t\t\t}\n\t\t\treturn addrErr(hostport, missingPort)\n\t\t}\n\t\thost = hostport[1:end]\n\t\tj, k = 1, end+1 // there can't be a '[' resp. ']' before these positions\n\t} else {\n\t\thost = hostport[:i]\n\t\tif bytealg.IndexByteString(host, ':') \u003e= 0 {\n\t\t\treturn addrErr(hostport, tooManyColons)\n\t\t}\n\t}\n\tif bytealg.IndexByteString(hostport[j:], '[') \u003e= 0 {\n\t\treturn addrErr(hostport, \"unexpected '[' in address\")\n\t}\n\tif bytealg.IndexByteString(hostport[k:], ']') \u003e= 0 {\n\t\treturn addrErr(hostport, \"unexpected ']' in address\")\n\t}\n\n\tport = hostport[i+1:]\n\treturn host, port, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func ParseIP(s string) IP {\n\tif addr, valid := parseIP(s); valid {\n\t\treturn IP(addr[:])\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        229
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/static.go:listDir",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic"
        }
      ],
      "name": "listDir",
      "signature": "listDir (t *template.Template, name string, dir http.File, res *echo.Response) (err error)",
      "ground_truth": "func listDir(t *template.Template, name string, dir http.File, res *echo.Response) (err error) {\n\tfiles, err := dir.Readdir(-1)\n\tif err != nil {\n\t\treturn\n\t}\n\n\t// Create directory index\n\tres.Header().Set(echo.HeaderContentType, echo.MIMETextHTMLCharsetUTF8)\n\tdata := struct {\n\t\tName  string\n\t\tFiles []interface{}\n\t}{\n\t\tName: name,\n\t}\n\tfor _, f := range files {\n\t\tdata.Files = append(data.Files, struct {\n\t\t\tName string\n\t\t\tDir  bool\n\t\t\tSize string\n\t\t}{f.Name(), f.IsDir(), bytes.Format(f.Size())})\n\t}\n\treturn t.Execute(res, data)\n}",
      "function_comment": "// StaticWithConfig returns a Static middleware with config.",
      "function_statement": "// StaticWithConfig returns a Static middleware with config.",
      "start_line": 248,
      "end_line": 270,
      "file_path": "./middleware/static.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentType         = \"Content-Type\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MIMETextHTMLCharsetUTF8              = MIMETextHTML + \"; \" + charsetUTF8",
          "ref_module": "v4"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/labstack/gommon@v0.4.2/bytes/bytes.go",
          "code_snippet": "func Format(value int64) string {\n\treturn global.Format(value)\n}",
          "ref_module": "bytes"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/html/template/template.go",
          "code_snippet": "Template struct {\n\t// Sticky error if escaping fails, or escapeOK if succeeded.\n\tescapeErr error\n\t// We could embed the text/template field, but it's safer not to because\n\t// we need to keep our version of the name space and the underlying\n\t// template's in sync.\n\ttext *template.Template\n\t// The underlying template's parse tree, updated to be HTML-safe.\n\tTree       *parse.Tree\n\t*nameSpace // common to all associated templates\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/fs.go",
          "code_snippet": "File interface {\n\tio.Closer\n\tio.Reader\n\tio.Seeker\n\tReaddir(count int) ([]fs.FileInfo, error)\n\tStat() (fs.FileInfo, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FileInfo interface {\n\tName() string       // base name of the file\n\tSize() int64        // length in bytes for regular files; system-dependent for others\n\tMode() FileMode     // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool        // abbreviation for Mode().IsDir()\n\tSys() any           // underlying data source (can return nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/html/template/template.go",
          "code_snippet": "func (t *Template) Execute(wr io.Writer, data any) error {\n\tif err := t.escape(); err != nil {\n\t\treturn err\n\t}\n\treturn t.text.Execute(wr, data)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        248,
        249,
        250,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269
      ],
      "cover_details": {
        "line_cover_rate": 0.782608695652174
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:FormFieldBinder",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        }
      ],
      "name": "FormFieldBinder",
      "signature": "FormFieldBinder (c Context) *ValueBinder",
      "ground_truth": "func FormFieldBinder(c Context) *ValueBinder {\n\tvb := \u0026ValueBinder{\n\t\tfailFast: true,\n\t\tValueFunc: func(sourceParam string) string {\n\t\t\treturn c.Request().FormValue(sourceParam)\n\t\t},\n\t\tErrorFunc: NewBindingError,\n\t}\n\tvb.ValuesFunc = func(sourceParam string) []string {\n\t\tif c.Request().Form == nil {\n\t\t\t// this is same as `Request().FormValue()` does internally\n\t\t\t_ = c.Request().ParseMultipartForm(32 \u003c\u003c 20)\n\t\t}\n\t\tvalues, ok := c.Request().Form[sourceParam]\n\t\tif !ok {\n\t\t\treturn nil\n\t\t}\n\t\treturn values\n\t}\n\n\treturn vb\n}",
      "function_comment": "// FormFieldBinder creates form field value binder\n// For all requests, FormFieldBinder parses the raw query from the URL and uses query params as form fields\n//\n// For POST, PUT, and PATCH requests, it also reads the request body, parses it\n// as a form and uses query params as form fields. Request body parameters take precedence over URL query\n// string values in r.Form.\n//\n// NB: when binding forms take note that this implementation uses standard library form parsing\n// which parses form data from BOTH URL and BODY if content type is not MIMEMultipartForm\n// See https://golang.org/pkg/net/http/#Request.ParseForm",
      "function_statement": "// FormFieldBinder creates form field value binder\n// For all requests, FormFieldBinder parses the raw query from the URL and uses query params as form fields\n//\n// For POST, PUT, and PATCH requests, it also reads the request body, parses it\n// as a form and uses query params as form fields. Request body parameters take precedence over URL query\n// string values in r.Form.\n//\n// NB: when binding forms take note that this implementation uses standard library form parsing\n// which parses form data from BOTH URL and BODY if content type is not MIMEMultipartForm\n// See https://golang.org/pkg/net/http/#Request.ParseForm",
      "start_line": 151,
      "end_line": 172,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func NewBindingError(sourceParam string, values []string, message interface{}, internalError error) error {\n\treturn \u0026BindingError{\n\t\tField:  sourceParam,\n\t\tValues: values,\n\t\tHTTPError: \u0026HTTPError{\n\t\t\tCode:     http.StatusBadRequest,\n\t\t\tMessage:  message,\n\t\t\tInternal: internalError,\n\t\t},\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) FormValue(key string) string {\n\tif r.Form == nil {\n\t\tr.ParseMultipartForm(defaultMaxMemory)\n\t}\n\tif vs := r.Form[key]; len(vs) \u003e 0 {\n\t\treturn vs[0]\n\t}\n\treturn \"\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) ParseMultipartForm(maxMemory int64) error {\n\tif r.MultipartForm == multipartByReader {\n\t\treturn errors.New(\"http: multipart handled by MultipartReader\")\n\t}\n\tvar parseFormErr error\n\tif r.Form == nil {\n\t\t// Let errors in ParseForm fall through, and just\n\t\t// return it at the end.\n\t\tparseFormErr = r.ParseForm()\n\t}\n\tif r.MultipartForm != nil {\n\t\treturn nil\n\t}\n\n\tmr, err := r.multipartReader(false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tf, err := mr.ReadForm(maxMemory)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif r.PostForm == nil {\n\t\tr.PostForm = make(url.Values)\n\t}\n\tfor k, v := range f.Value {\n\t\tr.Form[k] = append(r.Form[k], v...)\n\t\t// r.PostForm should also be populated. See Issue 9305.\n\t\tr.PostForm[k] = append(r.PostForm[k], v...)\n\t}\n\n\tr.MultipartForm = f\n\n\treturn parseFormErr\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        151,
        152,
        153,
        154,
        155,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        171
      ],
      "cover_details": {
        "line_cover_rate": 0.7727272727272727
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:POST",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        }
      ],
      "name": "POST",
      "signature": "(e *Echo) POST (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) POST(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodPost, path, h, m...)\n}",
      "function_comment": "// POST registers a new POST route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// POST registers a new POST route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 514,
      "end_line": 516,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        514,
        515,
        516
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_limit.go:BodyLimit",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit_panicOnInvalidLimit"
        }
      ],
      "name": "BodyLimit",
      "signature": "BodyLimit (limit string) echo.MiddlewareFunc",
      "ground_truth": "func BodyLimit(limit string) echo.MiddlewareFunc {\n\tc := DefaultBodyLimitConfig\n\tc.Limit = limit\n\treturn BodyLimitWithConfig(c)\n}",
      "function_comment": "// BodyLimit returns a BodyLimit middleware.\n//\n// BodyLimit middleware sets the maximum allowed size for a request body, if the\n// size exceeds the configured limit, it sends \"413 - Request Entity Too Large\"\n// response. The BodyLimit is determined based on both `Content-Length` request\n// header and actual content read, which makes it super secure.\n// Limit can be specified as `4x` or `4xB`, where x is one of the multiple from K, M,\n// G, T or P.",
      "function_statement": "// BodyLimit returns a BodyLimit middleware.\n//\n// BodyLimit middleware sets the maximum allowed size for a request body, if the\n// size exceeds the configured limit, it sends \"413 - Request Entity Too Large\"\n// response. The BodyLimit is determined based on both `Content-Length` request\n// header and actual content read, which makes it super secure.\n// Limit can be specified as `4x` or `4xB`, where x is one of the multiple from K, M,\n// G, T or P.",
      "start_line": 45,
      "end_line": 49,
      "file_path": "./middleware/body_limit.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "DefaultBodyLimitConfig = BodyLimitConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "BodyLimitConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Maximum allowed size for a request body, it can be specified\n\t// as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n\tLimit string `yaml:\"limit\"`\n\tlimit int64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "func BodyLimitWithConfig(config BodyLimitConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultBodyLimitConfig.Skipper\n\t}\n\n\tlimit, err := bytes.Parse(config.Limit)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"echo: invalid body-limit=%s\", config.Limit))\n\t}\n\tconfig.limit = limit\n\tpool := limitedReaderPool(config)\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\n\t\t\t// Based on content length\n\t\t\tif req.ContentLength \u003e config.limit {\n\t\t\t\treturn echo.ErrStatusRequestEntityTooLarge\n\t\t\t}\n\n\t\t\t// Based on content read\n\t\t\tr := pool.Get().(*limitedReader)\n\t\t\tr.Reset(req.Body)\n\t\t\tdefer pool.Put(r)\n\t\t\treq.Body = r\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        45,
        46,
        47,
        48,
        49
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:ServeHTTP",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "ServeHTTP",
      "signature": "(t echoHandlerFuncWrapper) ServeHTTP (rw http.ResponseWriter, r *http.Request)",
      "ground_truth": "func (t echoHandlerFuncWrapper) ServeHTTP(rw http.ResponseWriter, r *http.Request) {\n\t// replace echo.Context Request with the one provided by TimeoutHandler to let later middlewares/handler on the chain\n\t// handle properly it's cancellation\n\tt.ctx.SetRequest(r)\n\n\t// replace writer with TimeoutHandler custom one. This will guarantee that\n\t// `writes by h to its ResponseWriter will return ErrHandlerTimeout.`\n\toriginalWriter := t.ctx.Response().Writer\n\tt.ctx.Response().Writer = rw\n\n\t// in case of panic we restore original writer and call panic again\n\t// so it could be handled with global middleware Recover()\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\tt.ctx.Response().Writer = originalWriter\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\terr := t.handler(t.ctx)\n\tif ctxErr := r.Context().Err(); ctxErr == context.DeadlineExceeded {\n\t\tif err != nil \u0026\u0026 t.errHandler != nil {\n\t\t\tt.errHandler(err, t.ctx)\n\t\t}\n\t\treturn // on timeout we can not send handler error to client because `http.TimeoutHandler` has already sent headers\n\t}\n\tif err != nil {\n\t\t// This is needed as `http.TimeoutHandler` will write status code by itself on error and after that our tries to write\n\t\t// status code will not work anymore as Echo.Response thinks it has been already \"committed\" and further writes\n\t\t// create errors in log about `superfluous response.WriteHeader call from`\n\t\tt.writer.Ignore(true)\n\t\tt.ctx.Response().Writer = originalWriter // make sure we restore writer before we signal original coroutine about the error\n\t\t// we pass error from handler to middlewares up in handler chain to act on it if needed.\n\t\tt.errChan \u003c- err\n\t\treturn\n\t}\n\t// we restore original writer only for cases we did not timeout. On timeout we have already sent response to client\n\t// and should not anymore send additional headers/data\n\t// so on timeout writer stays what http.TimeoutHandler uses and prevents writing headers/body\n\tt.ctx.Response().Writer = originalWriter\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 146,
      "end_line": 186,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "echoHandlerFuncWrapper struct {\n\twriter     *ignorableWriter\n\tctx        echo.Context\n\thandler    echo.HandlerFunc\n\terrHandler func(err error, c echo.Context)\n\terrChan    chan error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "func (w *ignorableWriter) Ignore(ignore bool) {\n\tw.lock.Lock()\n\tw.ignoreWrites = ignore\n\tw.lock.Unlock()\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func recover() any",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// Canceled if the context was canceled\n\t// or DeadlineExceeded if the context's deadline passed.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Context() context.Context {\n\tif r.ctx != nil {\n\t\treturn r.ctx\n\t}\n\treturn context.Background()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "DeadlineExceeded error = deadlineExceededError{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        165,
        166,
        167,
        168,
        169,
        170,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        185
      ],
      "cover_details": {
        "line_cover_rate": 0.8048780487804879
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt16s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "MustInt16s",
      "signature": "(b *ValueBinder) MustInt16s (sourceParam string, dest *[]int16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt16s(sourceParam string, dest *[]int16) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, true)\n}",
      "function_comment": "// MustInt16s requires parameter value to exist to bind to int16 slice variable. Returns error when value does not exist",
      "function_statement": "// MustInt16s requires parameter value to exist to bind to int16 slice variable. Returns error when value does not exist",
      "start_line": 647,
      "end_line": 649,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        647,
        648,
        649
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Stream",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        }
      ],
      "name": "Stream",
      "signature": "(c *context) Stream (code int, contentType string, r io.Reader) (err error)",
      "ground_truth": "func (c *context) Stream(code int, contentType string, r io.Reader) (err error) {\n\tc.writeContentType(contentType)\n\tc.response.WriteHeader(code)\n\t_, err = io.Copy(c.response, r)\n\treturn\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 583,
      "end_line": 588,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) writeContentType(value string) {\n\theader := c.Response().Header()\n\tif header.Get(HeaderContentType) == \"\" {\n\t\theader.Set(HeaderContentType, value)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func Copy(dst Writer, src Reader) (written int64, err error) {\n\treturn copyBuffer(dst, src, nil)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        583,
        584,
        585,
        586,
        587,
        588
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Host",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        }
      ],
      "name": "Host",
      "signature": "(e *Echo) Host (name string, m ...MiddlewareFunc) (g *Group)",
      "ground_truth": "func (e *Echo) Host(name string, m ...MiddlewareFunc) (g *Group) {\n\te.routers[name] = NewRouter(e)\n\tg = \u0026Group{host: name, echo: e}\n\tg.Use(m...)\n\treturn\n}",
      "function_comment": "// Host creates a new router group for the provided host and optional host-level middleware.",
      "function_statement": "// Host creates a new router group for the provided host and optional host-level middleware.",
      "start_line": 598,
      "end_line": 603,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func NewRouter(e *Echo) *Router {\n\treturn \u0026Router{\n\t\ttree: \u0026node{\n\t\t\tmethods: new(routeMethods),\n\t\t},\n\t\troutes: map[string]*Route{},\n\t\techo:   e,\n\t}\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) Use(middleware ...MiddlewareFunc) {\n\tg.middleware = append(g.middleware, middleware...)\n\tif len(g.middleware) == 0 {\n\t\treturn\n\t}\n\t// group level middlewares are different from Echo `Pre` and `Use` middlewares (those are global). Group level middlewares\n\t// are only executed if they are added to the Router with route.\n\t// So we register catch all route (404 is a safe way to emulate route match) for this group and now during routing the\n\t// Router would find route to match our request path and therefore guarantee the middleware(s) will get executed.\n\tg.RouteNotFound(\"\", NotFoundHandler)\n\tg.RouteNotFound(\"/*\", NotFoundHandler)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        598,
        599,
        600,
        601,
        602,
        603
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:TrustLoopback",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestIPChecker_TrustOption"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustIPRange"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLinkLocal"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustPrivateNet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestTrustLoopback"
        }
      ],
      "name": "TrustLoopback",
      "signature": "TrustLoopback (v bool) TrustOption",
      "ground_truth": "func TrustLoopback(v bool) TrustOption {\n\treturn func(c *ipChecker) {\n\t\tc.trustLoopback = v\n\t}\n}",
      "function_comment": "// TrustLoopback configures if you trust loopback address (default: true).",
      "function_statement": "// TrustLoopback configures if you trust loopback address (default: true).",
      "start_line": 147,
      "end_line": 151,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "ipChecker struct {\n\ttrustExtraRanges []*net.IPNet\n\ttrustLoopback    bool\n\ttrustLinkLocal   bool\n\ttrustPrivateNet  bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        147,
        148,
        149,
        150
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:SetPath",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Path"
        }
      ],
      "name": "SetPath",
      "signature": "(c *context) SetPath (p string)",
      "ground_truth": "func (c *context) SetPath(p string) {\n\tc.path = p\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 324,
      "end_line": 326,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        324,
        325,
        326
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:PUT",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        }
      ],
      "name": "PUT",
      "signature": "(e *Echo) PUT (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) PUT(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodPut, path, h, m...)\n}",
      "function_comment": "// PUT registers a new PUT route for a path with matching handler in the\n// router with optional route-level middleware.",
      "function_statement": "// PUT registers a new PUT route for a path with matching handler in the\n// router with optional route-level middleware.",
      "start_line": 520,
      "end_line": 522,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPut     = \"PUT\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        520,
        521,
        522
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/proxy.go:RemoveTarget",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        }
      ],
      "name": "RemoveTarget",
      "signature": "(b *commonBalancer) RemoveTarget (name string) bool",
      "ground_truth": "func (b *commonBalancer) RemoveTarget(name string) bool {\n\tb.mutex.Lock()\n\tdefer b.mutex.Unlock()\n\tfor i, t := range b.targets {\n\t\tif t.Name == name {\n\t\t\tb.targets = append(b.targets[:i], b.targets[i+1:]...)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
      "function_comment": "// RemoveTarget removes an upstream target from the list by name.\n//\n// Returns `true` on success, `false` if no target with the name is found.",
      "function_statement": "// RemoveTarget removes an upstream target from the list by name.\n//\n// Returns `true` on success, `false` if no target with the name is found.",
      "start_line": 217,
      "end_line": 227,
      "file_path": "./middleware/proxy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "commonBalancer struct {\n\ttargets []*ProxyTarget\n\tmutex   sync.Mutex\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/proxy.go",
          "code_snippet": "ProxyTarget struct {\n\tName string\n\tURL  *url.URL\n\tMeta echo.Map\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        226
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/slash.go:RemoveTrailingSlashWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlash"
        }
      ],
      "name": "RemoveTrailingSlashWithConfig",
      "signature": "RemoveTrailingSlashWithConfig (config TrailingSlashConfig) echo.MiddlewareFunc",
      "ground_truth": "func RemoveTrailingSlashWithConfig(config TrailingSlashConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultTrailingSlashConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\turl := req.URL\n\t\t\tpath := url.Path\n\t\t\tqs := c.QueryString()\n\t\t\tl := len(path) - 1\n\t\t\tif l \u003e 0 \u0026\u0026 strings.HasSuffix(path, \"/\") {\n\t\t\t\tpath = path[:l]\n\t\t\t\turi := path\n\t\t\t\tif qs != \"\" {\n\t\t\t\t\turi += \"?\" + qs\n\t\t\t\t}\n\n\t\t\t\t// Redirect\n\t\t\t\tif config.RedirectCode != 0 {\n\t\t\t\t\treturn c.Redirect(config.RedirectCode, sanitizeURI(uri))\n\t\t\t\t}\n\n\t\t\t\t// Forward\n\t\t\t\treq.RequestURI = uri\n\t\t\t\turl.Path = path\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// RemoveTrailingSlashWithConfig returns a RemoveTrailingSlash middleware with config.\n// See `RemoveTrailingSlash()`.",
      "function_statement": "// RemoveTrailingSlashWithConfig returns a RemoveTrailingSlash middleware with config.\n// See `RemoveTrailingSlash()`.",
      "start_line": 84,
      "end_line": 120,
      "file_path": "./middleware/slash.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "TrailingSlashConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional, but when provided the request is redirected using this code.\n\tRedirectCode int `yaml:\"redirect_code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "DefaultTrailingSlashConfig = TrailingSlashConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "func sanitizeURI(uri string) string {\n\t// double slash `\\\\`, `//` or even `\\/` is absolute uri for browsers and by redirecting request to that uri\n\t// we are vulnerable to open redirect attack. so replace all slashes from the beginning with single slash\n\tif len(uri) \u003e 1 \u0026\u0026 (uri[0] == '\\\\' || uri[0] == '/') \u0026\u0026 (uri[1] == '\\\\' || uri[1] == '/') {\n\t\turi = \"/\" + strings.TrimLeft(uri, `/\\`)\n\t}\n\treturn uri\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasSuffix(s, suffix string) bool {\n\treturn stringslite.HasSuffix(s, suffix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        84,
        85,
        86,
        87,
        88,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        109,
        110,
        111,
        114,
        115,
        117
      ],
      "cover_details": {
        "line_cover_rate": 0.6756756756756757
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustUint32",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustUint32",
      "signature": "(b *ValueBinder) MustUint32 (sourceParam string, dest *uint32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustUint32(sourceParam string, dest *uint32) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 32, true)\n}",
      "function_comment": "// MustUint32 requires parameter value to exist to bind to uint32 variable. Returns error when value does not exist",
      "function_statement": "// MustUint32 requires parameter value to exist to bind to uint32 variable. Returns error when value does not exist",
      "start_line": 687,
      "end_line": 689,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        687,
        688,
        689
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint8",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "Uint8",
      "signature": "(b *ValueBinder) Uint8 (sourceParam string, dest *uint8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint8(sourceParam string, dest *uint8) *ValueBinder {\n\treturn b.uintValue(sourceParam, dest, 8, false)\n}",
      "function_comment": "// Uint8 binds parameter to uint8 variable",
      "function_statement": "// Uint8 binds parameter to uint8 variable",
      "start_line": 702,
      "end_line": 704,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        702,
        703,
        704
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context_fs.go:FileFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        }
      ],
      "name": "FileFS",
      "signature": "(c *context) FileFS (file string, filesystem fs.FS) error",
      "ground_truth": "func (c *context) FileFS(file string, filesystem fs.FS) error {\n\treturn fsFile(c, file, filesystem)\n}",
      "function_comment": "// FileFS serves file from given file system.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n// including `assets/images` as their prefix.",
      "function_statement": "// FileFS serves file from given file system.\n//\n// When dealing with `embed.FS` use `fs := echo.MustSubFS(fs, \"rootDirectory\") to create sub fs which uses necessary\n// prefix for directory path. This is necessary as `//go:embed assets/images` embeds files with paths\n// including `assets/images` as their prefix.",
      "start_line": 23,
      "end_line": 25,
      "file_path": "./context_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context_fs.go",
          "code_snippet": "func fsFile(c Context, file string, filesystem fs.FS) error {\n\tf, err := filesystem.Open(file)\n\tif err != nil {\n\t\treturn ErrNotFound\n\t}\n\tdefer f.Close()\n\n\tfi, _ := f.Stat()\n\tif fi.IsDir() {\n\t\tfile = filepath.ToSlash(filepath.Join(file, indexPage)) // ToSlash is necessary for Windows. fs.Open and os.Open are different in that aspect.\n\t\tf, err = filesystem.Open(file)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\t\tdefer f.Close()\n\t\tif fi, err = f.Stat(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tff, ok := f.(io.ReadSeeker)\n\tif !ok {\n\t\treturn errors.New(\"file does not implement io.ReadSeeker\")\n\t}\n\thttp.ServeContent(c.Response(), c.Request(), fi.Name(), fi.ModTime(), ff)\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        23,
        24,
        25
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:HTTPSWWWRedirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSWWWRedirect"
        }
      ],
      "name": "HTTPSWWWRedirect",
      "signature": "HTTPSWWWRedirect () echo.MiddlewareFunc",
      "ground_truth": "func HTTPSWWWRedirect() echo.MiddlewareFunc {\n\treturn HTTPSWWWRedirectWithConfig(DefaultRedirectConfig)\n}",
      "function_comment": "// HTTPSWWWRedirect redirects http requests to https www.\n// For example, http://labstack.com will be redirect to https://www.labstack.com.\n//\n// Usage `Echo#Pre(HTTPSWWWRedirect())`",
      "function_statement": "// HTTPSWWWRedirect redirects http requests to https www.\n// For example, http://labstack.com will be redirect to https://www.labstack.com.\n//\n// Usage `Echo#Pre(HTTPSWWWRedirect())`",
      "start_line": 59,
      "end_line": 61,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func HTTPSWWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (bool, string) {\n\t\tif scheme != \"https\" \u0026\u0026 !strings.HasPrefix(host, www) {\n\t\t\treturn true, \"https://www.\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "DefaultRedirectConfig = RedirectConfig{\n\tSkipper: DefaultSkipper,\n\tCode:    http.StatusMovedPermanently,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        59,
        60,
        61
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:isFieldMultipartFile",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        }
      ],
      "name": "isFieldMultipartFile",
      "signature": "isFieldMultipartFile (field reflect.Type) (bool, error)",
      "ground_truth": "func isFieldMultipartFile(field reflect.Type) (bool, error) {\n\tswitch field {\n\tcase multipartFileHeaderPointerType,\n\t\tmultipartFileHeaderSliceType,\n\t\tmultipartFileHeaderPointerSliceType:\n\t\treturn true, nil\n\tcase multipartFileHeaderType:\n\t\treturn true, errors.New(\"binding to multipart.FileHeader struct is not supported, use pointer to struct\")\n\tdefault:\n\t\treturn false, nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 453,
      "end_line": 464,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderPointerSliceType = reflect.TypeFor[[]*multipart.FileHeader]()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderPointerType      = reflect.TypeFor[*multipart.FileHeader]()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderSliceType        = reflect.TypeFor[[]multipart.FileHeader]()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "multipartFileHeaderType = reflect.TypeFor[multipart.FileHeader]()",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        453,
        454,
        457,
        458,
        459,
        460
      ],
      "cover_details": {
        "line_cover_rate": 0.5
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:uint",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        }
      ],
      "name": "uint",
      "signature": "(b *ValueBinder) uint (sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) uint(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseUint(value, 10, bitSize)\n\tif err != nil {\n\t\tif bitSize == 0 {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to uint\", err))\n\t\t} else {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to uint%v\", bitSize), err))\n\t\t}\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *uint64:\n\t\t*d = n\n\tcase *uint32:\n\t\t*d = uint32(n)\n\tcase *uint16:\n\t\t*d = uint16(n)\n\tcase *uint8: // byte is alias to uint8\n\t\t*d = uint8(n)\n\tcase *uint:\n\t\t*d = uint(n)\n\t}\n\treturn b\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 747,
      "end_line": 771,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func ParseUint(s string, base int, bitSize int) (uint64, error) {\n\tconst fnParseUint = \"ParseUint\"\n\n\tif s == \"\" {\n\t\treturn 0, syntaxError(fnParseUint, s)\n\t}\n\n\tbase0 := base == 0\n\n\ts0 := s\n\tswitch {\n\tcase 2 \u003c= base \u0026\u0026 base \u003c= 36:\n\t\t// valid base; nothing to do\n\n\tcase base == 0:\n\t\t// Look for octal, hex prefix.\n\t\tbase = 10\n\t\tif s[0] == '0' {\n\t\t\tswitch {\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'b':\n\t\t\t\tbase = 2\n\t\t\t\ts = s[2:]\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'o':\n\t\t\t\tbase = 8\n\t\t\t\ts = s[2:]\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'x':\n\t\t\t\tbase = 16\n\t\t\t\ts = s[2:]\n\t\t\tdefault:\n\t\t\t\tbase = 8\n\t\t\t\ts = s[1:]\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\treturn 0, baseError(fnParseUint, s0, base)\n\t}\n\n\tif bitSize == 0 {\n\t\tbitSize = IntSize\n\t} else if bitSize \u003c 0 || bitSize \u003e 64 {\n\t\treturn 0, bitSizeError(fnParseUint, s0, bitSize)\n\t}\n\n\t// Cutoff is the smallest number such that cutoff*base \u003e maxUint64.\n\t// Use compile-time constants for common cases.\n\tvar cutoff uint64\n\tswitch base {\n\tcase 10:\n\t\tcutoff = maxUint64/10 + 1\n\tcase 16:\n\t\tcutoff = maxUint64/16 + 1\n\tdefault:\n\t\tcutoff = maxUint64/uint64(base) + 1\n\t}\n\n\tmaxVal := uint64(1)\u003c\u003cuint(bitSize) - 1\n\n\tunderscores := false\n\tvar n uint64\n\tfor _, c := range []byte(s) {\n\t\tvar d byte\n\t\tswitch {\n\t\tcase c == '_' \u0026\u0026 base0:\n\t\t\tunderscores = true\n\t\t\tcontinue\n\t\tcase '0' \u003c= c \u0026\u0026 c \u003c= '9':\n\t\t\td = c - '0'\n\t\tcase 'a' \u003c= lower(c) \u0026\u0026 lower(c) \u003c= 'z':\n\t\t\td = lower(c) - 'a' + 10\n\t\tdefault:\n\t\t\treturn 0, syntaxError(fnParseUint, s0)\n\t\t}\n\n\t\tif d \u003e= byte(base) {\n\t\t\treturn 0, syntaxError(fnParseUint, s0)\n\t\t}\n\n\t\tif n \u003e= cutoff {\n\t\t\t// n*base overflows\n\t\t\treturn maxVal, rangeError(fnParseUint, s0)\n\t\t}\n\t\tn *= uint64(base)\n\n\t\tn1 := n + uint64(d)\n\t\tif n1 \u003c n || n1 \u003e maxVal {\n\t\t\t// n+d overflows\n\t\t\treturn maxVal, rangeError(fnParseUint, s0)\n\t\t}\n\t\tn = n1\n\t}\n\n\tif underscores \u0026\u0026 !underscoreOK(s0) {\n\t\treturn 0, syntaxError(fnParseUint, s0)\n\t}\n\n\treturn n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint64 uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint16 uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint uint",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        747,
        748,
        749,
        750,
        751,
        752,
        753,
        754,
        755,
        758,
        759,
        760,
        761,
        762,
        763,
        764,
        765,
        766,
        767,
        768,
        770
      ],
      "cover_details": {
        "line_cover_rate": 0.84
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:JSONPretty",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        }
      ],
      "name": "JSONPretty",
      "signature": "(c *context) JSONPretty (code int, i any, indent string) (err error)",
      "ground_truth": "func (c *context) JSONPretty(code int, i any, indent string) (err error) {\n\treturn c.json(code, i, indent)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 516,
      "end_line": 518,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) json(code int, i any, indent string) error {\n\tc.writeContentType(MIMEApplicationJSON)\n\tc.response.Status = code\n\treturn c.echo.JSONSerializer.Serialize(c, i, indent)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        516,
        517,
        518
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:HTML",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        }
      ],
      "name": "HTML",
      "signature": "(c *context) HTML (code int, html string) (err error)",
      "ground_truth": "func (c *context) HTML(code int, html string) (err error) {\n\treturn c.HTMLBlob(code, []byte(html))\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 471,
      "end_line": 473,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) HTMLBlob(code int, b []byte) (err error) {\n\treturn c.Blob(code, MIMETextHTMLCharsetUTF8, b)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        471,
        472,
        473
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:RouteNotFound",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "RouteNotFound",
      "signature": "(e *Echo) RouteNotFound (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) RouteNotFound(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(RouteNotFound, path, h, m...)\n}",
      "function_comment": "// RouteNotFound registers a special-case route which is executed when no other route is found (i.e. HTTP 404 cases)\n// for current request URL.\n// Path supports static and named/any parameters just like other http method is defined. Generally path is ended with\n// wildcard/match-any character (`/*`, `/download/*` etc).\n//\n// Example: `e.RouteNotFound(\"/*\", func(c echo.Context) error { return c.NoContent(http.StatusNotFound) })`",
      "function_statement": "// RouteNotFound registers a special-case route which is executed when no other route is found (i.e. HTTP 404 cases)\n// for current request URL.\n// Path supports static and named/any parameters just like other http method is defined. Generally path is ended with\n// wildcard/match-any character (`/*`, `/download/*` etc).\n//\n// Example: `e.RouteNotFound(\"/*\", func(c echo.Context) error { return c.NoContent(http.StatusNotFound) })`",
      "start_line": 536,
      "end_line": 538,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "RouteNotFound = \"echo_route_not_found\"",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        536,
        537,
        538
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Cookies",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        }
      ],
      "name": "Cookies",
      "signature": "(c *context) Cookies () []*http.Cookie",
      "ground_truth": "func (c *context) Cookies() []*http.Cookie {\n\treturn c.request.Cookies()\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 429,
      "end_line": 431,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/cookie.go",
          "code_snippet": "Cookie struct {\n\tName   string\n\tValue  string\n\tQuoted bool // indicates whether the Value was originally quoted\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge\u003e0 means Max-Age attribute present and given in seconds\n\tMaxAge      int\n\tSecure      bool\n\tHttpOnly    bool\n\tSameSite    SameSite\n\tPartitioned bool\n\tRaw         string\n\tUnparsed    []string // Raw text of unparsed attribute-value pairs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) Cookies() []*Cookie {\n\treturn readCookies(r.Header, \"\")\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        429,
        430,
        431
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rate_limiter.go:RateLimiter",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter_panicBehaviour"
        }
      ],
      "name": "RateLimiter",
      "signature": "RateLimiter (store RateLimiterStore) echo.MiddlewareFunc",
      "ground_truth": "func RateLimiter(store RateLimiterStore) echo.MiddlewareFunc {\n\tconfig := DefaultRateLimiterConfig\n\tconfig.Store = store\n\n\treturn RateLimiterWithConfig(config)\n}",
      "function_comment": "/*\nRateLimiter returns a rate limiting middleware\n\n\te := echo.New()\n\n\tlimiterStore := middleware.NewRateLimiterMemoryStore(20)\n\n\te.GET(\"/rate-limited\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"test\")\n\t}, RateLimiter(limiterStore))\n*/",
      "function_statement": "/*\nRateLimiter returns a rate limiting middleware\n\n\te := echo.New()\n\n\tlimiterStore := middleware.NewRateLimiterMemoryStore(20)\n\n\te.GET(\"/rate-limited\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"test\")\n\t}, RateLimiter(limiterStore))\n*/",
      "start_line": 78,
      "end_line": 83,
      "file_path": "./middleware/rate_limiter.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterStore interface {\n\t// Stores for the rate limiter have to implement the Allow method\n\tAllow(identifier string) (bool, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "DefaultRateLimiterConfig = RateLimiterConfig{\n\tSkipper: DefaultSkipper,\n\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\tid := ctx.RealIP()\n\t\treturn id, nil\n\t},\n\tErrorHandler: func(context echo.Context, err error) error {\n\t\treturn \u0026echo.HTTPError{\n\t\t\tCode:     ErrExtractorError.Code,\n\t\t\tMessage:  ErrExtractorError.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n\tDenyHandler: func(context echo.Context, identifier string, err error) error {\n\t\treturn \u0026echo.HTTPError{\n\t\t\tCode:     ErrRateLimitExceeded.Code,\n\t\t\tMessage:  ErrRateLimitExceeded.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterConfig struct {\n\tSkipper    Skipper\n\tBeforeFunc BeforeFunc\n\t// IdentifierExtractor uses echo.Context to extract the identifier for a visitor\n\tIdentifierExtractor Extractor\n\t// Store defines a store for the rate limiter\n\tStore RateLimiterStore\n\t// ErrorHandler provides a handler to be called when IdentifierExtractor returns an error\n\tErrorHandler func(context echo.Context, err error) error\n\t// DenyHandler provides a handler to be called when RateLimiter denies access\n\tDenyHandler func(context echo.Context, identifier string, err error) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "func RateLimiterWithConfig(config RateLimiterConfig) echo.MiddlewareFunc {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRateLimiterConfig.Skipper\n\t}\n\tif config.IdentifierExtractor == nil {\n\t\tconfig.IdentifierExtractor = DefaultRateLimiterConfig.IdentifierExtractor\n\t}\n\tif config.ErrorHandler == nil {\n\t\tconfig.ErrorHandler = DefaultRateLimiterConfig.ErrorHandler\n\t}\n\tif config.DenyHandler == nil {\n\t\tconfig.DenyHandler = DefaultRateLimiterConfig.DenyHandler\n\t}\n\tif config.Store == nil {\n\t\tpanic(\"Store configuration must be provided\")\n\t}\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t\tif config.BeforeFunc != nil {\n\t\t\t\tconfig.BeforeFunc(c)\n\t\t\t}\n\n\t\t\tidentifier, err := config.IdentifierExtractor(c)\n\t\t\tif err != nil {\n\t\t\t\tc.Error(config.ErrorHandler(c, err))\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tif allow, err := config.Store.Allow(identifier); !allow {\n\t\t\t\tc.Error(config.DenyHandler(c, identifier, err))\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        78,
        79,
        80,
        81,
        82,
        83
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/redirect.go:HTTPSNonWWWRedirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSNonWWWRedirect"
        }
      ],
      "name": "HTTPSNonWWWRedirect",
      "signature": "HTTPSNonWWWRedirect () echo.MiddlewareFunc",
      "ground_truth": "func HTTPSNonWWWRedirect() echo.MiddlewareFunc {\n\treturn HTTPSNonWWWRedirectWithConfig(DefaultRedirectConfig)\n}",
      "function_comment": "// HTTPSNonWWWRedirect redirects http requests to https non www.\n// For example, http://www.labstack.com will be redirect to https://labstack.com.\n//\n// Usage `Echo#Pre(HTTPSNonWWWRedirect())`",
      "function_statement": "// HTTPSNonWWWRedirect redirects http requests to https non www.\n// For example, http://www.labstack.com will be redirect to https://labstack.com.\n//\n// Usage `Echo#Pre(HTTPSNonWWWRedirect())`",
      "start_line": 78,
      "end_line": 80,
      "file_path": "./middleware/redirect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "func HTTPSNonWWWRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc {\n\treturn redirect(config, func(scheme, host, uri string) (ok bool, url string) {\n\t\tif scheme != \"https\" {\n\t\t\thost = strings.TrimPrefix(host, www)\n\t\t\treturn true, \"https://\" + host + uri\n\t\t}\n\t\treturn false, \"\"\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/redirect.go",
          "code_snippet": "DefaultRedirectConfig = RedirectConfig{\n\tSkipper: DefaultSkipper,\n\tCode:    http.StatusMovedPermanently,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        78,
        79,
        80
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:WriteHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "WriteHeader",
      "signature": "(w *ignorableWriter) WriteHeader (code int)",
      "ground_truth": "func (w *ignorableWriter) WriteHeader(code int) {\n\tw.lock.Lock()\n\tdefer w.lock.Unlock()\n\tif w.ignoreWrites {\n\t\treturn\n\t}\n\tw.ResponseWriter.WriteHeader(code)\n}",
      "function_comment": "// ignorableWriter is ResponseWriter implementations that allows us to mark writer to ignore further write calls. This\n// is handy in cases when you do not have direct control of code being executed (3rd party middleware) but want to make\n// sure that external code will not be able to write response to the client.",
      "function_statement": "// ignorableWriter is ResponseWriter implementations that allows us to mark writer to ignore further write calls. This\n// is handy in cases when you do not have direct control of code being executed (3rd party middleware) but want to make\n// sure that external code will not be able to write response to the client.",
      "start_line": 205,
      "end_line": 212,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "ignorableWriter struct {\n\thttp.ResponseWriter\n\n\tlock         sync.Mutex\n\tignoreWrites bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/mutex.go",
          "code_snippet": "func (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        205,
        206,
        207,
        208,
        209,
        210,
        211
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:TLSListenerAddr",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        }
      ],
      "name": "TLSListenerAddr",
      "signature": "(e *Echo) TLSListenerAddr () net.Addr",
      "ground_truth": "func (e *Echo) TLSListenerAddr() net.Addr {\n\te.startupMutex.RLock()\n\tdefer e.startupMutex.RUnlock()\n\tif e.TLSListener == nil {\n\t\treturn nil\n\t}\n\treturn e.TLSListener.Addr()\n}",
      "function_comment": "// TLSListenerAddr returns net.Addr for TLSListener",
      "function_statement": "// TLSListenerAddr returns net.Addr for TLSListener",
      "start_line": 823,
      "end_line": 830,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Addr interface {\n\tNetwork() string // name of the network (for example, \"tcp\", \"udp\")\n\tString() string  // string form of address (for example, \"192.0.2.1:25\", \"[2001:db8::1]:80\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\tif rw.readerCount.Add(1) \u003c 0 {\n\t\t// A writer is pending, wait for it.\n\t\truntime_SemacquireRWMutexR(\u0026rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(\u0026rw.writerSem))\n\t\trace.Disable()\n\t}\n\tif r := rw.readerCount.Add(-1); r \u003c 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/net.go",
          "code_snippet": "Listener interface {\n\t// Accept waits for and returns the next connection to the listener.\n\tAccept() (Conn, error)\n\n\t// Close closes the listener.\n\t// Any blocked Accept operations will be unblocked and return errors.\n\tClose() error\n\n\t// Addr returns the listener's network address.\n\tAddr() Addr\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        823,
        824,
        825,
        826,
        827,
        828,
        829
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/decompress.go:DecompressWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressDefaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressPoolError"
        }
      ],
      "name": "DecompressWithConfig",
      "signature": "DecompressWithConfig (config DecompressConfig) echo.MiddlewareFunc",
      "ground_truth": "func DecompressWithConfig(config DecompressConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultGzipConfig.Skipper\n\t}\n\tif config.GzipDecompressPool == nil {\n\t\tconfig.GzipDecompressPool = DefaultDecompressConfig.GzipDecompressPool\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\tpool := config.GzipDecompressPool.gzipDecompressPool()\n\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tif c.Request().Header.Get(echo.HeaderContentEncoding) != GZIPEncoding {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\ti := pool.Get()\n\t\t\tgr, ok := i.(*gzip.Reader)\n\t\t\tif !ok || gr == nil {\n\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, i.(error).Error())\n\t\t\t}\n\t\t\tdefer pool.Put(gr)\n\n\t\t\tb := c.Request().Body\n\t\t\tdefer b.Close()\n\n\t\t\tif err := gr.Reset(b); err != nil {\n\t\t\t\tif err == io.EOF { //ignore if body is empty\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// only Close gzip reader if it was set to a proper gzip source otherwise it will panic on close.\n\t\t\tdefer gr.Close()\n\n\t\t\tc.Request().Body = gr\n\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// DecompressWithConfig decompresses request body based if content encoding type is set to \"gzip\" with config",
      "function_statement": "// DecompressWithConfig decompresses request body based if content encoding type is set to \"gzip\" with config",
      "start_line": 52,
      "end_line": 98,
      "file_path": "./middleware/decompress.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "DecompressConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// GzipDecompressPool defines an interface to provide the sync.Pool used to create/store Gzip readers\n\tGzipDecompressPool Decompressor\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "GzipConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Gzip compression level.\n\t// Optional. Default value -1.\n\tLevel int `yaml:\"level\"`\n\n\t// Length threshold before gzip compression is applied.\n\t// Optional. Default value 0.\n\t//\n\t// Most of the time you will not need to change the default. Compressing\n\t// a short response might increase the transmitted data because of the\n\t// gzip format overhead. Compressing the response will also consume CPU\n\t// and time on the server and the client (for decompressing). Depending on\n\t// your use case such a threshold might be useful.\n\t//\n\t// See also:\n\t// https://webmasters.stackexchange.com/questions/31750/what-is-recommended-minimum-object-size-for-gzip-performance-benefits\n\tMinLength int\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/compress.go",
          "code_snippet": "DefaultGzipConfig = GzipConfig{\n\tSkipper:   DefaultSkipper,\n\tLevel:     -1,\n\tMinLength: 0,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "DefaultDecompressConfig = DecompressConfig{\n\tSkipper:            DefaultSkipper,\n\tGzipDecompressPool: \u0026DefaultGzipDecompressPool{},\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "Decompressor interface {\n\tgzipDecompressPool() sync.Pool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/decompress.go",
          "code_snippet": "GZIPEncoding string = \"gzip\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentEncoding     = \"Content-Encoding\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func NewHTTPError(code int, message ...interface{}) *HTTPError {\n\the := \u0026HTTPError{Code: code, Message: http.StatusText(code)}\n\tif len(message) \u003e 0 {\n\t\the.Message = message[0]\n\t}\n\treturn he\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gunzip.go",
          "code_snippet": "Reader struct {\n\tHeader       // valid after NewReader or Reader.Reset\n\tr            flate.Reader\n\tdecompressor io.ReadCloser\n\tdigest       uint32 // CRC-32, IEEE polynomial (section 8)\n\tsize         uint32 // Uncompressed size (section 2.3.1)\n\tbuf          [512]byte\n\terr          error\n\tmultistream  bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusInternalServerError           = 500",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gunzip.go",
          "code_snippet": "func (z *Reader) Reset(r io.Reader) error {\n\t*z = Reader{\n\t\tdecompressor: z.decompressor,\n\t\tmultistream:  true,\n\t}\n\tif rr, ok := r.(flate.Reader); ok {\n\t\tz.r = rr\n\t} else {\n\t\tz.r = bufio.NewReader(r)\n\t}\n\tz.Header, z.err = z.readHeader()\n\treturn z.err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/compress/gzip/gunzip.go",
          "code_snippet": "func (z *Reader) Close() error { return z.decompressor.Close() }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        70,
        71,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        91,
        92,
        93,
        94,
        95
      ],
      "cover_details": {
        "line_cover_rate": 0.7872340425531915
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/rate_limiter.go:cleanupStaleVisitors",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterMemoryStore_cleanupStaleVisitors"
        }
      ],
      "name": "cleanupStaleVisitors",
      "signature": "(store *RateLimiterMemoryStore) cleanupStaleVisitors ()",
      "ground_truth": "func (store *RateLimiterMemoryStore) cleanupStaleVisitors() {\n\tfor id, visitor := range store.visitors {\n\t\tif store.timeNow().Sub(visitor.lastSeen) \u003e store.expiresIn {\n\t\t\tdelete(store.visitors, id)\n\t\t}\n\t}\n\tstore.lastCleanup = store.timeNow()\n}",
      "function_comment": "/*\ncleanupStaleVisitors helps manage the size of the visitors map by removing stale records\nof users who haven't visited again after the configured expiry time has elapsed\n*/",
      "function_statement": "/*\ncleanupStaleVisitors helps manage the size of the visitors map by removing stale records\nof users who haven't visited again after the configured expiry time has elapsed\n*/",
      "start_line": 260,
      "end_line": 267,
      "file_path": "./middleware/rate_limiter.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "RateLimiterMemoryStore struct {\n\tvisitors map[string]*Visitor\n\tmutex    sync.Mutex\n\trate     rate.Limit // for more info check out Limiter docs - https://pkg.go.dev/golang.org/x/time/rate#Limit.\n\n\tburst       int\n\texpiresIn   time.Duration\n\tlastCleanup time.Time\n\n\ttimeNow func() time.Time\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/rate_limiter.go",
          "code_snippet": "Visitor struct {\n\t*rate.Limiter\n\tlastSeen time.Time\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Sub(u Time) Duration {\n\tif t.wall\u0026u.wall\u0026hasMonotonic != 0 {\n\t\treturn subMono(t.ext, u.ext)\n\t}\n\td := Duration(t.sec()-u.sec())*Second + Duration(t.nsec()-u.nsec())\n\t// Check for overflow or underflow.\n\tswitch {\n\tcase u.Add(d).Equal(t):\n\t\treturn d // d is correct\n\tcase t.Before(u):\n\t\treturn minDuration // t - u is negative out of range\n\tdefault:\n\t\treturn maxDuration // t - u is positive out of range\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func delete(m map[Type]Type1, key Type)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        260,
        261,
        262,
        263,
        264,
        266
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/slash.go:AddTrailingSlashWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlash"
        }
      ],
      "name": "AddTrailingSlashWithConfig",
      "signature": "AddTrailingSlashWithConfig (config TrailingSlashConfig) echo.MiddlewareFunc",
      "ground_truth": "func AddTrailingSlashWithConfig(config TrailingSlashConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultTrailingSlashConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\turl := req.URL\n\t\t\tpath := url.Path\n\t\t\tqs := c.QueryString()\n\t\t\tif !strings.HasSuffix(path, \"/\") {\n\t\t\t\tpath += \"/\"\n\t\t\t\turi := path\n\t\t\t\tif qs != \"\" {\n\t\t\t\t\turi += \"?\" + qs\n\t\t\t\t}\n\n\t\t\t\t// Redirect\n\t\t\t\tif config.RedirectCode != 0 {\n\t\t\t\t\treturn c.Redirect(config.RedirectCode, sanitizeURI(uri))\n\t\t\t\t}\n\n\t\t\t\t// Forward\n\t\t\t\treq.RequestURI = uri\n\t\t\t\turl.Path = path\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// AddTrailingSlashWithConfig returns an AddTrailingSlash middleware with config.\n// See `AddTrailingSlash()`.",
      "function_statement": "// AddTrailingSlashWithConfig returns an AddTrailingSlash middleware with config.\n// See `AddTrailingSlash()`.",
      "start_line": 37,
      "end_line": 72,
      "file_path": "./middleware/slash.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "TrailingSlashConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// Status code to be used when redirecting the request.\n\t// Optional, but when provided the request is redirected using this code.\n\tRedirectCode int `yaml:\"redirect_code\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "DefaultTrailingSlashConfig = TrailingSlashConfig{\n\tSkipper: DefaultSkipper,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/slash.go",
          "code_snippet": "func sanitizeURI(uri string) string {\n\t// double slash `\\\\`, `//` or even `\\/` is absolute uri for browsers and by redirecting request to that uri\n\t// we are vulnerable to open redirect attack. so replace all slashes from the beginning with single slash\n\tif len(uri) \u003e 1 \u0026\u0026 (uri[0] == '\\\\' || uri[0] == '/') \u0026\u0026 (uri[1] == '\\\\' || uri[1] == '/') {\n\t\turi = \"/\" + strings.TrimLeft(uri, `/\\`)\n\t}\n\treturn uri\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func HasSuffix(s, suffix string) bool {\n\treturn stringslite.HasSuffix(s, suffix)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        37,
        38,
        39,
        40,
        41,
        43,
        44,
        45,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        61,
        62,
        63,
        66,
        67,
        69
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:NewRouter",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartH2CServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoClose"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_ListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetworkInvalid"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_FallsBackToDefaultStatus"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Write_UsesSetResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_FlushPanics"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_ChangeStatusCodeBeforeWrite"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Unwrap"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addEmptyPathToSlashReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_ReverseNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "NewRouter",
      "signature": "NewRouter (e *Echo) *Router",
      "ground_truth": "func NewRouter(e *Echo) *Router {\n\treturn \u0026Router{\n\t\ttree: \u0026node{\n\t\t\tmethods: new(routeMethods),\n\t\t},\n\t\troutes: map[string]*Route{},\n\t\techo:   e,\n\t}\n}",
      "function_comment": "// NewRouter returns a new Router instance.",
      "function_statement": "// NewRouter returns a new Router instance.",
      "start_line": 139,
      "end_line": 147,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "Router struct {\n\ttree   *node\n\troutes map[string]*Route\n\techo   *Echo\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func new(Type) *Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt16",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustInt16",
      "signature": "(b *ValueBinder) MustInt16 (sourceParam string, dest *int16) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt16(sourceParam string, dest *int16) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 16, true)\n}",
      "function_comment": "// MustInt16 requires parameter value to exist to bind to int16 variable. Returns error when value does not exist",
      "function_statement": "// MustInt16 requires parameter value to exist to bind to int16 variable. Returns error when value does not exist",
      "start_line": 479,
      "end_line": 481,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        479,
        480,
        481
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_limit.go:Reset",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitReader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig"
        }
      ],
      "name": "Reset",
      "signature": "(r *limitedReader) Reset (reader io.ReadCloser)",
      "ground_truth": "func (r *limitedReader) Reset(reader io.ReadCloser) {\n\tr.reader = reader\n\tr.read = 0\n}",
      "function_comment": "// BodyLimitWithConfig returns a BodyLimit middleware with config.",
      "function_statement": "// BodyLimitWithConfig returns a BodyLimit middleware with config.",
      "start_line": 103,
      "end_line": 106,
      "file_path": "./middleware/body_limit.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_limit.go",
          "code_snippet": "limitedReader struct {\n\tBodyLimitConfig\n\treader io.ReadCloser\n\tread   int64\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "ReadCloser interface {\n\tReader\n\tCloser\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        103,
        104,
        105,
        106
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/recover.go:Recover",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverErrAbortHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecover"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "Recover",
      "signature": "Recover () echo.MiddlewareFunc",
      "ground_truth": "func Recover() echo.MiddlewareFunc {\n\treturn RecoverWithConfig(DefaultRecoverConfig)\n}",
      "function_comment": "// Recover returns a middleware which recovers from panics anywhere in the chain\n// and handles the control to the centralized HTTPErrorHandler.",
      "function_statement": "// Recover returns a middleware which recovers from panics anywhere in the chain\n// and handles the control to the centralized HTTPErrorHandler.",
      "start_line": 64,
      "end_line": 66,
      "file_path": "./middleware/recover.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/recover.go",
          "code_snippet": "func RecoverWithConfig(config RecoverConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultRecoverConfig.Skipper\n\t}\n\tif config.StackSize == 0 {\n\t\tconfig.StackSize = DefaultRecoverConfig.StackSize\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) (returnErr error) {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tif r == http.ErrAbortHandler {\n\t\t\t\t\t\tpanic(r)\n\t\t\t\t\t}\n\t\t\t\t\terr, ok := r.(error)\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\terr = fmt.Errorf(\"%v\", r)\n\t\t\t\t\t}\n\t\t\t\t\tvar stack []byte\n\t\t\t\t\tvar length int\n\n\t\t\t\t\tif !config.DisablePrintStack {\n\t\t\t\t\t\tstack = make([]byte, config.StackSize)\n\t\t\t\t\t\tlength = runtime.Stack(stack, !config.DisableStackAll)\n\t\t\t\t\t\tstack = stack[:length]\n\t\t\t\t\t}\n\n\t\t\t\t\tif config.LogErrorFunc != nil {\n\t\t\t\t\t\terr = config.LogErrorFunc(c, err, stack)\n\t\t\t\t\t} else if !config.DisablePrintStack {\n\t\t\t\t\t\tmsg := fmt.Sprintf(\"[PANIC RECOVER] %v %s\\n\", err, stack[:length])\n\t\t\t\t\t\tswitch config.LogLevel {\n\t\t\t\t\t\tcase log.DEBUG:\n\t\t\t\t\t\t\tc.Logger().Debug(msg)\n\t\t\t\t\t\tcase log.INFO:\n\t\t\t\t\t\t\tc.Logger().Info(msg)\n\t\t\t\t\t\tcase log.WARN:\n\t\t\t\t\t\t\tc.Logger().Warn(msg)\n\t\t\t\t\t\tcase log.ERROR:\n\t\t\t\t\t\t\tc.Logger().Error(msg)\n\t\t\t\t\t\tcase log.OFF:\n\t\t\t\t\t\t\t// None.\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tc.Logger().Print(msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif err != nil \u0026\u0026 !config.DisableErrorHandler {\n\t\t\t\t\t\tc.Error(err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturnErr = err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/recover.go",
          "code_snippet": "DefaultRecoverConfig = RecoverConfig{\n\tSkipper:             DefaultSkipper,\n\tStackSize:           4 \u003c\u003c 10, // 4 KB\n\tDisableStackAll:     false,\n\tDisablePrintStack:   false,\n\tLogLevel:            0,\n\tLogErrorFunc:        nil,\n\tDisableErrorHandler: false,\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        64,
        65,
        66
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/body_dump.go:Write",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDump"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpFails"
        }
      ],
      "name": "Write",
      "signature": "(w *bodyDumpResponseWriter) Write (b []byte) (int, error)",
      "ground_truth": "func (w *bodyDumpResponseWriter) Write(b []byte) (int, error) {\n\treturn w.Writer.Write(b)\n}",
      "function_comment": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "function_statement": "// BodyDumpWithConfig returns a BodyDump middleware with config.",
      "start_line": 96,
      "end_line": 98,
      "file_path": "./middleware/body_dump.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/body_dump.go",
          "code_snippet": "bodyDumpResponseWriter struct {\n\tio.Writer\n\thttp.ResponseWriter\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        96,
        97,
        98
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/extractor.go:CreateExtractors",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFConfig_skipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/extractor_test.go",
          "func_name": "TestCreateExtractors"
        }
      ],
      "name": "CreateExtractors",
      "signature": "CreateExtractors (lookups string) ([]ValuesExtractor, error)",
      "ground_truth": "func CreateExtractors(lookups string) ([]ValuesExtractor, error) {\n\treturn createExtractors(lookups, \"\")\n}",
      "function_comment": "// CreateExtractors creates ValuesExtractors from given lookups.\n// Lookups is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n// to extract key from the request.\n// Possible values:\n//   - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n//     `\u003ccut-prefix\u003e` is argument value to cut/trim prefix of the extracted value. This is useful if header\n//     value has static prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we\n//     want to cut is `\u003cauth-scheme\u003e ` note the space at the end.\n//     In case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove is `Basic `.\n//   - \"query:\u003cname\u003e\"\n//   - \"param:\u003cname\u003e\"\n//   - \"form:\u003cname\u003e\"\n//   - \"cookie:\u003cname\u003e\"\n//\n// Multiple sources example:\n// - \"header:Authorization,header:X-Api-Key\"",
      "function_statement": "// CreateExtractors creates ValuesExtractors from given lookups.\n// Lookups is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n// to extract key from the request.\n// Possible values:\n//   - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n//     `\u003ccut-prefix\u003e` is argument value to cut/trim prefix of the extracted value. This is useful if header\n//     value has static prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we\n//     want to cut is `\u003cauth-scheme\u003e ` note the space at the end.\n//     In case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove is `Basic `.\n//   - \"query:\u003cname\u003e\"\n//   - \"param:\u003cname\u003e\"\n//   - \"form:\u003cname\u003e\"\n//   - \"cookie:\u003cname\u003e\"\n//\n// Multiple sources example:\n// - \"header:Authorization,header:X-Api-Key\"",
      "start_line": 46,
      "end_line": 48,
      "file_path": "./middleware/extractor.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "ValuesExtractor func(c echo.Context) ([]string, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/extractor.go",
          "code_snippet": "func createExtractors(lookups string, authScheme string) ([]ValuesExtractor, error) {\n\tif lookups == \"\" {\n\t\treturn nil, nil\n\t}\n\tsources := strings.Split(lookups, \",\")\n\tvar extractors = make([]ValuesExtractor, 0)\n\tfor _, source := range sources {\n\t\tparts := strings.Split(source, \":\")\n\t\tif len(parts) \u003c 2 {\n\t\t\treturn nil, fmt.Errorf(\"extractor source for lookup could not be split into needed parts: %v\", source)\n\t\t}\n\n\t\tswitch parts[0] {\n\t\tcase \"query\":\n\t\t\textractors = append(extractors, valuesFromQuery(parts[1]))\n\t\tcase \"param\":\n\t\t\textractors = append(extractors, valuesFromParam(parts[1]))\n\t\tcase \"cookie\":\n\t\t\textractors = append(extractors, valuesFromCookie(parts[1]))\n\t\tcase \"form\":\n\t\t\textractors = append(extractors, valuesFromForm(parts[1]))\n\t\tcase \"header\":\n\t\t\tprefix := \"\"\n\t\t\tif len(parts) \u003e 2 {\n\t\t\t\tprefix = parts[2]\n\t\t\t} else if authScheme != \"\" \u0026\u0026 parts[1] == echo.HeaderAuthorization {\n\t\t\t\t// backwards compatibility for JWT and KeyAuth:\n\t\t\t\t// * we only apply this fix to Authorization as header we use and uses prefixes like \"Bearer \u003ctoken-value\u003e\" etc\n\t\t\t\t// * previously header extractor assumed that auth-scheme/prefix had a space as suffix we need to retain that\n\t\t\t\t//   behaviour for default values and Authorization header.\n\t\t\t\tprefix = authScheme\n\t\t\t\tif !strings.HasSuffix(prefix, \" \") {\n\t\t\t\t\tprefix += \" \"\n\t\t\t\t}\n\t\t\t}\n\t\t\textractors = append(extractors, valuesFromHeader(parts[1], prefix))\n\t\t}\n\t}\n\treturn extractors, nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        46,
        47,
        48
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/key_auth.go:KeyAuth",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuth"
        }
      ],
      "name": "KeyAuth",
      "signature": "KeyAuth (fn KeyAuthValidator) echo.MiddlewareFunc",
      "ground_truth": "func KeyAuth(fn KeyAuthValidator) echo.MiddlewareFunc {\n\tc := DefaultKeyAuthConfig\n\tc.Validator = fn\n\treturn KeyAuthWithConfig(c)\n}",
      "function_comment": "// KeyAuth returns an KeyAuth middleware.\n//\n// For valid key it calls the next handler.\n// For invalid key, it sends \"401 - Unauthorized\" response.\n// For missing key, it sends \"400 - Bad Request\" response.",
      "function_statement": "// KeyAuth returns an KeyAuth middleware.\n//\n// For valid key it calls the next handler.\n// For invalid key, it sends \"401 - Unauthorized\" response.\n// For missing key, it sends \"400 - Bad Request\" response.",
      "start_line": 86,
      "end_line": 90,
      "file_path": "./middleware/key_auth.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "KeyAuthValidator func(auth string, c echo.Context) (bool, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "DefaultKeyAuthConfig = KeyAuthConfig{\n\tSkipper:    DefaultSkipper,\n\tKeyLookup:  \"header:\" + echo.HeaderAuthorization,\n\tAuthScheme: \"Bearer\",\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "KeyAuthConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// KeyLookup is a string in the form of \"\u003csource\u003e:\u003cname\u003e\" or \"\u003csource\u003e:\u003cname\u003e,\u003csource\u003e:\u003cname\u003e\" that is used\n\t// to extract key from the request.\n\t// Optional. Default value \"header:Authorization\".\n\t// Possible values:\n\t// - \"header:\u003cname\u003e\" or \"header:\u003cname\u003e:\u003ccut-prefix\u003e\"\n\t// \t\t\t`\u003ccut-prefix\u003e` is argument value to cut/trim prefix of the extracted value. This is useful if header\n\t//\t\t\tvalue has static prefix like `Authorization: \u003cauth-scheme\u003e \u003cauthorisation-parameters\u003e` where part that we\n\t//\t\t\twant to cut is `\u003cauth-scheme\u003e ` note the space at the end.\n\t//\t\t\tIn case of basic authentication `Authorization: Basic \u003ccredentials\u003e` prefix we want to remove is `Basic `.\n\t// - \"query:\u003cname\u003e\"\n\t// - \"form:\u003cname\u003e\"\n\t// - \"cookie:\u003cname\u003e\"\n\t// Multiple sources example:\n\t// - \"header:Authorization,header:X-Api-Key\"\n\tKeyLookup string\n\n\t// AuthScheme to be used in the Authorization header.\n\t// Optional. Default value \"Bearer\".\n\tAuthScheme string\n\n\t// Validator is a function to validate key.\n\t// Required.\n\tValidator KeyAuthValidator\n\n\t// ErrorHandler defines a function which is executed for an invalid key.\n\t// It may be used to define a custom error.\n\tErrorHandler KeyAuthErrorHandler\n\n\t// ContinueOnIgnoredError allows the next middleware/handler to be called when ErrorHandler decides to\n\t// ignore the error (by returning `nil`).\n\t// This is useful when parts of your site/api allow public access and some authorized routes provide extra functionality.\n\t// In that case you can use ErrorHandler to set a default public key auth value in the request context\n\t// and continue. Some logic down the remaining execution chain needs to check that (public) key auth value then.\n\tContinueOnIgnoredError bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "func KeyAuthWithConfig(config KeyAuthConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultKeyAuthConfig.Skipper\n\t}\n\t// Defaults\n\tif config.AuthScheme == \"\" {\n\t\tconfig.AuthScheme = DefaultKeyAuthConfig.AuthScheme\n\t}\n\tif config.KeyLookup == \"\" {\n\t\tconfig.KeyLookup = DefaultKeyAuthConfig.KeyLookup\n\t}\n\tif config.Validator == nil {\n\t\tpanic(\"echo: key-auth middleware requires a validator function\")\n\t}\n\n\textractors, cErr := createExtractors(config.KeyLookup, config.AuthScheme)\n\tif cErr != nil {\n\t\tpanic(cErr)\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\tvar lastExtractorErr error\n\t\t\tvar lastValidatorErr error\n\t\t\tfor _, extractor := range extractors {\n\t\t\t\tkeys, err := extractor(c)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlastExtractorErr = err\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfor _, key := range keys {\n\t\t\t\t\tvalid, err := config.Validator(key, c)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlastValidatorErr = err\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif valid {\n\t\t\t\t\t\treturn next(c)\n\t\t\t\t\t}\n\t\t\t\t\tlastValidatorErr = errors.New(\"invalid key\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// we are here only when we did not successfully extract and validate any of keys\n\t\t\terr := lastValidatorErr\n\t\t\tif err == nil { // prioritize validator errors over extracting errors\n\t\t\t\t// ugly part to preserve backwards compatible errors. someone could rely on them\n\t\t\t\tif lastExtractorErr == errQueryExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in the query string\")\n\t\t\t\t} else if lastExtractorErr == errCookieExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in cookies\")\n\t\t\t\t} else if lastExtractorErr == errFormExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in the form\")\n\t\t\t\t} else if lastExtractorErr == errHeaderExtractorValueMissing {\n\t\t\t\t\terr = errors.New(\"missing key in request header\")\n\t\t\t\t} else if lastExtractorErr == errHeaderExtractorValueInvalid {\n\t\t\t\t\terr = errors.New(\"invalid key in the request header\")\n\t\t\t\t} else {\n\t\t\t\t\terr = lastExtractorErr\n\t\t\t\t}\n\t\t\t\terr = \u0026ErrKeyAuthMissing{Err: err}\n\t\t\t}\n\n\t\t\tif config.ErrorHandler != nil {\n\t\t\t\ttmpErr := config.ErrorHandler(err, c)\n\t\t\t\tif config.ContinueOnIgnoredError \u0026\u0026 tmpErr == nil {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn tmpErr\n\t\t\t}\n\t\t\tif lastValidatorErr != nil { // prioritize validator errors over extracting errors\n\t\t\t\treturn \u0026echo.HTTPError{\n\t\t\t\t\tCode:     http.StatusUnauthorized,\n\t\t\t\t\tMessage:  \"Unauthorized\",\n\t\t\t\t\tInternal: lastValidatorErr,\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn echo.NewHTTPError(http.StatusBadRequest, err.Error())\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        86,
        87,
        88,
        89,
        90
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:NewContext",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindHeaderParamBadType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFuncWithError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindBody"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_CustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_GetValues"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_errorStopsBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestPathParamsBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestQueryParamsBinder_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestFormFieldBinder"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_MustCustomFunc"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_String"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64_intValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bool"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int64s_intsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64s_uintsValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Time"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Duration"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Bools"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Times"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float64s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Durations"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Float32s"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_JSONUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TextUnmarshaler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRequest"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderErrorsOnNoRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestBindWithDelimiter_invalidType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTime"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeMilli"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_TimesError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_DurationsError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextReset"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPathParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextQueryParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextFormValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Validate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_QueryString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindWithDelimiter_types"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoContext"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Encode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "json_test.go",
          "func_name": "TestDefaultJSONCodec_Decode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterNoRoutablePath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "NewContext",
      "signature": "(e *Echo) NewContext (r *http.Request, w http.ResponseWriter) Context",
      "ground_truth": "func (e *Echo) NewContext(r *http.Request, w http.ResponseWriter) Context {\n\treturn \u0026context{\n\t\trequest:  r,\n\t\tresponse: NewResponse(w, e),\n\t\tstore:    make(Map),\n\t\techo:     e,\n\t\tpvalues:  make([]string, *e.maxParam),\n\t\thandler:  NotFoundHandler,\n\t}\n}",
      "function_comment": "// NewContext returns a Context instance.",
      "function_statement": "// NewContext returns a Context instance.",
      "start_line": 390,
      "end_line": 399,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func NewResponse(w http.ResponseWriter, e *Echo) (r *Response) {\n\treturn \u0026Response{Writer: w, echo: e}\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Map map[string]interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "NotFoundHandler = func(c Context) error {\n\treturn ErrNotFound\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        397,
        398,
        399
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:JSONP",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        }
      ],
      "name": "JSONP",
      "signature": "(c *context) JSONP (code int, callback string, i any) (err error)",
      "ground_truth": "func (c *context) JSONP(code int, callback string, i any) (err error) {\n\treturn c.jsonPBlob(code, callback, i)\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 524,
      "end_line": 526,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) jsonPBlob(code int, callback string, i any) (err error) {\n\tindent := \"\"\n\tif _, pretty := c.QueryParams()[\"pretty\"]; c.echo.Debug || pretty {\n\t\tindent = defaultIndent\n\t}\n\tc.writeContentType(MIMEApplicationJavaScriptCharsetUTF8)\n\tc.response.WriteHeader(code)\n\tif _, err = c.response.Write([]byte(callback + \"(\")); err != nil {\n\t\treturn\n\t}\n\tif err = c.echo.JSONSerializer.Serialize(c, i, indent); err != nil {\n\t\treturn\n\t}\n\tif _, err = c.response.Write([]byte(\");\")); err != nil {\n\t\treturn\n\t}\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        524,
        525,
        526
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/router.go:newNode",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextGetAndSetParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextSetParamNamesEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleDefaultHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoRoutesHandleAdditionalHosts"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_OnAddRouteHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverseHandleHostProperly"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoReverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterTwoParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamWithSlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteAnyKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_notFoundRouteWithNodeSplitting"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteStaticKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouteMultiLevelBacktracking2"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterBacktrackingFromMultipleParamKinds"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestNotFoundRouteParamKind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamStaticConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAnyMatchesLastAddedAnyRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyPrefixIssue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam_escapeColon"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterIssue1348"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMicroParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixParamMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevel"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnySlash"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMultiRoute"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriorityNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamNames"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamOrdering"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMixedParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterMatchAnyMultiLevelWithPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamAlias"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPriority"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterStaticDynamicConflict"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParamBacktraceNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterGitHubAPI"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Routes"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterParam1466"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_Reverse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterFindNotPanicOrLoopsWhenContextSetParamValuesIsCalledWithLessValuesThanEchoMaxParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterDifferentParamsInPath"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterPanicWhenParamNoRootOnlyChildsFailsFind"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "newNode",
      "signature": "newNode (\n\tt kind,\n\tpre string,\n\tp *node,\n\tsc children,\n\toriginalPath string,\n\tmethods *routeMethods,\n\tparamsCount int,\n\tparamChildren,\n\tanyChildren *node,\n\tnotFoundHandler *routeMethod,\n) *node",
      "ground_truth": "func newNode(\n\tt kind,\n\tpre string,\n\tp *node,\n\tsc children,\n\toriginalPath string,\n\tmethods *routeMethods,\n\tparamsCount int,\n\tparamChildren,\n\tanyChildren *node,\n\tnotFoundHandler *routeMethod,\n) *node {\n\treturn \u0026node{\n\t\tkind:            t,\n\t\tlabel:           pre[0],\n\t\tprefix:          pre,\n\t\tparent:          p,\n\t\tstaticChildren:  sc,\n\t\toriginalPath:    originalPath,\n\t\tmethods:         methods,\n\t\tparamsCount:     paramsCount,\n\t\tparamChild:      paramChildren,\n\t\tanyChild:        anyChildren,\n\t\tisLeaf:          sc == nil \u0026\u0026 paramChildren == nil \u0026\u0026 anyChildren == nil,\n\t\tisHandler:       methods.isHandler(),\n\t\tnotFoundHandler: notFoundHandler,\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 398,
      "end_line": 425,
      "file_path": "./router.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "kind uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "node struct {\n\tmethods    *routeMethods\n\tparent     *node\n\tparamChild *node\n\tanyChild   *node\n\t// notFoundHandler is handler registered with RouteNotFound method and is executed for 404 cases\n\tnotFoundHandler *routeMethod\n\tprefix          string\n\toriginalPath    string\n\tstaticChildren  children\n\tparamsCount     int\n\tlabel           byte\n\tkind            kind\n\t// isLeaf indicates that node does not have child routes\n\tisLeaf bool\n\t// isHandler indicates that node has at least one handler registered to it\n\tisHandler bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "children []*node",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethods struct {\n\tconnect     *routeMethod\n\tdelete      *routeMethod\n\tget         *routeMethod\n\thead        *routeMethod\n\toptions     *routeMethod\n\tpatch       *routeMethod\n\tpost        *routeMethod\n\tpropfind    *routeMethod\n\tput         *routeMethod\n\ttrace       *routeMethod\n\treport      *routeMethod\n\tanyOther    map[string]*routeMethod\n\tallowHeader string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "routeMethod struct {\n\thandler HandlerFunc\n\tppath   string\n\tpnames  []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (m *routeMethods) isHandler() bool {\n\treturn m.connect != nil ||\n\t\tm.delete != nil ||\n\t\tm.get != nil ||\n\t\tm.head != nil ||\n\t\tm.options != nil ||\n\t\tm.patch != nil ||\n\t\tm.post != nil ||\n\t\tm.propfind != nil ||\n\t\tm.put != nil ||\n\t\tm.trace != nil ||\n\t\tm.report != nil ||\n\t\tlen(m.anyOther) != 0\n\t// RouteNotFound/404 is not considered as a handler\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        416,
        417,
        418,
        419,
        420,
        421,
        422,
        423,
        424,
        425
      ],
      "cover_details": {
        "line_cover_rate": 0.6071428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:setUintField",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindSetWithProperType"
        }
      ],
      "name": "setUintField",
      "signature": "setUintField (value string, bitSize int, field reflect.Value) error",
      "ground_truth": "func setUintField(value string, bitSize int, field reflect.Value) error {\n\tif value == \"\" {\n\t\tvalue = \"0\"\n\t}\n\tuintVal, err := strconv.ParseUint(value, 10, bitSize)\n\tif err == nil {\n\t\tfield.SetUint(uintVal)\n\t}\n\treturn err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 411,
      "end_line": 420,
      "file_path": "./bind.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "Value struct {\n\t// typ_ holds the type of the value represented by a Value.\n\t// Access using the typ method to avoid escape of v.\n\ttyp_ *abi.Type\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t//\n\t// The lowest five bits give the Kind of the value, mirroring typ.Kind().\n\t//\n\t// The next set of bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)\n\t//\t- flagMethod: v is a method value.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\t//\n\t// The remaining 22+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\tflag\n\n\t// A method value represents a curried method invocation\n\t// like r.Read for some receiver r. The typ+val+flag bits describe\n\t// the receiver r, but the flag's Kind bits say Func (methods are\n\t// functions), and the top bits of the flag give the method number\n\t// in r's type's method table.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func ParseUint(s string, base int, bitSize int) (uint64, error) {\n\tconst fnParseUint = \"ParseUint\"\n\n\tif s == \"\" {\n\t\treturn 0, syntaxError(fnParseUint, s)\n\t}\n\n\tbase0 := base == 0\n\n\ts0 := s\n\tswitch {\n\tcase 2 \u003c= base \u0026\u0026 base \u003c= 36:\n\t\t// valid base; nothing to do\n\n\tcase base == 0:\n\t\t// Look for octal, hex prefix.\n\t\tbase = 10\n\t\tif s[0] == '0' {\n\t\t\tswitch {\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'b':\n\t\t\t\tbase = 2\n\t\t\t\ts = s[2:]\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'o':\n\t\t\t\tbase = 8\n\t\t\t\ts = s[2:]\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'x':\n\t\t\t\tbase = 16\n\t\t\t\ts = s[2:]\n\t\t\tdefault:\n\t\t\t\tbase = 8\n\t\t\t\ts = s[1:]\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\treturn 0, baseError(fnParseUint, s0, base)\n\t}\n\n\tif bitSize == 0 {\n\t\tbitSize = IntSize\n\t} else if bitSize \u003c 0 || bitSize \u003e 64 {\n\t\treturn 0, bitSizeError(fnParseUint, s0, bitSize)\n\t}\n\n\t// Cutoff is the smallest number such that cutoff*base \u003e maxUint64.\n\t// Use compile-time constants for common cases.\n\tvar cutoff uint64\n\tswitch base {\n\tcase 10:\n\t\tcutoff = maxUint64/10 + 1\n\tcase 16:\n\t\tcutoff = maxUint64/16 + 1\n\tdefault:\n\t\tcutoff = maxUint64/uint64(base) + 1\n\t}\n\n\tmaxVal := uint64(1)\u003c\u003cuint(bitSize) - 1\n\n\tunderscores := false\n\tvar n uint64\n\tfor _, c := range []byte(s) {\n\t\tvar d byte\n\t\tswitch {\n\t\tcase c == '_' \u0026\u0026 base0:\n\t\t\tunderscores = true\n\t\t\tcontinue\n\t\tcase '0' \u003c= c \u0026\u0026 c \u003c= '9':\n\t\t\td = c - '0'\n\t\tcase 'a' \u003c= lower(c) \u0026\u0026 lower(c) \u003c= 'z':\n\t\t\td = lower(c) - 'a' + 10\n\t\tdefault:\n\t\t\treturn 0, syntaxError(fnParseUint, s0)\n\t\t}\n\n\t\tif d \u003e= byte(base) {\n\t\t\treturn 0, syntaxError(fnParseUint, s0)\n\t\t}\n\n\t\tif n \u003e= cutoff {\n\t\t\t// n*base overflows\n\t\t\treturn maxVal, rangeError(fnParseUint, s0)\n\t\t}\n\t\tn *= uint64(base)\n\n\t\tn1 := n + uint64(d)\n\t\tif n1 \u003c n || n1 \u003e maxVal {\n\t\t\t// n+d overflows\n\t\t\treturn maxVal, rangeError(fnParseUint, s0)\n\t\t}\n\t\tn = n1\n\t}\n\n\tif underscores \u0026\u0026 !underscoreOK(s0) {\n\t\treturn 0, syntaxError(fnParseUint, s0)\n\t}\n\n\treturn n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) SetUint(x uint64) {\n\tv.mustBeAssignable()\n\tswitch k := v.kind(); k {\n\tdefault:\n\t\tpanic(\u0026ValueError{\"reflect.Value.SetUint\", v.kind()})\n\tcase Uint:\n\t\t*(*uint)(v.ptr) = uint(x)\n\tcase Uint8:\n\t\t*(*uint8)(v.ptr) = uint8(x)\n\tcase Uint16:\n\t\t*(*uint16)(v.ptr) = uint16(x)\n\tcase Uint32:\n\t\t*(*uint32)(v.ptr) = uint32(x)\n\tcase Uint64:\n\t\t*(*uint64)(v.ptr) = x\n\tcase Uintptr:\n\t\t*(*uintptr)(v.ptr) = uintptr(x)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        411,
        412,
        415,
        416,
        417,
        418,
        419
      ],
      "cover_details": {
        "line_cover_rate": 0.7
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:Flush",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_Flush"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse_FlushPanics"
        }
      ],
      "name": "Flush",
      "signature": "(r *Response) Flush ()",
      "ground_truth": "func (r *Response) Flush() {\n\terr := http.NewResponseController(r.Writer).Flush()\n\tif err != nil \u0026\u0026 errors.Is(err, http.ErrNotSupported) {\n\t\tpanic(fmt.Errorf(\"echo: response writer %T does not support flushing (http.Flusher interface)\", r.Writer))\n\t}\n}",
      "function_comment": "// Flush implements the http.Flusher interface to allow an HTTP handler to flush\n// buffered data to the client.\n// See [http.Flusher](https://golang.org/pkg/net/http/#Flusher)",
      "function_statement": "// Flush implements the http.Flusher interface to allow an HTTP handler to flush\n// buffered data to the client.\n// See [http.Flusher](https://golang.org/pkg/net/http/#Flusher)",
      "start_line": 89,
      "end_line": 94,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func (c *ResponseController) Flush() error {\n\trw := c.rw\n\tfor {\n\t\tswitch t := rw.(type) {\n\t\tcase interface{ FlushError() error }:\n\t\t\treturn t.FlushError()\n\t\tcase Flusher:\n\t\t\tt.Flush()\n\t\t\treturn nil\n\t\tcase rwUnwrapper:\n\t\t\trw = t.Unwrap()\n\t\tdefault:\n\t\t\treturn errNotSupported()\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/responsecontroller.go",
          "code_snippet": "func NewResponseController(rw ResponseWriter) *ResponseController {\n\treturn \u0026ResponseController{rw}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/errors/wrap.go",
          "code_snippet": "func Is(err, target error) bool {\n\tif err == nil || target == nil {\n\t\treturn err == target\n\t}\n\n\tisComparable := reflectlite.TypeOf(target).Comparable()\n\treturn is(err, target, isComparable)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "ErrNotSupported = \u0026ProtocolError{\"feature not supported\"}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        89,
        90,
        91,
        92
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/bind.go:Bind",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnsupportedMediaType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrCustomTag"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtrNil"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTypeError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalText"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalTextPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseSensitivePrioritized"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestToMultipleFields"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamAnonymousFieldPtr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindQueryParamsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindForm"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindParam"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParams"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindUnmarshalParamExtras"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindMultipartFormFiles"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestDefaultBinder_BindToStructFromMixedSources"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestBindInt8"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "bind_test.go",
          "func_name": "TestTimeFormatBinding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Bind"
        }
      ],
      "name": "Bind",
      "signature": "(b *DefaultBinder) Bind (i interface{}, c Context) (err error)",
      "ground_truth": "func (b *DefaultBinder) Bind(i interface{}, c Context) (err error) {\n\tif err := b.BindPathParams(c, i); err != nil {\n\t\treturn err\n\t}\n\t// Only bind query parameters for GET/DELETE/HEAD to avoid unexpected behavior with destination struct binding from body.\n\t// For example a request URL `\u0026id=1\u0026lang=en` with body `{\"id\":100,\"lang\":\"de\"}` would lead to precedence issues.\n\t// The HTTP method check restores pre-v4.1.11 behavior to avoid these problems (see issue #1670)\n\tmethod := c.Request().Method\n\tif method == http.MethodGet || method == http.MethodDelete || method == http.MethodHead {\n\t\tif err = b.BindQueryParams(c, i); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn b.BindBody(c, i)\n}",
      "function_comment": "// Bind implements the `Binder#Bind` function.\n// Binding is done in following order: 1) path params; 2) query params; 3) request body. Each step COULD override previous\n// step binded values. For single source binding use their own methods BindBody, BindQueryParams, BindPathParams.",
      "function_statement": "// Bind implements the `Binder#Bind` function.\n// Binding is done in following order: 1) path params; 2) query params; 3) request body. Each step COULD override previous\n// step binded values. For single source binding use their own methods BindBody, BindQueryParams, BindPathParams.",
      "start_line": 138,
      "end_line": 152,
      "file_path": "./bind.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "DefaultBinder struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) BindPathParams(c Context, i interface{}) error {\n\tnames := c.ParamNames()\n\tvalues := c.ParamValues()\n\tparams := map[string][]string{}\n\tfor i, name := range names {\n\t\tparams[name] = []string{values[i]}\n\t}\n\tif err := b.bindData(i, params, \"param\", nil); err != nil {\n\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) BindQueryParams(c Context, i interface{}) error {\n\tif err := b.bindData(i, c.QueryParams(), \"query\", nil); err != nil {\n\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "func (b *DefaultBinder) BindBody(c Context, i interface{}) (err error) {\n\treq := c.Request()\n\tif req.ContentLength == 0 {\n\t\treturn\n\t}\n\n\t// mediatype is found like `mime.ParseMediaType()` does it\n\tbase, _, _ := strings.Cut(req.Header.Get(HeaderContentType), \";\")\n\tmediatype := strings.TrimSpace(base)\n\n\tswitch mediatype {\n\tcase MIMEApplicationJSON:\n\t\tif err = c.Echo().JSONSerializer.Deserialize(c, i); err != nil {\n\t\t\tswitch err.(type) {\n\t\t\tcase *HTTPError:\n\t\t\t\treturn err\n\t\t\tdefault:\n\t\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t\t}\n\t\t}\n\tcase MIMEApplicationXML, MIMETextXML:\n\t\tif err = xml.NewDecoder(req.Body).Decode(i); err != nil {\n\t\t\tif ute, ok := err.(*xml.UnsupportedTypeError); ok {\n\t\t\t\treturn NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Unsupported type error: type=%v, error=%v\", ute.Type, ute.Error())).SetInternal(err)\n\t\t\t} else if se, ok := err.(*xml.SyntaxError); ok {\n\t\t\t\treturn NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Syntax error: line=%v, error=%v\", se.Line, se.Error())).SetInternal(err)\n\t\t\t}\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\tcase MIMEApplicationForm:\n\t\tparams, err := c.FormParams()\n\t\tif err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\t\tif err = b.bindData(i, params, \"form\", nil); err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\tcase MIMEMultipartForm:\n\t\tparams, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\t\tif err = b.bindData(i, params.Value, \"form\", params.File); err != nil {\n\t\t\treturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\t\t}\n\tdefault:\n\t\treturn ErrUnsupportedMediaType\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodHead    = \"HEAD\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodDelete  = \"DELETE\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodGet     = \"GET\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        138,
        139,
        145,
        146,
        147,
        148,
        149,
        151
      ],
      "cover_details": {
        "line_cover_rate": 0.5333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:DELETE",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        }
      ],
      "name": "DELETE",
      "signature": "(e *Echo) DELETE (path string, h HandlerFunc, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (e *Echo) DELETE(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn e.Add(http.MethodDelete, path, h, m...)\n}",
      "function_comment": "// DELETE registers a new DELETE route for a path with matching handler in the router\n// with optional route-level middleware.",
      "function_statement": "// DELETE registers a new DELETE route for a path with matching handler in the router\n// with optional route-level middleware.",
      "start_line": 484,
      "end_line": 486,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) Add(method, path string, handler HandlerFunc, middleware ...MiddlewareFunc) *Route {\n\treturn e.add(\"\", method, path, handler, middleware...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodDelete  = \"DELETE\"",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        484,
        485,
        486
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:StartServer",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartServer"
        }
      ],
      "name": "StartServer",
      "signature": "(e *Echo) StartServer (s *http.Server) (err error)",
      "ground_truth": "func (e *Echo) StartServer(s *http.Server) (err error) {\n\te.startupMutex.Lock()\n\tif err := e.configureServer(s); err != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn err\n\t}\n\tif s.TLSConfig != nil {\n\t\te.startupMutex.Unlock()\n\t\treturn s.Serve(e.TLSListener)\n\t}\n\te.startupMutex.Unlock()\n\treturn s.Serve(e.Listener)\n}",
      "function_comment": "// StartServer starts a custom http server.",
      "function_statement": "// StartServer starts a custom http server.",
      "start_line": 759,
      "end_line": 771,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) configureServer(s *http.Server) error {\n\t// Setup\n\te.colorer.SetOutput(e.Logger.Output())\n\ts.ErrorLog = e.StdLogger\n\ts.Handler = e\n\tif e.Debug {\n\t\te.Logger.SetLevel(log.DEBUG)\n\t}\n\n\tif !e.HideBanner {\n\t\te.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n\t}\n\n\tif s.TLSConfig == nil {\n\t\tif e.Listener == nil {\n\t\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\te.Listener = l\n\t\t}\n\t\tif !e.HidePort {\n\t\t\te.colorer.Printf(\"⇨ http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n\t\t}\n\t\treturn nil\n\t}\n\tif e.TLSListener == nil {\n\t\tl, err := newListener(s.Addr, e.ListenerNetwork)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.TLSListener = tls.NewListener(l, s.TLSConfig)\n\t}\n\tif !e.HidePort {\n\t\te.colorer.Printf(\"⇨ https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Serve(l net.Listener) error {\n\tif fn := testHookServerServe; fn != nil {\n\t\tfn(srv, l) // call hook with unwrapped listener\n\t}\n\n\torigListener := l\n\tl = \u0026onceCloseListener{Listener: l}\n\tdefer l.Close()\n\n\tif err := srv.setupHTTP2_Serve(); err != nil {\n\t\treturn err\n\t}\n\n\tif !srv.trackListener(\u0026l, true) {\n\t\treturn ErrServerClosed\n\t}\n\tdefer srv.trackListener(\u0026l, false)\n\n\tbaseCtx := context.Background()\n\tif srv.BaseContext != nil {\n\t\tbaseCtx = srv.BaseContext(origListener)\n\t\tif baseCtx == nil {\n\t\t\tpanic(\"BaseContext returned a nil context\")\n\t\t}\n\t}\n\n\tvar tempDelay time.Duration // how long to sleep on accept failure\n\n\tctx := context.WithValue(baseCtx, ServerContextKey, srv)\n\tfor {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif srv.shuttingDown() {\n\t\t\t\treturn ErrServerClosed\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok \u0026\u0026 ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay \u003e max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\tsrv.logf(\"http: Accept error: %v; retrying in %v\", err, tempDelay)\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tconnCtx := ctx\n\t\tif cc := srv.ConnContext; cc != nil {\n\t\t\tconnCtx = cc(connCtx, rw)\n\t\t\tif connCtx == nil {\n\t\t\t\tpanic(\"ConnContext returned nil\")\n\t\t\t}\n\t\t}\n\t\ttempDelay = 0\n\t\tc := srv.newConn(rw)\n\t\tc.setState(c.rwc, StateNew, runHooks) // before Serve can return\n\t\tgo c.serve(connCtx)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        759,
        760,
        761,
        762,
        763,
        764,
        765,
        766,
        767,
        768,
        769,
        770
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "github.com/labstack/echo/v4/group_fs.go:FileFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        }
      ],
      "name": "FileFS",
      "signature": "(g *Group) FileFS (path, file string, filesystem fs.FS, m ...MiddlewareFunc) *Route",
      "ground_truth": "func (g *Group) FileFS(path, file string, filesystem fs.FS, m ...MiddlewareFunc) *Route {\n\treturn g.GET(path, StaticFileHandler(file, filesystem), m...)\n}",
      "function_comment": "// FileFS implements `Echo#FileFS()` for sub-routes within the Group.",
      "function_statement": "// FileFS implements `Echo#FileFS()` for sub-routes within the Group.",
      "start_line": 31,
      "end_line": 33,
      "file_path": "./group_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "Group struct {\n\tcommon\n\thost       string\n\tprefix     string\n\techo       *Echo\n\tmiddleware []MiddlewareFunc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Route struct {\n\tMethod string `json:\"method\"`\n\tPath   string `json:\"path\"`\n\tName   string `json:\"name\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/group.go",
          "code_snippet": "func (g *Group) GET(path string, h HandlerFunc, m ...MiddlewareFunc) *Route {\n\treturn g.Add(http.MethodGet, path, h, m...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func StaticFileHandler(file string, filesystem fs.FS) HandlerFunc {\n\treturn func(c Context) error {\n\t\treturn fsFile(c, file, filesystem)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        31,
        32,
        33
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:uintValue",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_errorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Uint64_uintValue"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "uintValue",
      "signature": "(b *ValueBinder) uintValue (sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) uintValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.uint(sourceParam, value, dest, bitSize)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 731,
      "end_line": 745,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uint(sourceParam string, value string, dest interface{}, bitSize int) *ValueBinder {\n\tn, err := strconv.ParseUint(value, 10, bitSize)\n\tif err != nil {\n\t\tif bitSize == 0 {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to uint\", err))\n\t\t} else {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, fmt.Sprintf(\"failed to bind field value to uint%v\", bitSize), err))\n\t\t}\n\t\treturn b\n\t}\n\n\tswitch d := dest.(type) {\n\tcase *uint64:\n\t\t*d = n\n\tcase *uint32:\n\t\t*d = uint32(n)\n\tcase *uint16:\n\t\t*d = uint16(n)\n\tcase *uint8: // byte is alias to uint8\n\t\t*d = uint8(n)\n\tcase *uint:\n\t\t*d = uint(n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        731,
        732,
        733,
        734,
        736,
        737,
        738,
        739,
        740,
        741,
        744
      ],
      "cover_details": {
        "line_cover_rate": 0.7333333333333333
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:MustSubFS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_StaticPanic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "MustSubFS",
      "signature": "MustSubFS (currentFs fs.FS, fsRoot string) fs.FS",
      "ground_truth": "func MustSubFS(currentFs fs.FS, fsRoot string) fs.FS {\n\tsubFs, err := subFS(currentFs, fsRoot)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"can not create sub FS, invalid root given, err: %w\", err))\n\t}\n\treturn subFs\n}",
      "function_comment": "// MustSubFS creates sub FS from current filesystem or panic on failure.\n// Panic happens when `fsRoot` contains invalid path according to `fs.ValidPath` rules.\n//\n// MustSubFS is helpful when dealing with `embed.FS` because for example `//go:embed assets/images` embeds files with\n// paths including `assets/images` as their prefix. In that case use `fs := echo.MustSubFS(fs, \"rootDirectory\") to\n// create sub fs which uses necessary prefix for directory path.",
      "function_statement": "// MustSubFS creates sub FS from current filesystem or panic on failure.\n// Panic happens when `fsRoot` contains invalid path according to `fs.ValidPath` rules.\n//\n// MustSubFS is helpful when dealing with `embed.FS` because for example `//go:embed assets/images` embeds files with\n// paths including `assets/images` as their prefix. In that case use `fs := echo.MustSubFS(fs, \"rootDirectory\") to\n// create sub fs which uses necessary prefix for directory path.",
      "start_line": 147,
      "end_line": 153,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func subFS(currentFs fs.FS, root string) (fs.FS, error) {\n\troot = filepath.ToSlash(filepath.Clean(root)) // note: fs.FS operates only with slashes. `ToSlash` is necessary for Windows\n\tif dFS, ok := currentFs.(*defaultFS); ok {\n\t\t// we need to make exception for `defaultFS` instances as it interprets root prefix differently from fs.FS.\n\t\t// fs.Fs.Open does not like relative paths (\"./\", \"../\") and absolute paths at all but prior echo.Filesystem we\n\t\t// were able to use paths like `./myfile.log`, `/etc/hosts` and these would work fine with `os.Open` but not with fs.Fs\n\t\tif !filepath.IsAbs(root) {\n\t\t\troot = filepath.Join(dFS.prefix, root)\n\t\t}\n\t\treturn \u0026defaultFS{\n\t\t\tprefix: root,\n\t\t\tfs:     os.DirFS(root),\n\t\t}, nil\n\t}\n\treturn fs.Sub(currentFs, root)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        147,
        148,
        149,
        150,
        152
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:sanitizeURI",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        }
      ],
      "name": "sanitizeURI",
      "signature": "sanitizeURI (uri string) string",
      "ground_truth": "func sanitizeURI(uri string) string {\n\t// double slash `\\\\`, `//` or even `\\/` is absolute uri for browsers and by redirecting request to that uri\n\t// we are vulnerable to open redirect attack. so replace all slashes from the beginning with single slash\n\tif len(uri) \u003e 1 \u0026\u0026 (uri[0] == '\\\\' || uri[0] == '/') \u0026\u0026 (uri[1] == '\\\\' || uri[1] == '/') {\n\t\turi = \"/\" + strings.TrimLeft(uri, `/\\`)\n\t}\n\treturn uri\n}",
      "function_comment": "// MustSubFS creates sub FS from current filesystem or panic on failure.\n// Panic happens when `fsRoot` contains invalid path according to `fs.ValidPath` rules.\n//\n// MustSubFS is helpful when dealing with `embed.FS` because for example `//go:embed assets/images` embeds files with\n// paths including `assets/images` as their prefix. In that case use `fs := echo.MustSubFS(fs, \"rootDirectory\") to",
      "function_statement": "// MustSubFS creates sub FS from current filesystem or panic on failure.\n// Panic happens when `fsRoot` contains invalid path according to `fs.ValidPath` rules.\n//\n// MustSubFS is helpful when dealing with `embed.FS` because for example `//go:embed assets/images` embeds files with\n// paths including `assets/images` as their prefix. In that case use `fs := echo.MustSubFS(fs, \"rootDirectory\") to",
      "start_line": 155,
      "end_line": 162,
      "file_path": "./echo_fs.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimLeft(s, cutset string) string {\n\tif s == \"\" || cutset == \"\" {\n\t\treturn s\n\t}\n\tif len(cutset) == 1 \u0026\u0026 cutset[0] \u003c utf8.RuneSelf {\n\t\treturn trimLeftByte(s, cutset[0])\n\t}\n\tif as, ok := makeASCIISet(cutset); ok {\n\t\treturn trimLeftASCII(s, \u0026as)\n\t}\n\treturn trimLeftUnicode(s, cutset)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        155,
        156,
        157,
        158,
        161
      ],
      "cover_details": {
        "line_cover_rate": 0.625
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:Shutdown",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoShutdown"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        }
      ],
      "name": "Shutdown",
      "signature": "(e *Echo) Shutdown (ctx stdContext.Context) error",
      "ground_truth": "func (e *Echo) Shutdown(ctx stdContext.Context) error {\n\te.startupMutex.Lock()\n\tdefer e.startupMutex.Unlock()\n\tif err := e.TLSServer.Shutdown(ctx); err != nil {\n\t\treturn err\n\t}\n\treturn e.Server.Shutdown(ctx)\n}",
      "function_comment": "// Shutdown stops the server gracefully.\n// It internally calls `http.Server#Shutdown()`.",
      "function_statement": "// Shutdown stops the server gracefully.\n// It internally calls `http.Server#Shutdown()`.",
      "start_line": 877,
      "end_line": 884,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// Canceled if the context was canceled\n\t// or DeadlineExceeded if the context's deadline passed.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n\t// First, resolve competition with other writers.\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 \u0026\u0026 rw.readerWait.Add(r) != 0 {\n\t\truntime_SemacquireRWMutex(\u0026rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(\u0026rw.writerSem))\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/rwmutex.go",
          "code_snippet": "func (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(\u0026rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n\tr := rw.readerCount.Add(rwmutexMaxReaders)\n\tif r \u003e= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tfatal(\"sync: Unlock of unlocked RWMutex\")\n\t}\n\t// Unblock blocked readers, if any.\n\tfor i := 0; i \u003c int(r); i++ {\n\t\truntime_Semrelease(\u0026rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "func (srv *Server) Shutdown(ctx context.Context) error {\n\tsrv.inShutdown.Store(true)\n\n\tsrv.mu.Lock()\n\tlnerr := srv.closeListenersLocked()\n\tfor _, f := range srv.onShutdown {\n\t\tgo f()\n\t}\n\tsrv.mu.Unlock()\n\tsrv.listenerGroup.Wait()\n\n\tpollIntervalBase := time.Millisecond\n\tnextPollInterval := func() time.Duration {\n\t\t// Add 10% jitter.\n\t\tinterval := pollIntervalBase + time.Duration(rand.Intn(int(pollIntervalBase/10)))\n\t\t// Double and clamp for next time.\n\t\tpollIntervalBase *= 2\n\t\tif pollIntervalBase \u003e shutdownPollIntervalMax {\n\t\t\tpollIntervalBase = shutdownPollIntervalMax\n\t\t}\n\t\treturn interval\n\t}\n\n\ttimer := time.NewTimer(nextPollInterval())\n\tdefer timer.Stop()\n\tfor {\n\t\tif srv.closeIdleConns() {\n\t\t\treturn lnerr\n\t\t}\n\t\tselect {\n\t\tcase \u003c-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase \u003c-timer.C:\n\t\t\ttimer.Reset(nextPollInterval())\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        877,
        878,
        879,
        880,
        883
      ],
      "cover_details": {
        "line_cover_rate": 0.625
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/timeout.go:TimeoutWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSkipper"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "TimeoutWithConfig",
      "signature": "TimeoutWithConfig (config TimeoutConfig) echo.MiddlewareFunc",
      "ground_truth": "func TimeoutWithConfig(config TimeoutConfig) echo.MiddlewareFunc {\n\tmw, err := config.ToMiddleware()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn mw\n}",
      "function_comment": "// TimeoutWithConfig returns a Timeout middleware with config or panics on invalid configuration.",
      "function_statement": "// TimeoutWithConfig returns a Timeout middleware with config or panics on invalid configuration.",
      "start_line": 97,
      "end_line": 103,
      "file_path": "./middleware/timeout.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "TimeoutConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// ErrorMessage is written to response on timeout in addition to http.StatusServiceUnavailable (503) status code\n\t// It can be used to define a custom timeout error message\n\tErrorMessage string\n\n\t// OnTimeoutRouteErrorHandler is an error handler that is executed for error that was returned from wrapped route after\n\t// request timeouted and we already had sent the error code (503) and message response to the client.\n\t// NB: do not write headers/body inside this handler. The response has already been sent to the client and response writer\n\t// will not accept anything no more. If you want to know what actual route middleware timeouted use `c.Path()`\n\tOnTimeoutRouteErrorHandler func(err error, c echo.Context)\n\n\t// Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n\t// NOTE: when difference between timeout duration and handler execution time is almost the same (in range of 100microseconds)\n\t// the result of timeout does not seem to be reliable - could respond timeout, could respond handler output\n\t// difference over 500microseconds (0.5millisecond) response seems to be reliable\n\tTimeout time.Duration\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/timeout.go",
          "code_snippet": "func (config TimeoutConfig) ToMiddleware() (echo.MiddlewareFunc, error) {\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultTimeoutConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) || config.Timeout == 0 {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\terrChan := make(chan error, 1)\n\t\t\thandlerWrapper := echoHandlerFuncWrapper{\n\t\t\t\twriter:     \u0026ignorableWriter{ResponseWriter: c.Response().Writer},\n\t\t\t\tctx:        c,\n\t\t\t\thandler:    next,\n\t\t\t\terrChan:    errChan,\n\t\t\t\terrHandler: config.OnTimeoutRouteErrorHandler,\n\t\t\t}\n\t\t\thandler := http.TimeoutHandler(handlerWrapper, config.Timeout, config.ErrorMessage)\n\t\t\thandler.ServeHTTP(handlerWrapper.writer, c.Request())\n\n\t\t\tselect {\n\t\t\tcase err := \u003c-errChan:\n\t\t\t\treturn err\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}, nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        97,
        98,
        99,
        102
      ],
      "cover_details": {
        "line_cover_rate": 0.5714285714285714
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustBindUnmarshaler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_BindUnmarshaler"
        }
      ],
      "name": "MustBindUnmarshaler",
      "signature": "(b *ValueBinder) MustBindUnmarshaler (sourceParam string, dest BindUnmarshaler) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustBindUnmarshaler(sourceParam string, dest BindUnmarshaler) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\treturn b\n\t}\n\n\tif err := dest.UnmarshalParam(value); err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to BindUnmarshaler interface\", err))\n\t}\n\treturn b\n}",
      "function_comment": "// MustBindUnmarshaler requires parameter value to exist to bind to destination implementing BindUnmarshaler interface.\n// Returns error when value does not exist",
      "function_statement": "// MustBindUnmarshaler requires parameter value to exist to bind to destination implementing BindUnmarshaler interface.\n// Returns error when value does not exist",
      "start_line": 314,
      "end_line": 329,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/bind.go",
          "code_snippet": "BindUnmarshaler interface {\n\t// UnmarshalParam decodes and assigns a value from an form or query param.\n\tUnmarshalParam(param string) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        314,
        315,
        316,
        317,
        319,
        320,
        321,
        322,
        323,
        325,
        326,
        327,
        328
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Uint32s",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Uint32s",
      "signature": "(b *ValueBinder) Uint32s (sourceParam string, dest *[]uint32) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Uint32s(sourceParam string, dest *[]uint32) *ValueBinder {\n\treturn b.uintsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Uint32s binds parameter to slice of uint32",
      "function_statement": "// Uint32s binds parameter to slice of uint32",
      "start_line": 860,
      "end_line": 862,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) uintsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.uints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint32 uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        860,
        861,
        862
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/ip.go:ExtractIPFromXFFHeader",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "ip_test.go",
          "func_name": "TestExtractIPFromXFFHeader"
        }
      ],
      "name": "ExtractIPFromXFFHeader",
      "signature": "ExtractIPFromXFFHeader (options ...TrustOption) IPExtractor",
      "ground_truth": "func ExtractIPFromXFFHeader(options ...TrustOption) IPExtractor {\n\tchecker := newIPChecker(options)\n\treturn func(req *http.Request) string {\n\t\tdirectIP := extractIP(req)\n\t\txffs := req.Header[HeaderXForwardedFor]\n\t\tif len(xffs) == 0 {\n\t\t\treturn directIP\n\t\t}\n\t\tips := append(strings.Split(strings.Join(xffs, \",\"), \",\"), directIP)\n\t\tfor i := len(ips) - 1; i \u003e= 0; i-- {\n\t\t\tips[i] = strings.TrimSpace(ips[i])\n\t\t\tips[i] = strings.TrimPrefix(ips[i], \"[\")\n\t\t\tips[i] = strings.TrimSuffix(ips[i], \"]\")\n\t\t\tip := net.ParseIP(ips[i])\n\t\t\tif ip == nil {\n\t\t\t\t// Unable to parse IP; cannot trust entire records\n\t\t\t\treturn directIP\n\t\t\t}\n\t\t\tif !checker.trust(ip) {\n\t\t\t\treturn ip.String()\n\t\t\t}\n\t\t}\n\t\t// All of the IPs are trusted; return first element because it is furthest from server (best effort strategy).\n\t\treturn strings.TrimSpace(ips[0])\n\t}\n}",
      "function_comment": "// ExtractIPFromXFFHeader extracts IP address using x-forwarded-for header.\n// Use this if you put proxy which uses this header.\n// This returns nearest untrustable IP. If all IPs are trustable, returns furthest one (i.e.: XFF[0]).",
      "function_statement": "// ExtractIPFromXFFHeader extracts IP address using x-forwarded-for header.\n// Use this if you put proxy which uses this header.\n// This returns nearest untrustable IP. If all IPs are trustable, returns furthest one (i.e.: XFF[0]).",
      "start_line": 258,
      "end_line": 283,
      "file_path": "./ip.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "TrustOption func(*ipChecker)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "IPExtractor func(*http.Request) string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func newIPChecker(configs []TrustOption) *ipChecker {\n\tchecker := \u0026ipChecker{trustLoopback: true, trustLinkLocal: true, trustPrivateNet: true}\n\tfor _, configure := range configs {\n\t\tconfigure(checker)\n\t}\n\treturn checker\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func extractIP(req *http.Request) string {\n\thost, _, err := net.SplitHostPort(req.RemoteAddr)\n\tif err != nil {\n\t\tif net.ParseIP(req.RemoteAddr) != nil {\n\t\t\treturn req.RemoteAddr\n\t\t}\n\t\treturn \"\"\n\t}\n\treturn host\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedFor       = \"X-Forwarded-For\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/ip.go",
          "code_snippet": "func (c *ipChecker) trust(ip net.IP) bool {\n\tif c.trustLoopback \u0026\u0026 ip.IsLoopback() {\n\t\treturn true\n\t}\n\tif c.trustLinkLocal \u0026\u0026 ip.IsLinkLocalUnicast() {\n\t\treturn true\n\t}\n\tif c.trustPrivateNet \u0026\u0026 isPrivateIPRange(ip) {\n\t\treturn true\n\t}\n\tfor _, trustedRange := range c.trustExtraRanges {\n\t\tif trustedRange.Contains(ip) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Split(s, sep string) []string { return genSplit(s, sep, 0, -1) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Join(elems []string, sep string) string {\n\tswitch len(elems) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn elems[0]\n\t}\n\n\tvar n int\n\tif len(sep) \u003e 0 {\n\t\tif len(sep) \u003e= maxInt/(len(elems)-1) {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(sep) * (len(elems) - 1)\n\t}\n\tfor _, elem := range elems {\n\t\tif len(elem) \u003e maxInt-n {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(elem)\n\t}\n\n\tvar b Builder\n\tb.Grow(n)\n\tb.WriteString(elems[0])\n\tfor _, s := range elems[1:] {\n\t\tb.WriteString(sep)\n\t\tb.WriteString(s)\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimSpace(s string) string {\n\t// Fast path for ASCII: look for the first ASCII non-space byte\n\tstart := 0\n\tfor ; start \u003c len(s); start++ {\n\t\tc := s[start]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// If we run into a non-ASCII byte, fall back to the\n\t\t\t// slower unicode-aware method on the remaining bytes\n\t\t\treturn TrimFunc(s[start:], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Now look for the first ASCII non-space byte from the end\n\tstop := len(s)\n\tfor ; stop \u003e start; stop-- {\n\t\tc := s[stop-1]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// start has been already trimmed above, should trim end only\n\t\t\treturn TrimRightFunc(s[start:stop], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// At this point s[start:stop] starts and ends with an ASCII\n\t// non-space bytes, so we're done. Non-ASCII cases have already\n\t// been handled above.\n\treturn s[start:stop]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimPrefix(s, prefix string) string {\n\treturn stringslite.TrimPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimSuffix(s, suffix string) string {\n\treturn stringslite.TrimSuffix(s, suffix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func ParseIP(s string) IP {\n\tif addr, valid := parseIP(s); valid {\n\t\treturn IP(addr[:])\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/ip.go",
          "code_snippet": "func (ip IP) String() string {\n\tif len(ip) == 0 {\n\t\treturn \"\u003cnil\u003e\"\n\t}\n\n\tif len(ip) != IPv4len \u0026\u0026 len(ip) != IPv6len {\n\t\treturn \"?\" + hexString(ip)\n\t}\n\t// If IPv4, use dotted notation.\n\tif p4 := ip.To4(); len(p4) == IPv4len {\n\t\treturn netip.AddrFrom4([4]byte(p4)).String()\n\t}\n\treturn netip.AddrFrom16([16]byte(ip)).String()\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        281
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/compress.go:bufferPool",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturnedInvalidConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        }
      ],
      "name": "bufferPool",
      "signature": "bufferPool () sync.Pool",
      "ground_truth": "func bufferPool() sync.Pool {\n\treturn sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\tb := \u0026bytes.Buffer{}\n\t\t\treturn b\n\t\t},\n\t}\n}",
      "function_comment": "// GzipWithConfig return Gzip middleware with config.",
      "function_statement": "// GzipWithConfig return Gzip middleware with config.",
      "start_line": 223,
      "end_line": 230,
      "file_path": "./middleware/compress.go",
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        223,
        224,
        225,
        226,
        227,
        228
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt8",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustInt8",
      "signature": "(b *ValueBinder) MustInt8 (sourceParam string, dest *int8) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt8(sourceParam string, dest *int8) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 8, true)\n}",
      "function_comment": "// MustInt8 requires parameter value to exist to bind to int8 variable. Returns error when value does not exist",
      "function_statement": "// MustInt8 requires parameter value to exist to bind to int8 variable. Returns error when value does not exist",
      "start_line": 489,
      "end_line": 491,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int8 int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        489,
        490,
        491
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Redirect",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        }
      ],
      "name": "Redirect",
      "signature": "(c *context) Redirect (code int, url string) error",
      "ground_truth": "func (c *context) Redirect(code int, url string) error {\n\tif code \u003c 300 || code \u003e 308 {\n\t\treturn ErrInvalidRedirectCode\n\t}\n\tc.response.Header().Set(HeaderLocation, url)\n\tc.response.WriteHeader(code)\n\treturn nil\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 610,
      "end_line": 617,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrInvalidRedirectCode    = errors.New(\"invalid redirect status code\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderLocation            = \"Location\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) WriteHeader(code int) {\n\tif r.Committed {\n\t\tr.echo.Logger.Warn(\"response already committed\")\n\t\treturn\n\t}\n\tr.Status = code\n\tfor _, fn := range r.beforeFuncs {\n\t\tfn()\n\t}\n\tr.Writer.WriteHeader(r.Status)\n\tr.Committed = true\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        610,
        611,
        612,
        613,
        614,
        615,
        616
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:URL",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoURL"
        }
      ],
      "name": "URL",
      "signature": "(e *Echo) URL (h HandlerFunc, params ...interface{}) string",
      "ground_truth": "func (e *Echo) URL(h HandlerFunc, params ...interface{}) string {\n\treturn e.URI(h, params...)\n}",
      "function_comment": "// URL is an alias for `URI` function.",
      "function_statement": "// URL is an alias for `URI` function.",
      "start_line": 619,
      "end_line": 621,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) URI(handler HandlerFunc, params ...interface{}) string {\n\tname := handlerName(handler)\n\treturn e.Reverse(name, params...)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        619,
        620,
        621
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:After",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        }
      ],
      "name": "After",
      "signature": "(r *Response) After (fn func())",
      "ground_truth": "func (r *Response) After(fn func()) {\n\tr.afterFuncs = append(r.afterFuncs, fn)\n}",
      "function_comment": "// After registers a function which is called just after the response is written.\n// If the `Content-Length` is unknown, none of the after function is executed.",
      "function_statement": "// After registers a function which is called just after the response is written.\n// If the `Content-Length` is unknown, none of the after function is executed.",
      "start_line": 49,
      "end_line": 51,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        49,
        50,
        51
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/method_override.go:MethodOverride",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/method_override_test.go",
          "func_name": "TestMethodOverride"
        }
      ],
      "name": "MethodOverride",
      "signature": "MethodOverride () echo.MiddlewareFunc",
      "ground_truth": "func MethodOverride() echo.MiddlewareFunc {\n\treturn MethodOverrideWithConfig(DefaultMethodOverrideConfig)\n}",
      "function_comment": "// MethodOverride returns a MethodOverride middleware.\n// MethodOverride  middleware checks for the overridden method from the request and\n// uses it instead of the original method.\n//\n// For security reasons, only `POST` method can be overridden.",
      "function_statement": "// MethodOverride returns a MethodOverride middleware.\n// MethodOverride  middleware checks for the overridden method from the request and\n// uses it instead of the original method.\n//\n// For security reasons, only `POST` method can be overridden.",
      "start_line": 36,
      "end_line": 38,
      "file_path": "./middleware/method_override.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "func MethodOverrideWithConfig(config MethodOverrideConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultMethodOverrideConfig.Skipper\n\t}\n\tif config.Getter == nil {\n\t\tconfig.Getter = DefaultMethodOverrideConfig.Getter\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tif req.Method == http.MethodPost {\n\t\t\t\tm := config.Getter(c)\n\t\t\t\tif m != \"\" {\n\t\t\t\t\treq.Method = m\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/method_override.go",
          "code_snippet": "DefaultMethodOverrideConfig = MethodOverrideConfig{\n\tSkipper: DefaultSkipper,\n\tGetter:  MethodFromHeader(echo.HeaderXHTTPMethodOverride),\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        36,
        37,
        38
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/secure.go:SecureWithConfig",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/secure_test.go",
          "func_name": "TestSecure"
        }
      ],
      "name": "SecureWithConfig",
      "signature": "SecureWithConfig (config SecureConfig) echo.MiddlewareFunc",
      "ground_truth": "func SecureWithConfig(config SecureConfig) echo.MiddlewareFunc {\n\t// Defaults\n\tif config.Skipper == nil {\n\t\tconfig.Skipper = DefaultSecureConfig.Skipper\n\t}\n\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tif config.Skipper(c) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\n\t\t\treq := c.Request()\n\t\t\tres := c.Response()\n\n\t\t\tif config.XSSProtection != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderXXSSProtection, config.XSSProtection)\n\t\t\t}\n\t\t\tif config.ContentTypeNosniff != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderXContentTypeOptions, config.ContentTypeNosniff)\n\t\t\t}\n\t\t\tif config.XFrameOptions != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderXFrameOptions, config.XFrameOptions)\n\t\t\t}\n\t\t\tif (c.IsTLS() || (req.Header.Get(echo.HeaderXForwardedProto) == \"https\")) \u0026\u0026 config.HSTSMaxAge != 0 {\n\t\t\t\tsubdomains := \"\"\n\t\t\t\tif !config.HSTSExcludeSubdomains {\n\t\t\t\t\tsubdomains = \"; includeSubdomains\"\n\t\t\t\t}\n\t\t\t\tif config.HSTSPreloadEnabled {\n\t\t\t\t\tsubdomains = fmt.Sprintf(\"%s; preload\", subdomains)\n\t\t\t\t}\n\t\t\t\tres.Header().Set(echo.HeaderStrictTransportSecurity, fmt.Sprintf(\"max-age=%d%s\", config.HSTSMaxAge, subdomains))\n\t\t\t}\n\t\t\tif config.ContentSecurityPolicy != \"\" {\n\t\t\t\tif config.CSPReportOnly {\n\t\t\t\t\tres.Header().Set(echo.HeaderContentSecurityPolicyReportOnly, config.ContentSecurityPolicy)\n\t\t\t\t} else {\n\t\t\t\t\tres.Header().Set(echo.HeaderContentSecurityPolicy, config.ContentSecurityPolicy)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif config.ReferrerPolicy != \"\" {\n\t\t\t\tres.Header().Set(echo.HeaderReferrerPolicy, config.ReferrerPolicy)\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n}",
      "function_comment": "// SecureWithConfig returns a Secure middleware with config.\n// See: `Secure()`.",
      "function_statement": "// SecureWithConfig returns a Secure middleware with config.\n// See: `Secure()`.",
      "start_line": 97,
      "end_line": 144,
      "file_path": "./middleware/secure.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/secure.go",
          "code_snippet": "SecureConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// XSSProtection provides protection against cross-site scripting attack (XSS)\n\t// by setting the `X-XSS-Protection` header.\n\t// Optional. Default value \"1; mode=block\".\n\tXSSProtection string `yaml:\"xss_protection\"`\n\n\t// ContentTypeNosniff provides protection against overriding Content-Type\n\t// header by setting the `X-Content-Type-Options` header.\n\t// Optional. Default value \"nosniff\".\n\tContentTypeNosniff string `yaml:\"content_type_nosniff\"`\n\n\t// XFrameOptions can be used to indicate whether or not a browser should\n\t// be allowed to render a page in a \u003cframe\u003e, \u003ciframe\u003e or \u003cobject\u003e .\n\t// Sites can use this to avoid clickjacking attacks, by ensuring that their\n\t// content is not embedded into other sites.provides protection against\n\t// clickjacking.\n\t// Optional. Default value \"SAMEORIGIN\".\n\t// Possible values:\n\t// - \"SAMEORIGIN\" - The page can only be displayed in a frame on the same origin as the page itself.\n\t// - \"DENY\" - The page cannot be displayed in a frame, regardless of the site attempting to do so.\n\t// - \"ALLOW-FROM uri\" - The page can only be displayed in a frame on the specified origin.\n\tXFrameOptions string `yaml:\"x_frame_options\"`\n\n\t// HSTSMaxAge sets the `Strict-Transport-Security` header to indicate how\n\t// long (in seconds) browsers should remember that this site is only to\n\t// be accessed using HTTPS. This reduces your exposure to some SSL-stripping\n\t// man-in-the-middle (MITM) attacks.\n\t// Optional. Default value 0.\n\tHSTSMaxAge int `yaml:\"hsts_max_age\"`\n\n\t// HSTSExcludeSubdomains won't include subdomains tag in the `Strict Transport Security`\n\t// header, excluding all subdomains from security policy. It has no effect\n\t// unless HSTSMaxAge is set to a non-zero value.\n\t// Optional. Default value false.\n\tHSTSExcludeSubdomains bool `yaml:\"hsts_exclude_subdomains\"`\n\n\t// ContentSecurityPolicy sets the `Content-Security-Policy` header providing\n\t// security against cross-site scripting (XSS), clickjacking and other code\n\t// injection attacks resulting from execution of malicious content in the\n\t// trusted web page context.\n\t// Optional. Default value \"\".\n\tContentSecurityPolicy string `yaml:\"content_security_policy\"`\n\n\t// CSPReportOnly would use the `Content-Security-Policy-Report-Only` header instead\n\t// of the `Content-Security-Policy` header. This allows iterative updates of the\n\t// content security policy by only reporting the violations that would\n\t// have occurred instead of blocking the resource.\n\t// Optional. Default value false.\n\tCSPReportOnly bool `yaml:\"csp_report_only\"`\n\n\t// HSTSPreloadEnabled will add the preload tag in the `Strict Transport Security`\n\t// header, which enables the domain to be included in the HSTS preload list\n\t// maintained by Chrome (and used by Firefox and Safari): https://hstspreload.org/\n\t// Optional.  Default value false.\n\tHSTSPreloadEnabled bool `yaml:\"hsts_preload_enabled\"`\n\n\t// ReferrerPolicy sets the `Referrer-Policy` header providing security against\n\t// leaking potentially sensitive request paths to third parties.\n\t// Optional. Default value \"\".\n\tReferrerPolicy string `yaml:\"referrer_policy\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "MiddlewareFunc func(next HandlerFunc) HandlerFunc",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/secure.go",
          "code_snippet": "DefaultSecureConfig = SecureConfig{\n\tSkipper:            DefaultSkipper,\n\tXSSProtection:      \"1; mode=block\",\n\tContentTypeNosniff: \"nosniff\",\n\tXFrameOptions:      \"SAMEORIGIN\",\n\tHSTSPreloadEnabled: false,\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXXSSProtection                  = \"X-XSS-Protection\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXContentTypeOptions             = \"X-Content-Type-Options\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXFrameOptions                   = \"X-Frame-Options\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderXForwardedProto     = \"X-Forwarded-Proto\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderStrictTransportSecurity         = \"Strict-Transport-Security\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentSecurityPolicyReportOnly = \"Content-Security-Policy-Report-Only\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderContentSecurityPolicy           = \"Content-Security-Policy\"",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HeaderReferrerPolicy                  = \"Referrer-Policy\"",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Get(key string) string {\n\treturn textproto.MIMEHeader(h).Get(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        131,
        132,
        133,
        134,
        135,
        136,
        138,
        139,
        140,
        141
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustInt",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Int_Types"
        }
      ],
      "name": "MustInt",
      "signature": "(b *ValueBinder) MustInt (sourceParam string, dest *int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustInt(sourceParam string, dest *int) *ValueBinder {\n\treturn b.intValue(sourceParam, dest, 0, true)\n}",
      "function_comment": "// MustInt requires parameter value to exist to bind to int variable. Returns error when value does not exist",
      "function_statement": "// MustInt requires parameter value to exist to bind to int variable. Returns error when value does not exist",
      "start_line": 499,
      "end_line": 501,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intValue(sourceParam string, dest interface{}, bitSize int, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\treturn b.int(sourceParam, value, dest, bitSize)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        499,
        500,
        501
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:Ints",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types_FailFast"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Ints_Types"
        }
      ],
      "name": "Ints",
      "signature": "(b *ValueBinder) Ints (sourceParam string, dest *[]int) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) Ints(sourceParam string, dest *[]int) *ValueBinder {\n\treturn b.intsValue(sourceParam, dest, false)\n}",
      "function_comment": "// Ints binds parameter to slice of int",
      "function_statement": "// Ints binds parameter to slice of int",
      "start_line": 662,
      "end_line": 664,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) intsValue(sourceParam string, dest interface{}, valueMustExist bool) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalues := b.ValuesFunc(sourceParam)\n\tif len(values) == 0 {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, values, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\treturn b.ints(sourceParam, values, dest)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        662,
        663,
        664
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/context.go:Logger",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_Logger"
        }
      ],
      "name": "Logger",
      "signature": "(c *context) Logger () Logger",
      "ground_truth": "func (c *context) Logger() Logger {\n\tres := c.logger\n\tif res != nil {\n\t\treturn res\n\t}\n\treturn c.echo.Logger\n}",
      "function_comment": "// Context represents the context of the current HTTP request. It holds request and",
      "function_statement": "// Context represents the context of the current HTTP request. It holds request and",
      "start_line": 635,
      "end_line": 641,
      "file_path": "./context.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/log.go",
          "code_snippet": "Logger interface {\n\tOutput() io.Writer\n\tSetOutput(w io.Writer)\n\tPrefix() string\n\tSetPrefix(p string)\n\tLevel() log.Lvl\n\tSetLevel(v log.Lvl)\n\tSetHeader(h string)\n\tPrint(i ...interface{})\n\tPrintf(format string, args ...interface{})\n\tPrintj(j log.JSON)\n\tDebug(i ...interface{})\n\tDebugf(format string, args ...interface{})\n\tDebugj(j log.JSON)\n\tInfo(i ...interface{})\n\tInfof(format string, args ...interface{})\n\tInfoj(j log.JSON)\n\tWarn(i ...interface{})\n\tWarnf(format string, args ...interface{})\n\tWarnj(j log.JSON)\n\tError(i ...interface{})\n\tErrorf(format string, args ...interface{})\n\tErrorj(j log.JSON)\n\tFatal(i ...interface{})\n\tFatalj(j log.JSON)\n\tFatalf(format string, args ...interface{})\n\tPanic(i ...interface{})\n\tPanicj(j log.JSON)\n\tPanicf(format string, args ...interface{})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        635,
        636,
        637,
        638,
        639,
        640
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:ServeHTTP",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGroup"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        }
      ],
      "name": "ServeHTTP",
      "signature": "(e *Echo) ServeHTTP (w http.ResponseWriter, r *http.Request)",
      "ground_truth": "func (e *Echo) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Acquire context\n\tc := e.pool.Get().(*context)\n\tc.Reset(r, w)\n\tvar h HandlerFunc\n\n\tif e.premiddleware == nil {\n\t\te.findRouter(r.Host).Find(r.Method, GetPath(r), c)\n\t\th = c.Handler()\n\t\th = applyMiddleware(h, e.middleware...)\n\t} else {\n\t\th = func(c Context) error {\n\t\t\te.findRouter(r.Host).Find(r.Method, GetPath(r), c)\n\t\t\th := c.Handler()\n\t\t\th = applyMiddleware(h, e.middleware...)\n\t\t\treturn h(c)\n\t\t}\n\t\th = applyMiddleware(h, e.premiddleware...)\n\t}\n\n\t// Execute chain\n\tif err := h(c); err != nil {\n\t\te.HTTPErrorHandler(err, c)\n\t}\n\n\t// Release context\n\te.pool.Put(c)\n}",
      "function_comment": "// ServeHTTP implements `http.Handler` interface, which serves HTTP requests.",
      "function_statement": "// ServeHTTP implements `http.Handler` interface, which serves HTTP requests.",
      "start_line": 647,
      "end_line": 674,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "context struct {\n\tlogger   Logger\n\trequest  *http.Request\n\tresponse *Response\n\tquery    url.Values\n\techo     *Echo\n\n\tstore Map\n\tlock  sync.RWMutex\n\n\t// following fields are set by Router\n\thandler HandlerFunc\n\n\t// path is route path that Router matched. It is empty string where there is no route match.\n\t// Route registered with RouteNotFound is considered as a match and path therefore is not empty.\n\tpath string\n\n\t// Usually echo.Echo is sizing pvalues but there could be user created middlewares that decide to\n\t// overwrite parameter by calling SetParamNames + SetParamValues.\n\t// When echo.Echo allocated that slice it length/capacity is tied to echo.Echo.maxParam value.\n\t//\n\t// It is important that pvalues size is always equal or bigger to pnames length.\n\tpvalues []string\n\n\t// pnames length is tied to param count for the matched route\n\tpnames []string\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Reset(r *http.Request, w http.ResponseWriter) {\n\tc.request = r\n\tc.response.reset(w)\n\tc.query = nil\n\tc.handler = NotFoundHandler\n\tc.store = nil\n\tc.path = \"\"\n\tc.pnames = nil\n\tc.logger = nil\n\t// NOTE: Don't reset because it has to have length c.echo.maxParam (or bigger) at all times\n\tfor i := 0; i \u003c len(c.pvalues); i++ {\n\t\tc.pvalues[i] = \"\"\n\t}\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/router.go",
          "code_snippet": "func (r *Router) Find(method, path string, c Context) {\n\tctx := c.(*context)\n\tcurrentNode := r.tree // Current node as root\n\n\tvar (\n\t\tpreviousBestMatchNode *node\n\t\tmatchedRouteMethod    *routeMethod\n\t\t// search stores the remaining path to check for match. By each iteration we move from start of path to end of the path\n\t\t// and search value gets shorter and shorter.\n\t\tsearch      = path\n\t\tsearchIndex = 0\n\t\tparamIndex  int           // Param counter\n\t\tparamValues = ctx.pvalues // Use the internal slice so the interface can keep the illusion of a dynamic slice\n\t)\n\n\t// Backtracking is needed when a dead end (leaf node) is reached in the router tree.\n\t// To backtrack the current node will be changed to the parent node and the next kind for the\n\t// router logic will be returned based on fromKind or kind of the dead end node (static \u003e param \u003e any).\n\t// For example if there is no static node match we should check parent next sibling by kind (param).\n\t// Backtracking itself does not check if there is a next sibling, this is done by the router logic.\n\tbacktrackToNextNodeKind := func(fromKind kind) (nextNodeKind kind, valid bool) {\n\t\tprevious := currentNode\n\t\tcurrentNode = previous.parent\n\t\tvalid = currentNode != nil\n\n\t\t// Next node type by priority\n\t\tif previous.kind == anyKind {\n\t\t\tnextNodeKind = staticKind\n\t\t} else {\n\t\t\tnextNodeKind = previous.kind + 1\n\t\t}\n\n\t\tif fromKind == staticKind {\n\t\t\t// when backtracking is done from static kind block we did not change search so nothing to restore\n\t\t\treturn\n\t\t}\n\n\t\t// restore search to value it was before we move to current node we are backtracking from.\n\t\tif previous.kind == staticKind {\n\t\t\tsearchIndex -= len(previous.prefix)\n\t\t} else {\n\t\t\tparamIndex--\n\t\t\t// for param/any node.prefix value is always `:` so we can not deduce searchIndex from that and must use pValue\n\t\t\t// for that index as it would also contain part of path we cut off before moving into node we are backtracking from\n\t\t\tsearchIndex -= len(paramValues[paramIndex])\n\t\t\tparamValues[paramIndex] = \"\"\n\t\t}\n\t\tsearch = path[searchIndex:]\n\t\treturn\n\t}\n\n\t// Router tree is implemented by longest common prefix array (LCP array) https://en.wikipedia.org/wiki/LCP_array\n\t// Tree search is implemented as for loop where one loop iteration is divided into 3 separate blocks\n\t// Each of these blocks checks specific kind of node (static/param/any). Order of blocks reflex their priority in routing.\n\t// Search order/priority is: static \u003e param \u003e any.\n\t//\n\t// Note: backtracking in tree is implemented by replacing/switching currentNode to previous node\n\t// and hoping to (goto statement) next block by priority to check if it is the match.\n\tfor {\n\t\tprefixLen := 0 // Prefix length\n\t\tlcpLen := 0    // LCP (longest common prefix) length\n\n\t\tif currentNode.kind == staticKind {\n\t\t\tsearchLen := len(search)\n\t\t\tprefixLen = len(currentNode.prefix)\n\n\t\t\t// LCP - Longest Common Prefix (https://en.wikipedia.org/wiki/LCP_array)\n\t\t\tmax := prefixLen\n\t\t\tif searchLen \u003c max {\n\t\t\t\tmax = searchLen\n\t\t\t}\n\t\t\tfor ; lcpLen \u003c max \u0026\u0026 search[lcpLen] == currentNode.prefix[lcpLen]; lcpLen++ {\n\t\t\t}\n\t\t}\n\n\t\tif lcpLen != prefixLen {\n\t\t\t// No matching prefix, let's backtrack to the first possible alternative node of the decision path\n\t\t\tnk, ok := backtrackToNextNodeKind(staticKind)\n\t\t\tif !ok {\n\t\t\t\treturn // No other possibilities on the decision path, handler will be whatever context is reset to.\n\t\t\t} else if nk == paramKind {\n\t\t\t\tgoto Param\n\t\t\t\t// NOTE: this case (backtracking from static node to previous any node) can not happen by current any matching logic. Any node is end of search currently\n\t\t\t\t//} else if nk == anyKind {\n\t\t\t\t//\tgoto Any\n\t\t\t} else {\n\t\t\t\t// Not found (this should never be possible for static node we are looking currently)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// The full prefix has matched, remove the prefix from the remaining search\n\t\tsearch = search[lcpLen:]\n\t\tsearchIndex = searchIndex + lcpLen\n\n\t\t// Finish routing if is no request path remaining to search\n\t\tif search == \"\" {\n\t\t\t// in case of node that is handler we have exact method type match or something for 405 to use\n\t\t\tif currentNode.isHandler {\n\t\t\t\t// check if current node has handler registered for http method we are looking for. we store currentNode as\n\t\t\t\t// best matching in case we do no find no more routes matching this path+method\n\t\t\t\tif previousBestMatchNode == nil {\n\t\t\t\t\tpreviousBestMatchNode = currentNode\n\t\t\t\t}\n\t\t\t\tif h := currentNode.findMethod(method); h != nil {\n\t\t\t\t\tmatchedRouteMethod = h\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t} else if currentNode.notFoundHandler != nil {\n\t\t\t\tmatchedRouteMethod = currentNode.notFoundHandler\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Static node\n\t\tif search != \"\" {\n\t\t\tif child := currentNode.findStaticChild(search[0]); child != nil {\n\t\t\t\tcurrentNode = child\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\tParam:\n\t\t// Param node\n\t\tif child := currentNode.paramChild; search != \"\" \u0026\u0026 child != nil {\n\t\t\tcurrentNode = child\n\t\t\ti := 0\n\t\t\tl := len(search)\n\t\t\tif currentNode.isLeaf {\n\t\t\t\t// when param node does not have any children (path param is last piece of route path) then param node should\n\t\t\t\t// act similarly to any node - consider all remaining search as match\n\t\t\t\ti = l\n\t\t\t} else {\n\t\t\t\tfor ; i \u003c l \u0026\u0026 search[i] != '/'; i++ {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparamValues[paramIndex] = search[:i]\n\t\t\tparamIndex++\n\t\t\tsearch = search[i:]\n\t\t\tsearchIndex = searchIndex + i\n\t\t\tcontinue\n\t\t}\n\n\tAny:\n\t\t// Any node\n\t\tif child := currentNode.anyChild; child != nil {\n\t\t\t// If any node is found, use remaining path for paramValues\n\t\t\tcurrentNode = child\n\t\t\tparamValues[currentNode.paramsCount-1] = search\n\n\t\t\t// update indexes/search in case we need to backtrack when no handler match is found\n\t\t\tparamIndex++\n\t\t\tsearchIndex += +len(search)\n\t\t\tsearch = \"\"\n\n\t\t\tif h := currentNode.findMethod(method); h != nil {\n\t\t\t\tmatchedRouteMethod = h\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// we store currentNode as best matching in case we do not find more routes matching this path+method. Needed for 405\n\t\t\tif previousBestMatchNode == nil {\n\t\t\t\tpreviousBestMatchNode = currentNode\n\t\t\t}\n\t\t\tif currentNode.notFoundHandler != nil {\n\t\t\t\tmatchedRouteMethod = currentNode.notFoundHandler\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Let's backtrack to the first possible alternative node of the decision path\n\t\tnk, ok := backtrackToNextNodeKind(anyKind)\n\t\tif !ok {\n\t\t\tbreak // No other possibilities on the decision path\n\t\t} else if nk == paramKind {\n\t\t\tgoto Param\n\t\t} else if nk == anyKind {\n\t\t\tgoto Any\n\t\t} else {\n\t\t\t// Not found\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif currentNode == nil \u0026\u0026 previousBestMatchNode == nil {\n\t\treturn // nothing matched at all\n\t}\n\n\t// matchedHandler could be method+path handler that we matched or notFoundHandler from node with matching path\n\t// user provided not found (404) handler has priority over generic method not found (405) handler or global 404 handler\n\tvar rPath string\n\tvar rPNames []string\n\tif matchedRouteMethod != nil {\n\t\trPath = matchedRouteMethod.ppath\n\t\trPNames = matchedRouteMethod.pnames\n\t\tctx.handler = matchedRouteMethod.handler\n\t} else {\n\t\t// use previous match as basis. although we have no matching handler we have path match.\n\t\t// so we can send http.StatusMethodNotAllowed (405) instead of http.StatusNotFound (404)\n\t\tcurrentNode = previousBestMatchNode\n\n\t\trPath = currentNode.originalPath\n\t\trPNames = nil // no params here\n\t\tctx.handler = NotFoundHandler\n\t\tif currentNode.notFoundHandler != nil {\n\t\t\trPath = currentNode.notFoundHandler.ppath\n\t\t\trPNames = currentNode.notFoundHandler.pnames\n\t\t\tctx.handler = currentNode.notFoundHandler.handler\n\t\t} else if currentNode.isHandler {\n\t\t\tctx.Set(ContextKeyHeaderAllow, currentNode.methods.allowHeader)\n\t\t\tctx.handler = MethodNotAllowedHandler\n\t\t\tif method == http.MethodOptions {\n\t\t\t\tctx.handler = optionsMethodHandler(currentNode.methods.allowHeader)\n\t\t\t}\n\t\t}\n\t}\n\tctx.path = rPath\n\tctx.pnames = rPNames\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func (e *Echo) findRouter(host string) *Router {\n\tif len(e.routers) \u003e 0 {\n\t\tif r, ok := e.routers[host]; ok {\n\t\t\treturn r\n\t\t}\n\t}\n\treturn e.router\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func GetPath(r *http.Request) string {\n\tpath := r.URL.RawPath\n\tif path == \"\" {\n\t\tpath = r.URL.Path\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "func (c *context) Handler() HandlerFunc {\n\treturn c.handler\n}",
          "ref_module": "v4"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "func applyMiddleware(h HandlerFunc, middleware ...MiddlewareFunc) HandlerFunc {\n\tfor i := len(middleware) - 1; i \u003e= 0; i-- {\n\t\th = middleware[i](h)\n\t}\n\treturn h\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Get() any {\n\tif race.Enabled {\n\t\trace.Disable()\n\t}\n\tl, pid := p.pin()\n\tx := l.private\n\tl.private = nil\n\tif x == nil {\n\t\t// Try to pop the head of the local shard. We prefer\n\t\t// the head over the tail for temporal locality of\n\t\t// reuse.\n\t\tx, _ = l.shared.popHead()\n\t\tif x == nil {\n\t\t\tx = p.getSlow(pid)\n\t\t}\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t\tif x != nil {\n\t\t\trace.Acquire(poolRaceAddr(x))\n\t\t}\n\t}\n\tif x == nil \u0026\u0026 p.New != nil {\n\t\tx = p.New()\n\t}\n\treturn x\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/sync/pool.go",
          "code_snippet": "func (p *Pool) Put(x any) {\n\tif x == nil {\n\t\treturn\n\t}\n\tif race.Enabled {\n\t\tif runtime_randn(4) == 0 {\n\t\t\t// Randomly drop x on floor.\n\t\t\treturn\n\t\t}\n\t\trace.ReleaseMerge(poolRaceAddr(x))\n\t\trace.Disable()\n\t}\n\tl, _ := p.pin()\n\tif l.private == nil {\n\t\tl.private = x\n\t} else {\n\t\tl.shared.pushHead(x)\n\t}\n\truntime_procUnpin()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        647,
        648,
        649,
        650,
        651,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        659,
        660,
        661,
        662,
        663,
        664,
        668,
        669,
        670,
        673
      ],
      "cover_details": {
        "line_cover_rate": 0.7857142857142857
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:MustStrings",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_Strings"
        }
      ],
      "name": "MustStrings",
      "signature": "(b *ValueBinder) MustStrings (sourceParam string, dest *[]string) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) MustStrings(sourceParam string, dest *[]string) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValuesFunc(sourceParam)\n\tif value == nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{}, \"required field value is empty\", nil))\n\t\treturn b\n\t}\n\t*dest = value\n\treturn b\n}",
      "function_comment": "// MustStrings requires parameter values to exist to bind to slice of string variables. Returns error when value does not exist",
      "function_statement": "// MustStrings requires parameter values to exist to bind to slice of string variables. Returns error when value does not exist",
      "start_line": 281,
      "end_line": 293,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) setError(err error) {\n\tif b.errors == nil {\n\t\tb.errors = []error{err}\n\t\treturn\n\t}\n\tb.errors = append(b.errors, err)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        281,
        282,
        283,
        284,
        286,
        287,
        288,
        289,
        290,
        291,
        292
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "github.com/labstack/echo/v4/binder.go:UnixTimeNano",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "binder_test.go",
          "func_name": "TestValueBinder_UnixTimeNano"
        }
      ],
      "name": "UnixTimeNano",
      "signature": "(b *ValueBinder) UnixTimeNano (sourceParam string, dest *time.Time) *ValueBinder",
      "ground_truth": "func (b *ValueBinder) UnixTimeNano(sourceParam string, dest *time.Time) *ValueBinder {\n\treturn b.unixTime(sourceParam, dest, false, time.Nanosecond)\n}",
      "function_comment": "// UnixTimeNano binds parameter to time.Time variable (in local time corresponding to the given Unix time in nanosecond precision).\n//\n// Example: 1609180603123456789 binds to 2020-12-28T18:36:43.123456789+00:00\n// Example:          1000000000 binds to 1970-01-01T00:00:01.000000000+00:00\n// Example:           999999999 binds to 1970-01-01T00:00:00.999999999+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal\n//   - Javascript's Number type only has about 53 bits of precision (Number.MAX_SAFE_INTEGER = 9007199254740991). Compare it to 1609180603123456789 in example.",
      "function_statement": "// UnixTimeNano binds parameter to time.Time variable (in local time corresponding to the given Unix time in nanosecond precision).\n//\n// Example: 1609180603123456789 binds to 2020-12-28T18:36:43.123456789+00:00\n// Example:          1000000000 binds to 1970-01-01T00:00:01.000000000+00:00\n// Example:           999999999 binds to 1970-01-01T00:00:00.999999999+00:00\n//\n// Note:\n//   - time.Time{} (param is empty) and time.Unix(0,0) (param = \"0\") are not equal\n//   - Javascript's Number type only has about 53 bits of precision (Number.MAX_SAFE_INTEGER = 9007199254740991). Compare it to 1609180603123456789 in example.",
      "start_line": 1287,
      "end_line": 1289,
      "file_path": "./binder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "ValueBinder struct {\n\t// ValueFunc is used to get single parameter (first) value from request\n\tValueFunc func(sourceParam string) string\n\t// ValuesFunc is used to get all values for parameter from request. i.e. `/api/search?ids=1\u0026ids=2`\n\tValuesFunc func(sourceParam string) []string\n\t// ErrorFunc is used to create errors. Allows you to use your own error type, that for example marshals to your specific json response\n\tErrorFunc func(sourceParam string, values []string, message interface{}, internalError error) error\n\terrors    []error\n\t// failFast is flag for binding methods to return without attempting to bind when previous binding already failed\n\tfailFast bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/binder.go",
          "code_snippet": "func (b *ValueBinder) unixTime(sourceParam string, dest *time.Time, valueMustExist bool, precision time.Duration) *ValueBinder {\n\tif b.failFast \u0026\u0026 b.errors != nil {\n\t\treturn b\n\t}\n\n\tvalue := b.ValueFunc(sourceParam)\n\tif value == \"\" {\n\t\tif valueMustExist {\n\t\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"required field value is empty\", nil))\n\t\t}\n\t\treturn b\n\t}\n\n\tn, err := strconv.ParseInt(value, 10, 64)\n\tif err != nil {\n\t\tb.setError(b.ErrorFunc(sourceParam, []string{value}, \"failed to bind field value to Time\", err))\n\t\treturn b\n\t}\n\n\tswitch precision {\n\tcase time.Second:\n\t\t*dest = time.Unix(n, 0)\n\tcase time.Millisecond:\n\t\t*dest = time.UnixMilli(n)\n\tcase time.Nanosecond:\n\t\t*dest = time.Unix(0, n)\n\t}\n\treturn b\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Nanosecond  Duration = 1",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1287,
        1288,
        1289
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo_fs.go:StaticDirectoryHandler",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup"
        }
      ],
      "name": "StaticDirectoryHandler",
      "signature": "StaticDirectoryHandler (fileSystem fs.FS, disablePathUnescaping bool) HandlerFunc",
      "ground_truth": "func StaticDirectoryHandler(fileSystem fs.FS, disablePathUnescaping bool) HandlerFunc {\n\treturn func(c Context) error {\n\t\tp := c.Param(\"*\")\n\t\tif !disablePathUnescaping { // when router is already unescaping we do not want to do is twice\n\t\t\ttmpPath, err := url.PathUnescape(p)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to unescape path variable: %w\", err)\n\t\t\t}\n\t\t\tp = tmpPath\n\t\t}\n\n\t\t// fs.FS.Open() already assumes that file names are relative to FS root path and considers name with prefix `/` as invalid\n\t\tname := filepath.ToSlash(filepath.Clean(strings.TrimPrefix(p, \"/\")))\n\t\tfi, err := fs.Stat(fileSystem, name)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\n\t\t// If the request is for a directory and does not end with \"/\"\n\t\tp = c.Request().URL.Path // path must not be empty.\n\t\tif fi.IsDir() \u0026\u0026 len(p) \u003e 0 \u0026\u0026 p[len(p)-1] != '/' {\n\t\t\t// Redirect to ends with \"/\"\n\t\t\treturn c.Redirect(http.StatusMovedPermanently, sanitizeURI(p+\"/\"))\n\t\t}\n\t\treturn fsFile(c, name, fileSystem)\n\t}\n}",
      "function_comment": "// StaticDirectoryHandler creates handler function to serve files from provided file system\n// When disablePathUnescaping is set then file name from path is not unescaped and is served as is.",
      "function_statement": "// StaticDirectoryHandler creates handler function to serve files from provided file system\n// When disablePathUnescaping is set then file name from path is not unescaped and is served as is.",
      "start_line": 57,
      "end_line": 83,
      "file_path": "./echo_fs.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "HandlerFunc func(c Context) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "ErrNotFound                      = NewHTTPError(http.StatusNotFound)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo_fs.go",
          "code_snippet": "func sanitizeURI(uri string) string {\n\t// double slash `\\\\`, `//` or even `\\/` is absolute uri for browsers and by redirecting request to that uri\n\t// we are vulnerable to open redirect attack. so replace all slashes from the beginning with single slash\n\tif len(uri) \u003e 1 \u0026\u0026 (uri[0] == '\\\\' || uri[0] == '/') \u0026\u0026 (uri[1] == '\\\\' || uri[1] == '/') {\n\t\turi = \"/\" + strings.TrimLeft(uri, `/\\`)\n\t}\n\treturn uri\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context_fs.go",
          "code_snippet": "func fsFile(c Context, file string, filesystem fs.FS) error {\n\tf, err := filesystem.Open(file)\n\tif err != nil {\n\t\treturn ErrNotFound\n\t}\n\tdefer f.Close()\n\n\tfi, _ := f.Stat()\n\tif fi.IsDir() {\n\t\tfile = filepath.ToSlash(filepath.Join(file, indexPage)) // ToSlash is necessary for Windows. fs.Open and os.Open are different in that aspect.\n\t\tf, err = filesystem.Open(file)\n\t\tif err != nil {\n\t\t\treturn ErrNotFound\n\t\t}\n\t\tdefer f.Close()\n\t\tif fi, err = f.Stat(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tff, ok := f.(io.ReadSeeker)\n\tif !ok {\n\t\treturn errors.New(\"file does not implement io.ReadSeeker\")\n\t}\n\thttp.ServeContent(c.Response(), c.Request(), fi.Name(), fi.ModTime(), ff)\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FS interface {\n\t// Open opens the named file.\n\t//\n\t// When Open returns an error, it should be of type *PathError\n\t// with the Op field set to \"open\", the Path field set to name,\n\t// and the Err field describing the problem.\n\t//\n\t// Open should reject attempts to open names that do not satisfy\n\t// ValidPath(name), returning a *PathError with Err set to\n\t// ErrInvalid or ErrNotExist.\n\tOpen(name string) (File, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "func PathUnescape(s string) (string, error) {\n\treturn unescape(s, encodePathSegment)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func ToSlash(path string) string {\n\treturn filepathlite.ToSlash(path)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/path/filepath/path.go",
          "code_snippet": "func Clean(path string) string {\n\treturn filepathlite.Clean(path)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimPrefix(s, prefix string) string {\n\treturn stringslite.TrimPrefix(s, prefix)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/stat.go",
          "code_snippet": "func Stat(fsys FS, name string) (FileInfo, error) {\n\tif fsys, ok := fsys.(StatFS); ok {\n\t\treturn fsys.Stat(name)\n\t}\n\n\tfile, err := fsys.Open(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\treturn file.Stat()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/fs/fs.go",
          "code_snippet": "FileInfo interface {\n\tName() string       // base name of the file\n\tSize() int64        // length in bytes for regular files; system-dependent for others\n\tMode() FileMode     // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool        // abbreviation for Mode().IsDir()\n\tSys() any           // underlying data source (can return nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusMovedPermanently  = 301",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        69,
        70,
        71,
        72,
        73,
        76,
        77,
        78,
        79,
        80,
        81
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "github.com/labstack/echo/v4/echo.go:configureTLS",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartAutoTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSByteString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_StartTLS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_TLSListenerAddr"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        }
      ],
      "name": "configureTLS",
      "signature": "(e *Echo) configureTLS (address string)",
      "ground_truth": "func (e *Echo) configureTLS(address string) {\n\ts := e.TLSServer\n\ts.Addr = address\n\tif !e.DisableHTTP2 {\n\t\ts.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, \"h2\")\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 750,
      "end_line": 756,
      "file_path": "./echo.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/echo.go",
          "code_snippet": "Echo struct {\n\tfilesystem\n\tcommon\n\t// startupMutex is mutex to lock Echo instance access during server configuration and startup. Useful for to get\n\t// listener address info (on which interface/port was listener bound) without having data races.\n\tstartupMutex sync.RWMutex\n\tcolorer      *color.Color\n\n\t// premiddleware are middlewares that are run before routing is done. In case a pre-middleware returns\n\t// an error the router is not executed and the request will end up in the global error handler.\n\tpremiddleware []MiddlewareFunc\n\tmiddleware    []MiddlewareFunc\n\tmaxParam      *int\n\trouter        *Router\n\trouters       map[string]*Router\n\tpool          sync.Pool\n\n\tStdLogger        *stdLog.Logger\n\tServer           *http.Server\n\tTLSServer        *http.Server\n\tListener         net.Listener\n\tTLSListener      net.Listener\n\tAutoTLSManager   autocert.Manager\n\tHTTPErrorHandler HTTPErrorHandler\n\tBinder           Binder\n\tJSONSerializer   JSONSerializer\n\tValidator        Validator\n\tRenderer         Renderer\n\tLogger           Logger\n\tIPExtractor      IPExtractor\n\tListenerNetwork  string\n\n\t// OnAddRouteHandler is called when Echo adds new route to specific host router.\n\tOnAddRouteHandler func(host string, route Route, handler HandlerFunc, middleware []MiddlewareFunc)\n\tDisableHTTP2      bool\n\tDebug             bool\n\tHideBanner        bool\n\tHidePort          bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "Server struct {\n\t// Addr optionally specifies the TCP address for the server to listen on,\n\t// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n\t// The service names are defined in RFC 6335 and assigned by IANA.\n\t// See net.Dial for details of the address format.\n\tAddr string\n\n\tHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n\t// DisableGeneralOptionsHandler, if true, passes \"OPTIONS *\" requests to the Handler,\n\t// otherwise responds with 200 OK and Content-Length: 0.\n\tDisableGeneralOptionsHandler bool\n\n\t// TLSConfig optionally provides a TLS configuration for use\n\t// by ServeTLS and ListenAndServeTLS. Note that this value is\n\t// cloned by ServeTLS and ListenAndServeTLS, so it's not\n\t// possible to modify the configuration with methods like\n\t// tls.Config.SetSessionTicketKeys. To use\n\t// SetSessionTicketKeys, use Server.Serve with a TLS Listener\n\t// instead.\n\tTLSConfig *tls.Config\n\n\t// ReadTimeout is the maximum duration for reading the entire\n\t// request, including the body. A zero or negative value means\n\t// there will be no timeout.\n\t//\n\t// Because ReadTimeout does not let Handlers make per-request\n\t// decisions on each request body's acceptable deadline or\n\t// upload rate, most users will prefer to use\n\t// ReadHeaderTimeout. It is valid to use them both.\n\tReadTimeout time.Duration\n\n\t// ReadHeaderTimeout is the amount of time allowed to read\n\t// request headers. The connection's read deadline is reset\n\t// after reading the headers and the Handler can decide what\n\t// is considered too slow for the body. If zero, the value of\n\t// ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tReadHeaderTimeout time.Duration\n\n\t// WriteTimeout is the maximum duration before timing out\n\t// writes of the response. It is reset whenever a new\n\t// request's header is read. Like ReadTimeout, it does not\n\t// let Handlers make decisions on a per-request basis.\n\t// A zero or negative value means there will be no timeout.\n\tWriteTimeout time.Duration\n\n\t// IdleTimeout is the maximum amount of time to wait for the\n\t// next request when keep-alives are enabled. If zero, the value\n\t// of ReadTimeout is used. If negative, or if zero and ReadTimeout\n\t// is zero or negative, there is no timeout.\n\tIdleTimeout time.Duration\n\n\t// MaxHeaderBytes controls the maximum number of bytes the\n\t// server will read parsing the request header's keys and\n\t// values, including the request line. It does not limit the\n\t// size of the request body.\n\t// If zero, DefaultMaxHeaderBytes is used.\n\tMaxHeaderBytes int\n\n\t// TLSNextProto optionally specifies a function to take over\n\t// ownership of the provided TLS connection when an ALPN\n\t// protocol upgrade has occurred. The map key is the protocol\n\t// name negotiated. The Handler argument should be used to\n\t// handle HTTP requests and will initialize the Request's TLS\n\t// and RemoteAddr if not already set. The connection is\n\t// automatically closed when the function returns.\n\t// If TLSNextProto is not nil, HTTP/2 support is not enabled\n\t// automatically.\n\tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n\n\t// ConnState specifies an optional callback function that is\n\t// called when a client connection changes state. See the\n\t// ConnState type and associated constants for details.\n\tConnState func(net.Conn, ConnState)\n\n\t// ErrorLog specifies an optional logger for errors accepting\n\t// connections, unexpected behavior from handlers, and\n\t// underlying FileSystem errors.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BaseContext optionally specifies a function that returns\n\t// the base context for incoming requests on this server.\n\t// The provided Listener is the specific Listener that's\n\t// about to start accepting requests.\n\t// If BaseContext is nil, the default is context.Background().\n\t// If non-nil, it must return a non-nil context.\n\tBaseContext func(net.Listener) context.Context\n\n\t// ConnContext optionally specifies a function that modifies\n\t// the context used for a new connection c. The provided ctx\n\t// is derived from the base context and has a ServerContextKey\n\t// value.\n\tConnContext func(ctx context.Context, c net.Conn) context.Context\n\n\tinShutdown atomic.Bool // true when server is in shutdown\n\n\tdisableKeepAlives atomic.Bool\n\tnextProtoOnce     sync.Once // guards setupHTTP2_* init\n\tnextProtoErr      error     // result of http2.ConfigureServer if used\n\n\tmu         sync.Mutex\n\tlisteners  map[*net.Listener]struct{}\n\tactiveConn map[*conn]struct{}\n\tonShutdown []func()\n\n\tlistenerGroup sync.WaitGroup\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/crypto/tls/common.go",
          "code_snippet": "Config struct {\n\t// Rand provides the source of entropy for nonces and RSA blinding.\n\t// If Rand is nil, TLS uses the cryptographic random reader in package\n\t// crypto/rand.\n\t// The Reader must be safe for use by multiple goroutines.\n\tRand io.Reader\n\n\t// Time returns the current time as the number of seconds since the epoch.\n\t// If Time is nil, TLS uses time.Now.\n\tTime func() time.Time\n\n\t// Certificates contains one or more certificate chains to present to the\n\t// other side of the connection. The first certificate compatible with the\n\t// peer's requirements is selected automatically.\n\t//\n\t// Server configurations must set one of Certificates, GetCertificate or\n\t// GetConfigForClient. Clients doing client-authentication may set either\n\t// Certificates or GetClientCertificate.\n\t//\n\t// Note: if there are multiple Certificates, and they don't have the\n\t// optional field Leaf set, certificate selection will incur a significant\n\t// per-handshake performance cost.\n\tCertificates []Certificate\n\n\t// NameToCertificate maps from a certificate name to an element of\n\t// Certificates. Note that a certificate name can be of the form\n\t// '*.example.com' and so doesn't have to be a domain name as such.\n\t//\n\t// Deprecated: NameToCertificate only allows associating a single\n\t// certificate with a given name. Leave this field nil to let the library\n\t// select the first compatible chain from Certificates.\n\tNameToCertificate map[string]*Certificate\n\n\t// GetCertificate returns a Certificate based on the given\n\t// ClientHelloInfo. It will only be called if the client supplies SNI\n\t// information or if Certificates is empty.\n\t//\n\t// If GetCertificate is nil or returns nil, then the certificate is\n\t// retrieved from NameToCertificate. If NameToCertificate is nil, the\n\t// best element of Certificates will be used.\n\t//\n\t// Once a Certificate is returned it should not be modified.\n\tGetCertificate func(*ClientHelloInfo) (*Certificate, error)\n\n\t// GetClientCertificate, if not nil, is called when a server requests a\n\t// certificate from a client. If set, the contents of Certificates will\n\t// be ignored.\n\t//\n\t// If GetClientCertificate returns an error, the handshake will be\n\t// aborted and that error will be returned. Otherwise\n\t// GetClientCertificate must return a non-nil Certificate. If\n\t// Certificate.Certificate is empty then no certificate will be sent to\n\t// the server. If this is unacceptable to the server then it may abort\n\t// the handshake.\n\t//\n\t// GetClientCertificate may be called multiple times for the same\n\t// connection if renegotiation occurs or if TLS 1.3 is in use.\n\t//\n\t// Once a Certificate is returned it should not be modified.\n\tGetClientCertificate func(*CertificateRequestInfo) (*Certificate, error)\n\n\t// GetConfigForClient, if not nil, is called after a ClientHello is\n\t// received from a client. It may return a non-nil Config in order to\n\t// change the Config that will be used to handle this connection. If\n\t// the returned Config is nil, the original Config will be used. The\n\t// Config returned by this callback may not be subsequently modified.\n\t//\n\t// If GetConfigForClient is nil, the Config passed to Server() will be\n\t// used for all connections.\n\t//\n\t// If SessionTicketKey was explicitly set on the returned Config, or if\n\t// SetSessionTicketKeys was called on the returned Config, those keys will\n\t// be used. Otherwise, the original Config keys will be used (and possibly\n\t// rotated if they are automatically managed).\n\tGetConfigForClient func(*ClientHelloInfo) (*Config, error)\n\n\t// VerifyPeerCertificate, if not nil, is called after normal\n\t// certificate verification by either a TLS client or server. It\n\t// receives the raw ASN.1 certificates provided by the peer and also\n\t// any verified chains that normal processing found. If it returns a\n\t// non-nil error, the handshake is aborted and that error results.\n\t//\n\t// If normal verification fails then the handshake will abort before\n\t// considering this callback. If normal verification is disabled (on the\n\t// client when InsecureSkipVerify is set, or on a server when ClientAuth is\n\t// RequestClientCert or RequireAnyClientCert), then this callback will be\n\t// considered but the verifiedChains argument will always be nil. When\n\t// ClientAuth is NoClientCert, this callback is not called on the server.\n\t// rawCerts may be empty on the server if ClientAuth is RequestClientCert or\n\t// VerifyClientCertIfGiven.\n\t//\n\t// This callback is not invoked on resumed connections, as certificates are\n\t// not re-verified on resumption.\n\t//\n\t// verifiedChains and its contents should not be modified.\n\tVerifyPeerCertificate func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error\n\n\t// VerifyConnection, if not nil, is called after normal certificate\n\t// verification and after VerifyPeerCertificate by either a TLS client\n\t// or server. If it returns a non-nil error, the handshake is aborted\n\t// and that error results.\n\t//\n\t// If normal verification fails then the handshake will abort before\n\t// considering this callback. This callback will run for all connections,\n\t// including resumptions, regardless of InsecureSkipVerify or ClientAuth\n\t// settings.\n\tVerifyConnection func(ConnectionState) error\n\n\t// RootCAs defines the set of root certificate authorities\n\t// that clients use when verifying server certificates.\n\t// If RootCAs is nil, TLS uses the host's root CA set.\n\tRootCAs *x509.CertPool\n\n\t// NextProtos is a list of supported application level protocols, in\n\t// order of preference. If both peers support ALPN, the selected\n\t// protocol will be one from this list, and the connection will fail\n\t// if there is no mutually supported protocol. If NextProtos is empty\n\t// or the peer doesn't support ALPN, the connection will succeed and\n\t// ConnectionState.NegotiatedProtocol will be empty.\n\tNextProtos []string\n\n\t// ServerName is used to verify the hostname on the returned\n\t// certificates unless InsecureSkipVerify is given. It is also included\n\t// in the client's handshake to support virtual hosting unless it is\n\t// an IP address.\n\tServerName string\n\n\t// ClientAuth determines the server's policy for\n\t// TLS Client Authentication. The default is NoClientCert.\n\tClientAuth ClientAuthType\n\n\t// ClientCAs defines the set of root certificate authorities\n\t// that servers use if required to verify a client certificate\n\t// by the policy in ClientAuth.\n\tClientCAs *x509.CertPool\n\n\t// InsecureSkipVerify controls whether a client verifies the server's\n\t// certificate chain and host name. If InsecureSkipVerify is true, crypto/tls\n\t// accepts any certificate presented by the server and any host name in that\n\t// certificate. In this mode, TLS is susceptible to machine-in-the-middle\n\t// attacks unless custom verification is used. This should be used only for\n\t// testing or in combination with VerifyConnection or VerifyPeerCertificate.\n\tInsecureSkipVerify bool\n\n\t// CipherSuites is a list of enabled TLS 1.0–1.2 cipher suites. The order of\n\t// the list is ignored. Note that TLS 1.3 ciphersuites are not configurable.\n\t//\n\t// If CipherSuites is nil, a safe default list is used. The default cipher\n\t// suites might change over time. In Go 1.22 RSA key exchange based cipher\n\t// suites were removed from the default list, but can be re-added with the\n\t// GODEBUG setting tlsrsakex=1. In Go 1.23 3DES cipher suites were removed\n\t// from the default list, but can be re-added with the GODEBUG setting\n\t// tls3des=1.\n\tCipherSuites []uint16\n\n\t// PreferServerCipherSuites is a legacy field and has no effect.\n\t//\n\t// It used to control whether the server would follow the client's or the\n\t// server's preference. Servers now select the best mutually supported\n\t// cipher suite based on logic that takes into account inferred client\n\t// hardware, server hardware, and security.\n\t//\n\t// Deprecated: PreferServerCipherSuites is ignored.\n\tPreferServerCipherSuites bool\n\n\t// SessionTicketsDisabled may be set to true to disable session ticket and\n\t// PSK (resumption) support. Note that on clients, session ticket support is\n\t// also disabled if ClientSessionCache is nil.\n\tSessionTicketsDisabled bool\n\n\t// SessionTicketKey is used by TLS servers to provide session resumption.\n\t// See RFC 5077 and the PSK mode of RFC 8446. If zero, it will be filled\n\t// with random data before the first server handshake.\n\t//\n\t// Deprecated: if this field is left at zero, session ticket keys will be\n\t// automatically rotated every day and dropped after seven days. For\n\t// customizing the rotation schedule or synchronizing servers that are\n\t// terminating connections for the same host, use SetSessionTicketKeys.\n\tSessionTicketKey [32]byte\n\n\t// ClientSessionCache is a cache of ClientSessionState entries for TLS\n\t// session resumption. It is only used by clients.\n\tClientSessionCache ClientSessionCache\n\n\t// UnwrapSession is called on the server to turn a ticket/identity\n\t// previously produced by [WrapSession] into a usable session.\n\t//\n\t// UnwrapSession will usually either decrypt a session state in the ticket\n\t// (for example with [Config.EncryptTicket]), or use the ticket as a handle\n\t// to recover a previously stored state. It must use [ParseSessionState] to\n\t// deserialize the session state.\n\t//\n\t// If UnwrapSession returns an error, the connection is terminated. If it\n\t// returns (nil, nil), the session is ignored. crypto/tls may still choose\n\t// not to resume the returned session.\n\tUnwrapSession func(identity []byte, cs ConnectionState) (*SessionState, error)\n\n\t// WrapSession is called on the server to produce a session ticket/identity.\n\t//\n\t// WrapSession must serialize the session state with [SessionState.Bytes].\n\t// It may then encrypt the serialized state (for example with\n\t// [Config.DecryptTicket]) and use it as the ticket, or store the state and\n\t// return a handle for it.\n\t//\n\t// If WrapSession returns an error, the connection is terminated.\n\t//\n\t// Warning: the return value will be exposed on the wire and to clients in\n\t// plaintext. The application is in charge of encrypting and authenticating\n\t// it (and rotating keys) or returning high-entropy identifiers. Failing to\n\t// do so correctly can compromise current, previous, and future connections\n\t// depending on the protocol version.\n\tWrapSession func(ConnectionState, *SessionState) ([]byte, error)\n\n\t// MinVersion contains the minimum TLS version that is acceptable.\n\t//\n\t// By default, TLS 1.2 is currently used as the minimum. TLS 1.0 is the\n\t// minimum supported by this package.\n\t//\n\t// The server-side default can be reverted to TLS 1.0 by including the value\n\t// \"tls10server=1\" in the GODEBUG environment variable.\n\tMinVersion uint16\n\n\t// MaxVersion contains the maximum TLS version that is acceptable.\n\t//\n\t// By default, the maximum version supported by this package is used,\n\t// which is currently TLS 1.3.\n\tMaxVersion uint16\n\n\t// CurvePreferences contains the elliptic curves that will be used in\n\t// an ECDHE handshake, in preference order. If empty, the default will\n\t// be used. The client will use the first preference as the type for\n\t// its key share in TLS 1.3. This may change in the future.\n\t//\n\t// From Go 1.23, the default includes the X25519Kyber768Draft00 hybrid\n\t// post-quantum key exchange. To disable it, set CurvePreferences explicitly\n\t// or use the GODEBUG=tlskyber=0 environment variable.\n\tCurvePreferences []CurveID\n\n\t// DynamicRecordSizingDisabled disables adaptive sizing of TLS records.\n\t// When true, the largest possible TLS record size is always used. When\n\t// false, the size of TLS records may be adjusted in an attempt to\n\t// improve latency.\n\tDynamicRecordSizingDisabled bool\n\n\t// Renegotiation controls what types of renegotiation are supported.\n\t// The default, none, is correct for the vast majority of applications.\n\tRenegotiation RenegotiationSupport\n\n\t// KeyLogWriter optionally specifies a destination for TLS master secrets\n\t// in NSS key log format that can be used to allow external programs\n\t// such as Wireshark to decrypt TLS connections.\n\t// See https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format.\n\t// Use of KeyLogWriter compromises security and should only be\n\t// used for debugging.\n\tKeyLogWriter io.Writer\n\n\t// EncryptedClientHelloConfigList is a serialized ECHConfigList. If\n\t// provided, clients will attempt to connect to servers using Encrypted\n\t// Client Hello (ECH) using one of the provided ECHConfigs. Servers\n\t// currently ignore this field.\n\t//\n\t// If the list contains no valid ECH configs, the handshake will fail\n\t// and return an error.\n\t//\n\t// If EncryptedClientHelloConfigList is set, MinVersion, if set, must\n\t// be VersionTLS13.\n\t//\n\t// When EncryptedClientHelloConfigList is set, the handshake will only\n\t// succeed if ECH is sucessfully negotiated. If the server rejects ECH,\n\t// an ECHRejectionError error will be returned, which may contain a new\n\t// ECHConfigList that the server suggests using.\n\t//\n\t// How this field is parsed may change in future Go versions, if the\n\t// encoding described in the final Encrypted Client Hello RFC changes.\n\tEncryptedClientHelloConfigList []byte\n\n\t// EncryptedClientHelloRejectionVerify, if not nil, is called when ECH is\n\t// rejected, in order to verify the ECH provider certificate in the outer\n\t// Client Hello. If it returns a non-nil error, the handshake is aborted and\n\t// that error results.\n\t//\n\t// Unlike VerifyPeerCertificate and VerifyConnection, normal certificate\n\t// verification will not be performed before calling\n\t// EncryptedClientHelloRejectionVerify.\n\t//\n\t// If EncryptedClientHelloRejectionVerify is nil and ECH is rejected, the\n\t// roots in RootCAs will be used to verify the ECH providers public\n\t// certificate. VerifyPeerCertificate and VerifyConnection are not called\n\t// when ECH is rejected, even if set, and InsecureSkipVerify is ignored.\n\tEncryptedClientHelloRejectionVerify func(ConnectionState) error\n\n\t// mutex protects sessionTicketKeys and autoSessionTicketKeys.\n\tmutex sync.RWMutex\n\t// sessionTicketKeys contains zero or more ticket keys. If set, it means\n\t// the keys were set with SessionTicketKey or SetSessionTicketKeys. The\n\t// first key is used for new tickets and any subsequent keys can be used to\n\t// decrypt old tickets. The slice contents are not protected by the mutex\n\t// and are immutable.\n\tsessionTicketKeys []ticketKey\n\t// autoSessionTicketKeys is like sessionTicketKeys but is owned by the\n\t// auto-rotation logic. See Config.ticketKeys.\n\tautoSessionTicketKeys []ticketKey\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        750,
        751,
        752,
        753,
        754,
        755
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "github.com/labstack/echo/v4/renderer.go:Render",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        }
      ],
      "name": "Render",
      "signature": "(t *TemplateRenderer) Render (w io.Writer, name string, data interface{}, c Context) error",
      "ground_truth": "func (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, c Context) error {\n\treturn t.Template.ExecuteTemplate(w, name, data)\n}",
      "function_comment": "// Render renders the template with given data.",
      "function_statement": "// Render renders the template with given data.",
      "start_line": 27,
      "end_line": 29,
      "file_path": "./renderer.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/renderer.go",
          "code_snippet": "TemplateRenderer struct {\n\tTemplate interface {\n\t\tExecuteTemplate(wr io.Writer, name string, data any) error\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        27,
        28,
        29
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/middleware.go:DefaultSkipper",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/basic_auth_test.go",
          "func_name": "TestBasicAuthRealm"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDump"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_dump_test.go",
          "func_name": "TestBodyDumpFails"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimit"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/body_limit_test.go",
          "func_name": "TestBodyLimitWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithResponseWithoutBody"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzip"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthTooShort"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLength"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthChunked"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithMinLengthNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturnedInvalidConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/context_timeout_test.go",
          "func_name": "TestContextTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipEmpty"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/compress_test.go",
          "func_name": "TestGzipWithStatic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORSWithConfig_AllowMethods"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginScheme"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFSetSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "Test_allowOriginSubdomain"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithoutSameSiteMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressDefaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCorsHeaders"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressNoContent"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRF_tokenExtractors"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteDefaultMode"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/cors_test.go",
          "func_name": "TestCORS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressErrorReturned"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/decompress_test.go",
          "func_name": "TestDecompressPoolError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFWithSameSiteModeNone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/csrf_test.go",
          "func_name": "TestCSRFErrorHandling"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuth"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/method_override_test.go",
          "func_name": "TestMethodOverride"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig_ContinueOnIgnoredError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplateWithTimeUnixMicro"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplateWithTimeUnixMilli"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerCustomTagFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestFailNextTarget"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestTargetProvider"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerIPAddress"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRealIPHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLogger"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerCustomTimestamp"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/logger_test.go",
          "func_name": "TestLoggerTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewriteRegex"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRewrite"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxy"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiter"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestModifyResponseUseContext"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetries"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultDenyHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_defaultConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyRetryWithBackendTimeout"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rate_limiter_test.go",
          "func_name": "TestRateLimiterWithConfig_beforeFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverErrAbortHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestClientCancelConnectionResultsHTTPCode499"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecover"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithConfig_LogErrorFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectHTTPSNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithConfig_LogLevel"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestRedirectNonWWWRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/recover_test.go",
          "func_name": "TestRecoverWithDisabled_ErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID_IDNotAltered"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/redirect_test.go",
          "func_name": "TestNonWWWRedirectWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_id_test.go",
          "func_name": "TestRequestIDConfigDifferentHeader"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteAfterRouting"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewritePreMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketNonTLS2TLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithCaret"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestRewriteWithConfigPreMiddleware_Issue1143"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteWithRegexRules"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/rewrite_test.go",
          "func_name": "TestEchoRewriteReplacementEscaping"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/proxy_test.go",
          "func_name": "TestProxyWithConfigWebSocketTLS2NonTLS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestAddTrailingSlash"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_beforeNextFunc"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/secure_test.go",
          "func_name": "TestSecure"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlashWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/slash_test.go",
          "func_name": "TestRemoveTrailingSlash"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_LogValuesFuncError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLoggerWithConfig"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithTimeout0"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_ID"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_logError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_headerIsCaseInsensitive"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_HandleError"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutTestRequestClone"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutSuccessfulRequest"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutErrorOutInHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutDataRace"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic_CustomFS"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutOnTimeoutRouteErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithDefaultErrorMessage"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutCanHandleContextDeadlineOnNextHandler"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutRecoversPanic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/static_test.go",
          "func_name": "TestStatic"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/request_logger_test.go",
          "func_name": "TestRequestLogger_allFields"
        },
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/timeout_test.go",
          "func_name": "TestTimeoutWithFullEchoStack"
        }
      ],
      "name": "DefaultSkipper",
      "signature": "DefaultSkipper (echo.Context) bool",
      "ground_truth": "func DefaultSkipper(echo.Context) bool {\n\treturn false\n}",
      "function_comment": "// DefaultSkipper returns false which processes the middleware.",
      "function_statement": "// DefaultSkipper returns false which processes the middleware.",
      "start_line": 88,
      "end_line": 90,
      "file_path": "./middleware/middleware.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/context.go",
          "code_snippet": "Context interface {\n\t// Request returns `*http.Request`.\n\tRequest() *http.Request\n\n\t// SetRequest sets `*http.Request`.\n\tSetRequest(r *http.Request)\n\n\t// SetResponse sets `*Response`.\n\tSetResponse(r *Response)\n\n\t// Response returns `*Response`.\n\tResponse() *Response\n\n\t// IsTLS returns true if HTTP connection is TLS otherwise false.\n\tIsTLS() bool\n\n\t// IsWebSocket returns true if HTTP connection is WebSocket otherwise false.\n\tIsWebSocket() bool\n\n\t// Scheme returns the HTTP protocol scheme, `http` or `https`.\n\tScheme() string\n\n\t// RealIP returns the client's network address based on `X-Forwarded-For`\n\t// or `X-Real-IP` request header.\n\t// The behavior can be configured using `Echo#IPExtractor`.\n\tRealIP() string\n\n\t// Path returns the registered path for the handler.\n\tPath() string\n\n\t// SetPath sets the registered path for the handler.\n\tSetPath(p string)\n\n\t// Param returns path parameter by name.\n\tParam(name string) string\n\n\t// ParamNames returns path parameter names.\n\tParamNames() []string\n\n\t// SetParamNames sets path parameter names.\n\tSetParamNames(names ...string)\n\n\t// ParamValues returns path parameter values.\n\tParamValues() []string\n\n\t// SetParamValues sets path parameter values.\n\tSetParamValues(values ...string)\n\n\t// QueryParam returns the query param for the provided name.\n\tQueryParam(name string) string\n\n\t// QueryParams returns the query parameters as `url.Values`.\n\tQueryParams() url.Values\n\n\t// QueryString returns the URL query string.\n\tQueryString() string\n\n\t// FormValue returns the form field value for the provided name.\n\tFormValue(name string) string\n\n\t// FormParams returns the form parameters as `url.Values`.\n\tFormParams() (url.Values, error)\n\n\t// FormFile returns the multipart form file for the provided name.\n\tFormFile(name string) (*multipart.FileHeader, error)\n\n\t// MultipartForm returns the multipart form.\n\tMultipartForm() (*multipart.Form, error)\n\n\t// Cookie returns the named cookie provided in the request.\n\tCookie(name string) (*http.Cookie, error)\n\n\t// SetCookie adds a `Set-Cookie` header in HTTP response.\n\tSetCookie(cookie *http.Cookie)\n\n\t// Cookies returns the HTTP cookies sent with the request.\n\tCookies() []*http.Cookie\n\n\t// Get retrieves data from the context.\n\tGet(key string) any\n\n\t// Set saves data in the context.\n\tSet(key string, val any)\n\n\t// Bind binds path params, query params and the request body into provided type `i`. The default binder\n\t// binds body based on Content-Type header.\n\tBind(i any) error\n\n\t// Validate validates provided `i`. It is usually called after `Context#Bind()`.\n\t// Validator must be registered using `Echo#Validator`.\n\tValidate(i any) error\n\n\t// Render renders a template with data and sends a text/html response with status\n\t// code. Renderer must be registered using `Echo.Renderer`.\n\tRender(code int, name string, data any) error\n\n\t// HTML sends an HTTP response with status code.\n\tHTML(code int, html string) error\n\n\t// HTMLBlob sends an HTTP blob response with status code.\n\tHTMLBlob(code int, b []byte) error\n\n\t// String sends a string response with status code.\n\tString(code int, s string) error\n\n\t// JSON sends a JSON response with status code.\n\tJSON(code int, i any) error\n\n\t// JSONPretty sends a pretty-print JSON with status code.\n\tJSONPretty(code int, i any, indent string) error\n\n\t// JSONBlob sends a JSON blob response with status code.\n\tJSONBlob(code int, b []byte) error\n\n\t// JSONP sends a JSONP response with status code. It uses `callback` to construct\n\t// the JSONP payload.\n\tJSONP(code int, callback string, i any) error\n\n\t// JSONPBlob sends a JSONP blob response with status code. It uses `callback`\n\t// to construct the JSONP payload.\n\tJSONPBlob(code int, callback string, b []byte) error\n\n\t// XML sends an XML response with status code.\n\tXML(code int, i any) error\n\n\t// XMLPretty sends a pretty-print XML with status code.\n\tXMLPretty(code int, i any, indent string) error\n\n\t// XMLBlob sends an XML blob response with status code.\n\tXMLBlob(code int, b []byte) error\n\n\t// Blob sends a blob response with status code and content type.\n\tBlob(code int, contentType string, b []byte) error\n\n\t// Stream sends a streaming response with status code and content type.\n\tStream(code int, contentType string, r io.Reader) error\n\n\t// File sends a response with the content of the file.\n\tFile(file string) error\n\n\t// Attachment sends a response as attachment, prompting client to save the\n\t// file.\n\tAttachment(file string, name string) error\n\n\t// Inline sends a response as inline, opening the file in the browser.\n\tInline(file string, name string) error\n\n\t// NoContent sends a response with no body and a status code.\n\tNoContent(code int) error\n\n\t// Redirect redirects the request to a provided URL with status code.\n\tRedirect(code int, url string) error\n\n\t// Error invokes the registered global HTTP error handler. Generally used by middleware.\n\t// A side-effect of calling global error handler is that now Response has been committed (sent to the client) and\n\t// middlewares up in chain can not change Response status code or Response body anymore.\n\t//\n\t// Avoid using this method in handlers as no middleware will be able to effectively handle errors after that.\n\tError(err error)\n\n\t// Handler returns the matched handler by router.\n\tHandler() HandlerFunc\n\n\t// SetHandler sets the matched handler by router.\n\tSetHandler(h HandlerFunc)\n\n\t// Logger returns the `Logger` instance.\n\tLogger() Logger\n\n\t// SetLogger Set the logger\n\tSetLogger(l Logger)\n\n\t// Echo returns the `Echo` instance.\n\tEcho() *Echo\n\n\t// Reset resets the context after request completes. It must be called along\n\t// with `Echo#AcquireContext()` and `Echo#ReleaseContext()`.\n\t// See `Echo#ServeHTTP()`\n\tReset(r *http.Request, w http.ResponseWriter)\n}",
          "ref_module": "v4"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        88,
        89,
        90
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/middleware/key_auth.go:Error",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4/middleware",
          "rel_file_path": "middleware/key_auth_test.go",
          "func_name": "TestKeyAuthWithConfig"
        }
      ],
      "name": "Error",
      "signature": "(e *ErrKeyAuthMissing) Error () string",
      "ground_truth": "func (e *ErrKeyAuthMissing) Error() string {\n\treturn e.Err.Error()\n}",
      "function_comment": "// Error returns errors text",
      "function_statement": "// Error returns errors text",
      "start_line": 72,
      "end_line": 74,
      "file_path": "./middleware/key_auth.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/middleware/key_auth.go",
          "code_snippet": "ErrKeyAuthMissing struct {\n\tErr error\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        72,
        73,
        74
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "github.com/labstack/echo/v4/response.go:Header",
      "testcases": [
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_File"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_fs_test.go",
          "func_name": "TestContext_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRenderTemplate"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSON"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONErrorsOut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONP"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextJSONPBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPrettyURL"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLBlob"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLWithEmptyIntent"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLPretty"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextStream"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextString"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextHTML"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextAttachment"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextXMLError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextInline"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_CommitsCustomResponseCode"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextCookie"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContext_JSON_DoesntCommitResponseCodePrematurely"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "context_test.go",
          "func_name": "TestContextRedirect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoWrapMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoConnect"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoDelete"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMiddlewareError"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoGet"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHead"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoOptions"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPatch"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoPut"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_fs_test.go",
          "func_name": "TestEcho_StaticFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStaticRedirectIndex"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStatic"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoTrace"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoMethodNotAllowed"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoHost"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoStartTLSAndStart"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "renderer_test.go",
          "func_name": "TestRenderWithTemplateRenderer"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoListenerNetwork"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "response_test.go",
          "func_name": "TestResponse"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEchoServeHTTPPathEncoding"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestEcho_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_fs_test.go",
          "func_name": "TestGroup_FileFS"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupFile"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "echo_test.go",
          "func_name": "TestDefaultHTTPErrorHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroupRouteMiddlewareWithMatchAny"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterOptionsMethodHandler"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "group_test.go",
          "func_name": "TestGroup_RouteNotFoundWithMiddleware"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestMethodNotAllowedAndNotFound"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouter_addAndMatchAllSupportedMethods"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterAllowHeaderForAnyOtherMethodType"
        },
        {
          "package": "github.com/labstack/echo/v4",
          "rel_file_path": "router_test.go",
          "func_name": "TestRouterHandleMethodOptions"
        }
      ],
      "name": "Header",
      "signature": "(r *Response) Header () http.Header",
      "ground_truth": "func (r *Response) Header() http.Header {\n\treturn r.Writer.Header()\n}",
      "function_comment": "// Header returns the header map for the writer that will be sent by\n// WriteHeader. Changing the header after a call to WriteHeader (or Write) has\n// no effect unless the modified headers were declared as trailers by setting\n// the \"Trailer\" header before the call to WriteHeader (see example)\n// To suppress implicit response headers, set their value to nil.\n// Example: https://golang.org/pkg/net/http/#example_ResponseWriter_trailers",
      "function_statement": "// Header returns the header map for the writer that will be sent by\n// WriteHeader. Changing the header after a call to WriteHeader (or Write) has\n// no effect unless the modified headers were declared as trailers by setting\n// the \"Trailer\" header before the call to WriteHeader (see example)\n// To suppress implicit response headers, set their value to nil.\n// Example: https://golang.org/pkg/net/http/#example_ResponseWriter_trailers",
      "start_line": 38,
      "end_line": 40,
      "file_path": "./response.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/opensource/echo/response.go",
          "code_snippet": "Response struct {\n\tWriter      http.ResponseWriter\n\techo        *Echo\n\tbeforeFuncs []func()\n\tafterFuncs  []func()\n\tStatus      int\n\tSize        int64\n\tCommitted   bool\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "Header map[string][]string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.darwin-arm64/src/net/http/server.go",
          "code_snippet": "ResponseWriter interface {\n\t// Header returns the header map that will be sent by\n\t// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which\n\t// [Handler] implementations can set HTTP trailers.\n\t//\n\t// Changing the header map after a call to [ResponseWriter.WriteHeader] (or\n\t// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the\n\t// 1xx class or the modified headers are trailers.\n\t//\n\t// There are two ways to set Trailers. The preferred way is to\n\t// predeclare in the headers which trailers you will later\n\t// send by setting the \"Trailer\" header to the names of the\n\t// trailer keys which will come later. In this case, those\n\t// keys of the Header map are treated as if they were\n\t// trailers. See the example. The second way, for trailer\n\t// keys not known to the [Handler] until after the first [ResponseWriter.Write],\n\t// is to prefix the [Header] map keys with the [TrailerPrefix]\n\t// constant value.\n\t//\n\t// To suppress automatic response headers (such as \"Date\"), set\n\t// their value to nil.\n\tHeader() Header\n\n\t// Write writes the data to the connection as part of an HTTP reply.\n\t//\n\t// If [ResponseWriter.WriteHeader] has not yet been called, Write calls\n\t// WriteHeader(http.StatusOK) before writing the data. If the Header\n\t// does not contain a Content-Type line, Write adds a Content-Type set\n\t// to the result of passing the initial 512 bytes of written data to\n\t// [DetectContentType]. Additionally, if the total size of all written\n\t// data is under a few KB and there are no Flush calls, the\n\t// Content-Length header is added automatically.\n\t//\n\t// Depending on the HTTP protocol version and the client, calling\n\t// Write or WriteHeader may prevent future reads on the\n\t// Request.Body. For HTTP/1.x requests, handlers should read any\n\t// needed request body data before writing the response. Once the\n\t// headers have been flushed (due to either an explicit Flusher.Flush\n\t// call or writing enough data to trigger a flush), the request body\n\t// may be unavailable. For HTTP/2 requests, the Go HTTP server permits\n\t// handlers to continue to read the request body while concurrently\n\t// writing the response. However, such behavior may not be supported\n\t// by all HTTP/2 clients. Handlers should read before writing if\n\t// possible to maximize compatibility.\n\tWrite([]byte) (int, error)\n\n\t// WriteHeader sends an HTTP response header with the provided\n\t// status code.\n\t//\n\t// If WriteHeader is not called explicitly, the first call to Write\n\t// will trigger an implicit WriteHeader(http.StatusOK).\n\t// Thus explicit calls to WriteHeader are mainly used to\n\t// send error codes or 1xx informational responses.\n\t//\n\t// The provided code must be a valid HTTP 1xx-5xx status code.\n\t// Any number of 1xx headers may be written, followed by at most\n\t// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx\n\t// headers may be buffered. Use the Flusher interface to send\n\t// buffered data. The header map is cleared when 2xx-5xx headers are\n\t// sent, but not with 1xx headers.\n\t//\n\t// The server will automatically send a 100 (Continue) header\n\t// on the first read from the request body if the request has\n\t// an \"Expect: 100-continue\" header.\n\tWriteHeader(statusCode int)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        38,
        39,
        40
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    }
  ]
}